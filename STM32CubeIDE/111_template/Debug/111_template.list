
111_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080016c8  080016c8  000116c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080016e0  080016e0  000116e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080016e8  080016e8  000116e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080016f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  2000000c  080016fc  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000002c  080016fc  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000407b  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00000f0e  00000000  00000000  000240f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000428  00000000  00000000  00025008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000002ff  00000000  00000000  00025430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000283c  00000000  00000000  0002572f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00007a9c  00000000  00000000  00027f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014f802  00000000  00000000  0002fa07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00000f1c  00000000  00000000  0017f20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  00180128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080016b0 	.word	0x080016b0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080016b0 	.word	0x080016b0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_Init+0x34>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_Init+0x34>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000542:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_Init+0x34>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_Init+0x34>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f939 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f810 	bl	800057c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f000 f806 	bl	800056c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023c00 	.word	0x40023c00

0800056c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <HAL_InitTick+0x54>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_InitTick+0x58>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000592:	fbb3 f3f1 	udiv	r3, r3, r1
 8000596:	fbb2 f3f3 	udiv	r3, r2, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f93b 	bl	8000816 <HAL_SYSTICK_Config>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e00e      	b.n	80005c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d80a      	bhi.n	80005c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b0:	2200      	movs	r2, #0
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	f04f 30ff 	mov.w	r0, #4294967295
 80005b8:	f000 f911 	bl	80007de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <HAL_InitTick+0x5c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005c2:	2300      	movs	r3, #0
 80005c4:	e000      	b.n	80005c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x20>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_IncTick+0x24>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_IncTick+0x24>)
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000004 	.word	0x20000004
 8000600:	20000028 	.word	0x20000028

08000604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return uwTick;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_GetTick+0x14>)
 800060a:	681b      	ldr	r3, [r3, #0]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000028 	.word	0x20000028

0800061c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff ffee 	bl	8000604 <HAL_GetTick>
 8000628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000634:	d005      	beq.n	8000642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_Delay+0x44>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000642:	bf00      	nop
 8000644:	f7ff ffde 	bl	8000604 <HAL_GetTick>
 8000648:	4602      	mov	r2, r0
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	429a      	cmp	r2, r3
 8000652:	d8f7      	bhi.n	8000644 <HAL_Delay+0x28>
  {
  }
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000004 	.word	0x20000004

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <__NVIC_SetPriorityGrouping+0x40>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	4313      	orrs	r3, r2
 8000690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <__NVIC_SetPriorityGrouping+0x40>)
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00
 80006a8:	05fa0000 	.word	0x05fa0000

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	; 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff8e 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff47 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f0:	f7ff ff5c 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80007f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	6978      	ldr	r0, [r7, #20]
 80007fc:	f7ff ff8e 	bl	800071c <NVIC_EncodePriority>
 8000800:	4602      	mov	r2, r0
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5d 	bl	80006c8 <__NVIC_SetPriority>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffb0 	bl	8000784 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000832:	f000 f802 	bl	800083a <HAL_SYSTICK_Callback>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	e175      	b.n	8000b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000868:	2201      	movs	r2, #1
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	4013      	ands	r3, r2
 800087a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	429a      	cmp	r2, r3
 8000882:	f040 8164 	bne.w	8000b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d003      	beq.n	8000896 <HAL_GPIO_Init+0x4e>
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b12      	cmp	r3, #18
 8000894:	d123      	bne.n	80008de <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	08da      	lsrs	r2, r3, #3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3208      	adds	r2, #8
 800089e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	220f      	movs	r2, #15
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	691a      	ldr	r2, [r3, #16]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	08da      	lsrs	r2, r3, #3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3208      	adds	r2, #8
 80008d8:	69b9      	ldr	r1, [r7, #24]
 80008da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	2203      	movs	r2, #3
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f003 0203 	and.w	r2, r3, #3
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4313      	orrs	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d00b      	beq.n	8000932 <HAL_GPIO_Init+0xea>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d007      	beq.n	8000932 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000926:	2b11      	cmp	r3, #17
 8000928:	d003      	beq.n	8000932 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b12      	cmp	r3, #18
 8000930:	d130      	bne.n	8000994 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4013      	ands	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	68da      	ldr	r2, [r3, #12]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4313      	orrs	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000968:	2201      	movs	r2, #1
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	091b      	lsrs	r3, r3, #4
 800097e:	f003 0201 	and.w	r2, r3, #1
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	4013      	ands	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f000 80be 	beq.w	8000b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b66      	ldr	r3, [pc, #408]	; (8000b6c <HAL_GPIO_Init+0x324>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a65      	ldr	r2, [pc, #404]	; (8000b6c <HAL_GPIO_Init+0x324>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b63      	ldr	r3, [pc, #396]	; (8000b6c <HAL_GPIO_Init+0x324>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80009ea:	4a61      	ldr	r2, [pc, #388]	; (8000b70 <HAL_GPIO_Init+0x328>)
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	220f      	movs	r2, #15
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a58      	ldr	r2, [pc, #352]	; (8000b74 <HAL_GPIO_Init+0x32c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d037      	beq.n	8000a86 <HAL_GPIO_Init+0x23e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a57      	ldr	r2, [pc, #348]	; (8000b78 <HAL_GPIO_Init+0x330>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d031      	beq.n	8000a82 <HAL_GPIO_Init+0x23a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a56      	ldr	r2, [pc, #344]	; (8000b7c <HAL_GPIO_Init+0x334>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d02b      	beq.n	8000a7e <HAL_GPIO_Init+0x236>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a55      	ldr	r2, [pc, #340]	; (8000b80 <HAL_GPIO_Init+0x338>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d025      	beq.n	8000a7a <HAL_GPIO_Init+0x232>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a54      	ldr	r2, [pc, #336]	; (8000b84 <HAL_GPIO_Init+0x33c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d01f      	beq.n	8000a76 <HAL_GPIO_Init+0x22e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a53      	ldr	r2, [pc, #332]	; (8000b88 <HAL_GPIO_Init+0x340>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d019      	beq.n	8000a72 <HAL_GPIO_Init+0x22a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a52      	ldr	r2, [pc, #328]	; (8000b8c <HAL_GPIO_Init+0x344>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0x226>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a51      	ldr	r2, [pc, #324]	; (8000b90 <HAL_GPIO_Init+0x348>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d00d      	beq.n	8000a6a <HAL_GPIO_Init+0x222>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a50      	ldr	r2, [pc, #320]	; (8000b94 <HAL_GPIO_Init+0x34c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d007      	beq.n	8000a66 <HAL_GPIO_Init+0x21e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4f      	ldr	r2, [pc, #316]	; (8000b98 <HAL_GPIO_Init+0x350>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_GPIO_Init+0x21a>
 8000a5e:	2309      	movs	r3, #9
 8000a60:	e012      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a62:	230a      	movs	r3, #10
 8000a64:	e010      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a66:	2308      	movs	r3, #8
 8000a68:	e00e      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	e00c      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a6e:	2306      	movs	r3, #6
 8000a70:	e00a      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a72:	2305      	movs	r3, #5
 8000a74:	e008      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a76:	2304      	movs	r3, #4
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e004      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e002      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x240>
 8000a86:	2300      	movs	r3, #0
 8000a88:	69fa      	ldr	r2, [r7, #28]
 8000a8a:	f002 0203 	and.w	r2, r2, #3
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	4093      	lsls	r3, r2
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a98:	4935      	ldr	r1, [pc, #212]	; (8000b70 <HAL_GPIO_Init+0x328>)
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa6:	4b3d      	ldr	r3, [pc, #244]	; (8000b9c <HAL_GPIO_Init+0x354>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aca:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <HAL_GPIO_Init+0x354>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <HAL_GPIO_Init+0x354>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000af4:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <HAL_GPIO_Init+0x354>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_GPIO_Init+0x354>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	4013      	ands	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <HAL_GPIO_Init+0x354>)
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_GPIO_Init+0x354>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <HAL_GPIO_Init+0x354>)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3301      	adds	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	2b0f      	cmp	r3, #15
 8000b58:	f67f ae86 	bls.w	8000868 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40013800 	.word	0x40013800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40021400 	.word	0x40021400
 8000b8c:	40021800 	.word	0x40021800
 8000b90:	40021c00 	.word	0x40021c00
 8000b94:	40022000 	.word	0x40022000
 8000b98:	40022400 	.word	0x40022400
 8000b9c:	40013c00 	.word	0x40013c00

08000ba0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d104      	bne.n	8000bc4 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	619a      	str	r2, [r3, #24]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c06:	f7ff fcfd 	bl	8000604 <HAL_GetTick>
 8000c0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c0c:	e009      	b.n	8000c22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c0e:	f7ff fcf9 	bl	8000604 <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c1c:	d901      	bls.n	8000c22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e022      	b.n	8000c68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2e:	d1ee      	bne.n	8000c0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c3c:	f7ff fce2 	bl	8000604 <HAL_GetTick>
 8000c40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c42:	e009      	b.n	8000c58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c44:	f7ff fcde 	bl	8000604 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c52:	d901      	bls.n	8000c58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000c54:	2303      	movs	r3, #3
 8000c56:	e007      	b.n	8000c68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c64:	d1ee      	bne.n	8000c44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e25e      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8087 	beq.w	8000daa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c9c:	4b96      	ldr	r3, [pc, #600]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d00c      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca8:	4b93      	ldr	r3, [pc, #588]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 030c 	and.w	r3, r3, #12
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d112      	bne.n	8000cda <HAL_RCC_OscConfig+0x62>
 8000cb4:	4b90      	ldr	r3, [pc, #576]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cc0:	d10b      	bne.n	8000cda <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc2:	4b8d      	ldr	r3, [pc, #564]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d06c      	beq.n	8000da8 <HAL_RCC_OscConfig+0x130>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d168      	bne.n	8000da8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e238      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce2:	d106      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x7a>
 8000ce4:	4b84      	ldr	r3, [pc, #528]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a83      	ldr	r2, [pc, #524]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e02e      	b.n	8000d50 <HAL_RCC_OscConfig+0xd8>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x9c>
 8000cfa:	4b7f      	ldr	r3, [pc, #508]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a7e      	ldr	r2, [pc, #504]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	4b7c      	ldr	r3, [pc, #496]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a7b      	ldr	r2, [pc, #492]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e01d      	b.n	8000d50 <HAL_RCC_OscConfig+0xd8>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0xc0>
 8000d1e:	4b76      	ldr	r3, [pc, #472]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a75      	ldr	r2, [pc, #468]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b73      	ldr	r3, [pc, #460]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a72      	ldr	r2, [pc, #456]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00b      	b.n	8000d50 <HAL_RCC_OscConfig+0xd8>
 8000d38:	4b6f      	ldr	r3, [pc, #444]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a6e      	ldr	r2, [pc, #440]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b6c      	ldr	r3, [pc, #432]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a6b      	ldr	r2, [pc, #428]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d013      	beq.n	8000d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d58:	f7ff fc54 	bl	8000604 <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fc50 	bl	8000604 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b64      	cmp	r3, #100	; 0x64
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e1ec      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	4b61      	ldr	r3, [pc, #388]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f0      	beq.n	8000d60 <HAL_RCC_OscConfig+0xe8>
 8000d7e:	e014      	b.n	8000daa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d80:	f7ff fc40 	bl	8000604 <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d88:	f7ff fc3c 	bl	8000604 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b64      	cmp	r3, #100	; 0x64
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e1d8      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9a:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f0      	bne.n	8000d88 <HAL_RCC_OscConfig+0x110>
 8000da6:	e000      	b.n	8000daa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d069      	beq.n	8000e8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000db6:	4b50      	ldr	r3, [pc, #320]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00b      	beq.n	8000dda <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 030c 	and.w	r3, r3, #12
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d11c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x190>
 8000dce:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d116      	bne.n	8000e08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d005      	beq.n	8000df2 <HAL_RCC_OscConfig+0x17a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d001      	beq.n	8000df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e1ac      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df2:	4b41      	ldr	r3, [pc, #260]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	493d      	ldr	r1, [pc, #244]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e06:	e040      	b.n	8000e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d023      	beq.n	8000e58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a38      	ldr	r2, [pc, #224]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fbf2 	bl	8000604 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff fbee 	bl	8000604 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e18a      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e36:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f0      	beq.n	8000e24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4929      	ldr	r1, [pc, #164]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]
 8000e56:	e018      	b.n	8000e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e64:	f7ff fbce 	bl	8000604 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fbca 	bl	8000604 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e166      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f0      	bne.n	8000e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d038      	beq.n	8000f08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d019      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fbab 	bl	8000604 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fba7 	bl	8000604 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e143      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x23a>
 8000ed0:	e01a      	b.n	8000f08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_RCC_OscConfig+0x280>)
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ede:	f7ff fb91 	bl	8000604 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee4:	e00a      	b.n	8000efc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fb8d 	bl	8000604 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d903      	bls.n	8000efc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e129      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
 8000ef8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efc:	4b95      	ldr	r3, [pc, #596]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1ee      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80a4 	beq.w	800105e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f16:	4b8f      	ldr	r3, [pc, #572]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10d      	bne.n	8000f3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a8b      	ldr	r2, [pc, #556]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b89      	ldr	r3, [pc, #548]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f3e:	4b86      	ldr	r3, [pc, #536]	; (8001158 <HAL_RCC_OscConfig+0x4e0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d118      	bne.n	8000f7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000f4a:	4b83      	ldr	r3, [pc, #524]	; (8001158 <HAL_RCC_OscConfig+0x4e0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a82      	ldr	r2, [pc, #520]	; (8001158 <HAL_RCC_OscConfig+0x4e0>)
 8000f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fb55 	bl	8000604 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f5e:	f7ff fb51 	bl	8000604 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b64      	cmp	r3, #100	; 0x64
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e0ed      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f70:	4b79      	ldr	r3, [pc, #484]	; (8001158 <HAL_RCC_OscConfig+0x4e0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x31a>
 8000f84:	4b73      	ldr	r3, [pc, #460]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f88:	4a72      	ldr	r2, [pc, #456]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f90:	e02d      	b.n	8000fee <HAL_RCC_OscConfig+0x376>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x33c>
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9e:	4a6d      	ldr	r2, [pc, #436]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa6:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000faa:	4a6a      	ldr	r2, [pc, #424]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fb2:	e01c      	b.n	8000fee <HAL_RCC_OscConfig+0x376>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d10c      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x35e>
 8000fbc:	4b65      	ldr	r3, [pc, #404]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc0:	4a64      	ldr	r2, [pc, #400]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8000fc8:	4b62      	ldr	r3, [pc, #392]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fcc:	4a61      	ldr	r2, [pc, #388]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8000fd4:	e00b      	b.n	8000fee <HAL_RCC_OscConfig+0x376>
 8000fd6:	4b5f      	ldr	r3, [pc, #380]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fda:	4a5e      	ldr	r2, [pc, #376]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fe2:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe6:	4a5b      	ldr	r2, [pc, #364]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8000fe8:	f023 0304 	bic.w	r3, r3, #4
 8000fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d015      	beq.n	8001022 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fb05 	bl	8000604 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	e00a      	b.n	8001014 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fb01 	bl	8000604 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f241 3288 	movw	r2, #5000	; 0x1388
 800100c:	4293      	cmp	r3, r2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e09b      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001014:	4b4f      	ldr	r3, [pc, #316]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0ee      	beq.n	8000ffe <HAL_RCC_OscConfig+0x386>
 8001020:	e014      	b.n	800104c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001022:	f7ff faef 	bl	8000604 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff faeb 	bl	8000604 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f241 3288 	movw	r2, #5000	; 0x1388
 8001038:	4293      	cmp	r3, r2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e085      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001040:	4b44      	ldr	r3, [pc, #272]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ee      	bne.n	800102a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d105      	bne.n	800105e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d071      	beq.n	800114a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b08      	cmp	r3, #8
 8001070:	d069      	beq.n	8001146 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d14b      	bne.n	8001112 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a35      	ldr	r2, [pc, #212]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff fabd 	bl	8000604 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff fab9 	bl	8000604 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e055      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f0      	bne.n	800108e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69da      	ldr	r2, [r3, #28]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	019b      	lsls	r3, r3, #6
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	085b      	lsrs	r3, r3, #1
 80010c4:	3b01      	subs	r3, #1
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	061b      	lsls	r3, r3, #24
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	071b      	lsls	r3, r3, #28
 80010d8:	491e      	ldr	r1, [pc, #120]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 80010e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ea:	f7ff fa8b 	bl	8000604 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fa87 	bl	8000604 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e023      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x47a>
 8001110:	e01b      	b.n	800114a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 8001118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800111c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fa71 	bl	8000604 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001126:	f7ff fa6d 	bl	8000604 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e009      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_RCC_OscConfig+0x4dc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x4ae>
 8001144:	e001      	b.n	800114a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0ce      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001174:	4b69      	ldr	r3, [pc, #420]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d910      	bls.n	80011a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b66      	ldr	r3, [pc, #408]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 020f 	bic.w	r2, r3, #15
 800118a:	4964      	ldr	r1, [pc, #400]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001192:	4b62      	ldr	r3, [pc, #392]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0b6      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011bc:	4b58      	ldr	r3, [pc, #352]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a57      	ldr	r2, [pc, #348]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d4:	4b52      	ldr	r3, [pc, #328]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a51      	ldr	r2, [pc, #324]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e0:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	494c      	ldr	r1, [pc, #304]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d040      	beq.n	8001280 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d107      	bne.n	8001216 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b46      	ldr	r3, [pc, #280]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d115      	bne.n	800123e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e07d      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121e:	4b40      	ldr	r3, [pc, #256]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e071      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122e:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e069      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123e:	4b38      	ldr	r3, [pc, #224]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f023 0203 	bic.w	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4935      	ldr	r1, [pc, #212]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	4313      	orrs	r3, r2
 800124e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001250:	f7ff f9d8 	bl	8000604 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001256:	e00a      	b.n	800126e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001258:	f7ff f9d4 	bl	8000604 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f241 3288 	movw	r2, #5000	; 0x1388
 8001266:	4293      	cmp	r3, r2
 8001268:	d901      	bls.n	800126e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e051      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 020c 	and.w	r2, r3, #12
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	429a      	cmp	r2, r3
 800127e:	d1eb      	bne.n	8001258 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d210      	bcs.n	80012b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 020f 	bic.w	r2, r3, #15
 8001296:	4921      	ldr	r1, [pc, #132]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e030      	b.n	8001312 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4915      	ldr	r1, [pc, #84]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	490d      	ldr	r1, [pc, #52]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ee:	f000 f81d 	bl	800132c <HAL_RCC_GetSysClockFreq>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	4909      	ldr	r1, [pc, #36]	; (8001324 <HAL_RCC_ClockConfig+0x1c8>)
 8001300:	5ccb      	ldrb	r3, [r1, r3]
 8001302:	fa22 f303 	lsr.w	r3, r2, r3
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_RCC_ClockConfig+0x1cc>)
 8001308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800130a:	200f      	movs	r0, #15
 800130c:	f7ff f936 	bl	800057c <HAL_InitTick>

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00
 8001320:	40023800 	.word	0x40023800
 8001324:	080016c8 	.word	0x080016c8
 8001328:	20000008 	.word	0x20000008

0800132c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800132c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001330:	b090      	sub	sp, #64	; 0x40
 8001332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001344:	4b59      	ldr	r3, [pc, #356]	; (80014ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b08      	cmp	r3, #8
 800134e:	d00d      	beq.n	800136c <HAL_RCC_GetSysClockFreq+0x40>
 8001350:	2b08      	cmp	r3, #8
 8001352:	f200 80a1 	bhi.w	8001498 <HAL_RCC_GetSysClockFreq+0x16c>
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0x34>
 800135a:	2b04      	cmp	r3, #4
 800135c:	d003      	beq.n	8001366 <HAL_RCC_GetSysClockFreq+0x3a>
 800135e:	e09b      	b.n	8001498 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001364:	e09b      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001366:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001368:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800136a:	e098      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800136c:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <HAL_RCC_GetSysClockFreq+0x180>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001376:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d028      	beq.n	80013d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001382:	4b4a      	ldr	r3, [pc, #296]	; (80014ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	099b      	lsrs	r3, r3, #6
 8001388:	2200      	movs	r2, #0
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	627a      	str	r2, [r7, #36]	; 0x24
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001394:	2100      	movs	r1, #0
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001398:	fb03 f201 	mul.w	r2, r3, r1
 800139c:	2300      	movs	r3, #0
 800139e:	fb00 f303 	mul.w	r3, r0, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	4a43      	ldr	r2, [pc, #268]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80013a6:	fba0 1202 	umull	r1, r2, r0, r2
 80013aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ac:	460a      	mov	r2, r1
 80013ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80013b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b2:	4413      	add	r3, r2
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	2200      	movs	r2, #0
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	61fa      	str	r2, [r7, #28]
 80013be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013c6:	f7fe ff37 	bl	8000238 <__aeabi_uldivmod>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4613      	mov	r3, r2
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013d2:	e053      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_RCC_GetSysClockFreq+0x180>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	2200      	movs	r2, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	617a      	str	r2, [r7, #20]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013e6:	f04f 0b00 	mov.w	fp, #0
 80013ea:	4652      	mov	r2, sl
 80013ec:	465b      	mov	r3, fp
 80013ee:	f04f 0000 	mov.w	r0, #0
 80013f2:	f04f 0100 	mov.w	r1, #0
 80013f6:	0159      	lsls	r1, r3, #5
 80013f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013fc:	0150      	lsls	r0, r2, #5
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	ebb2 080a 	subs.w	r8, r2, sl
 8001406:	eb63 090b 	sbc.w	r9, r3, fp
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001416:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800141a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800141e:	ebb2 0408 	subs.w	r4, r2, r8
 8001422:	eb63 0509 	sbc.w	r5, r3, r9
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	00eb      	lsls	r3, r5, #3
 8001430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001434:	00e2      	lsls	r2, r4, #3
 8001436:	4614      	mov	r4, r2
 8001438:	461d      	mov	r5, r3
 800143a:	eb14 030a 	adds.w	r3, r4, sl
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	eb45 030b 	adc.w	r3, r5, fp
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001452:	4629      	mov	r1, r5
 8001454:	028b      	lsls	r3, r1, #10
 8001456:	4621      	mov	r1, r4
 8001458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800145c:	4621      	mov	r1, r4
 800145e:	028a      	lsls	r2, r1, #10
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001466:	2200      	movs	r2, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	60fa      	str	r2, [r7, #12]
 800146c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001470:	f7fe fee2 	bl	8000238 <__aeabi_uldivmod>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4613      	mov	r3, r2
 800147a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_GetSysClockFreq+0x180>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	3301      	adds	r3, #1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800148c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001490:	fbb2 f3f3 	udiv	r3, r2, r3
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001496:	e002      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800149a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800149c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3740      	adds	r7, #64	; 0x40
 80014a4:	46bd      	mov	sp, r7
 80014a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	00f42400 	.word	0x00f42400
 80014b4:	017d7840 	.word	0x017d7840

080014b8 <main>:
#define LED2_PIN    	GPIO_PIN_5

static void SystemClock_Config(void);
static void Gpio_init(void);

int main(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

	HAL_Init();
 80014bc:	f7ff f83a 	bl	8000534 <HAL_Init>
	SystemClock_Config();
 80014c0:	f000 f816 	bl	80014f0 <SystemClock_Config>
	Gpio_init();
 80014c4:	f000 f846 	bl	8001554 <Gpio_init>

	while (1) {

		HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 80014c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <main+0x34>)
 80014ce:	f7ff fb67 	bl	8000ba0 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80014d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d6:	f7ff f8a1 	bl	800061c <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 80014da:	2120      	movs	r1, #32
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <main+0x34>)
 80014de:	f7ff fb5f 	bl	8000ba0 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80014e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e6:	f7ff f899 	bl	800061c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 80014ea:	e7ed      	b.n	80014c8 <main+0x10>
 80014ec:	40022400 	.word	0x40022400

080014f0 <SystemClock_Config>:
	}
}

void SystemClock_Config(void) { // 200MHz
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b092      	sub	sp, #72	; 0x48
 80014f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fe:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001500:	2302      	movs	r3, #2
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001504:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = 25;
 800150a:	2319      	movs	r3, #25
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 400;
 800150e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001514:	2302      	movs	r3, #2
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8001518:	2308      	movs	r3, #8
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fba9 	bl	8000c78 <HAL_RCC_OscConfig>
	HAL_PWREx_EnableOverDrive();
 8001526:	f7ff fb57 	bl	8000bd8 <HAL_PWREx_EnableOverDrive>
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType =
 800152a:	230f      	movs	r3, #15
 800152c:	603b      	str	r3, [r7, #0]
			(RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	2302      	movs	r3, #2
 8001530:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001536:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800153a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	613b      	str	r3, [r7, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 8001542:	463b      	mov	r3, r7
 8001544:	2106      	movs	r1, #6
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fe08 	bl	800115c <HAL_RCC_ClockConfig>
}
 800154c:	bf00      	nop
 800154e:	3748      	adds	r7, #72	; 0x48
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <Gpio_init>:

void Gpio_init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <Gpio_init+0x3c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <Gpio_init+0x3c>)
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <Gpio_init+0x3c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_cfg;
	gpio_cfg.Pin = LED1_PIN | LED2_PIN;
 8001572:	f242 0320 	movw	r3, #8224	; 0x2020
 8001576:	607b      	str	r3, [r7, #4]
	gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(LED1_PORT, &gpio_cfg);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <Gpio_init+0x40>)
 8001582:	f7ff f961 	bl	8000848 <HAL_GPIO_Init>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40022400 	.word	0x40022400

08001598 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800159c:	f7ff f81e 	bl	80005dc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80015a0:	f7ff f945 	bl	800082e <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <SystemInit+0x5c>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <SystemInit+0x5c>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <SystemInit+0x60>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <SystemInit+0x60>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <SystemInit+0x60>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <SystemInit+0x60>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <SystemInit+0x60>)
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <SystemInit+0x64>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <SystemInit+0x60>)
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <SystemInit+0x68>)
 80015de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <SystemInit+0x60>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a08      	ldr	r2, [pc, #32]	; (8001608 <SystemInit+0x60>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SystemInit+0x60>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SystemInit+0x5c>)
 80015f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f8:	609a      	str	r2, [r3, #8]
#endif
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00
 8001608:	40023800 	.word	0x40023800
 800160c:	fef6ffff 	.word	0xfef6ffff
 8001610:	24003010 	.word	0x24003010

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001618:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800161a:	e003      	b.n	8001624 <LoopCopyDataInit>

0800161c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800161e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001620:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001622:	3104      	adds	r1, #4

08001624 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001628:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800162a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800162c:	d3f6      	bcc.n	800161c <CopyDataInit>
  ldr  r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001630:	e002      	b.n	8001638 <LoopFillZerobss>

08001632 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001632:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001634:	f842 3b04 	str.w	r3, [r2], #4

08001638 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800163a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800163c:	d3f9      	bcc.n	8001632 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffb3 	bl	80015a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f000 f811 	bl	8001668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff ff37 	bl	80014b8 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001650:	080016f0 	.word	0x080016f0
  ldr  r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001658:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800165c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001660:	2000002c 	.word	0x2000002c

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <__libc_init_array>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	4d0d      	ldr	r5, [pc, #52]	; (80016a0 <__libc_init_array+0x38>)
 800166c:	4c0d      	ldr	r4, [pc, #52]	; (80016a4 <__libc_init_array+0x3c>)
 800166e:	1b64      	subs	r4, r4, r5
 8001670:	10a4      	asrs	r4, r4, #2
 8001672:	2600      	movs	r6, #0
 8001674:	42a6      	cmp	r6, r4
 8001676:	d109      	bne.n	800168c <__libc_init_array+0x24>
 8001678:	4d0b      	ldr	r5, [pc, #44]	; (80016a8 <__libc_init_array+0x40>)
 800167a:	4c0c      	ldr	r4, [pc, #48]	; (80016ac <__libc_init_array+0x44>)
 800167c:	f000 f818 	bl	80016b0 <_init>
 8001680:	1b64      	subs	r4, r4, r5
 8001682:	10a4      	asrs	r4, r4, #2
 8001684:	2600      	movs	r6, #0
 8001686:	42a6      	cmp	r6, r4
 8001688:	d105      	bne.n	8001696 <__libc_init_array+0x2e>
 800168a:	bd70      	pop	{r4, r5, r6, pc}
 800168c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001690:	4798      	blx	r3
 8001692:	3601      	adds	r6, #1
 8001694:	e7ee      	b.n	8001674 <__libc_init_array+0xc>
 8001696:	f855 3b04 	ldr.w	r3, [r5], #4
 800169a:	4798      	blx	r3
 800169c:	3601      	adds	r6, #1
 800169e:	e7f2      	b.n	8001686 <__libc_init_array+0x1e>
 80016a0:	080016e8 	.word	0x080016e8
 80016a4:	080016e8 	.word	0x080016e8
 80016a8:	080016e8 	.word	0x080016e8
 80016ac:	080016ec 	.word	0x080016ec

080016b0 <_init>:
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	bf00      	nop
 80016b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b6:	bc08      	pop	{r3}
 80016b8:	469e      	mov	lr, r3
 80016ba:	4770      	bx	lr

080016bc <_fini>:
 80016bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016be:	bf00      	nop
 80016c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016c2:	bc08      	pop	{r3}
 80016c4:	469e      	mov	lr, r3
 80016c6:	4770      	bx	lr
