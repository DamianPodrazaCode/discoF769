
115_SDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  080030d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b8  20000068  08003140  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000220  08003140  00020220  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 11 .debug_info   000068f3  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000151a  00000000  00000000  000269cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000680  00000000  00000000  00027ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000004c1  00000000  00000000  00028568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003e08  00000000  00000000  00028a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a7e9  00000000  00000000  0002c831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00152cb1  00000000  00000000  0003701a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000022ac  00000000  00000000  00189ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  0018bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08002fb8 	.word	0x08002fb8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08002fb8 	.word	0x08002fb8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_Init+0x34>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_Init+0x34>)
 80005e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ea:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x34>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_Init+0x34>)
 80005f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f939 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	200f      	movs	r0, #15
 8000600:	f000 f810 	bl	8000624 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f000 f806 	bl	8000614 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023c00 	.word	0x40023c00

08000614 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x54>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_InitTick+0x58>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	fbb3 f3f1 	udiv	r3, r3, r1
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f93b 	bl	80008be <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e00e      	b.n	8000670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d80a      	bhi.n	800066e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f911 	bl	8000886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <HAL_InitTick+0x5c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000008 	.word	0x20000008
 800067c:	20000004 	.word	0x20000004
 8000680:	20000000 	.word	0x20000000

08000684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_IncTick+0x20>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x24>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_IncTick+0x24>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000004 	.word	0x20000004
 80006a8:	20000084 	.word	0x20000084

080006ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_GetTick+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000084 	.word	0x20000084

080006c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006cc:	f7ff ffee 	bl	80006ac <HAL_GetTick>
 80006d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006dc:	d005      	beq.n	80006ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_Delay+0x44>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	4413      	add	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ea:	bf00      	nop
 80006ec:	f7ff ffde 	bl	80006ac <HAL_GetTick>
 80006f0:	4602      	mov	r2, r0
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d8f7      	bhi.n	80006ec <HAL_Delay+0x28>
  {
  }
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000004 	.word	0x20000004

0800070c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <__NVIC_SetPriorityGrouping+0x40>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 8000736:	4313      	orrs	r3, r2
 8000738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073a:	4a04      	ldr	r2, [pc, #16]	; (800074c <__NVIC_SetPriorityGrouping+0x40>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	05fa0000 	.word	0x05fa0000

08000754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <__NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0a      	blt.n	800079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	; (80007bc <__NVIC_SetPriority+0x4c>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000798:	e00a      	b.n	80007b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	; (80007c0 <__NVIC_SetPriority+0x50>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	3b04      	subs	r3, #4
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	761a      	strb	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f1c3 0307 	rsb	r3, r3, #7
 80007de:	2b04      	cmp	r3, #4
 80007e0:	bf28      	it	cs
 80007e2:	2304      	movcs	r3, #4
 80007e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3304      	adds	r3, #4
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d902      	bls.n	80007f4 <NVIC_EncodePriority+0x30>
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3b03      	subs	r3, #3
 80007f2:	e000      	b.n	80007f6 <NVIC_EncodePriority+0x32>
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	f04f 32ff 	mov.w	r2, #4294967295
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43da      	mvns	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	401a      	ands	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800080c:	f04f 31ff 	mov.w	r1, #4294967295
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43d9      	mvns	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	4313      	orrs	r3, r2
         );
}
 800081e:	4618      	mov	r0, r3
 8000820:	3724      	adds	r7, #36	; 0x24
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800083c:	d301      	bcc.n	8000842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083e:	2301      	movs	r3, #1
 8000840:	e00f      	b.n	8000862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <SysTick_Config+0x40>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084a:	210f      	movs	r1, #15
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f7ff ff8e 	bl	8000770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SysTick_Config+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <SysTick_Config+0x40>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff47 	bl	800070c <__NVIC_SetPriorityGrouping>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000898:	f7ff ff5c 	bl	8000754 <__NVIC_GetPriorityGrouping>
 800089c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff ff8e 	bl	80007c4 <NVIC_EncodePriority>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5d 	bl	8000770 <__NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffb0 	bl	800082c <SysTick_Config>
 80008cc:	4603      	mov	r3, r0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008da:	f000 f802 	bl	80008e2 <HAL_SYSTICK_Callback>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
 800090e:	e175      	b.n	8000bfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000910:	2201      	movs	r2, #1
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	429a      	cmp	r2, r3
 800092a:	f040 8164 	bne.w	8000bf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0x4e>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b12      	cmp	r3, #18
 800093c:	d123      	bne.n	8000986 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3208      	adds	r2, #8
 8000946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	220f      	movs	r2, #15
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	f003 0307 	and.w	r3, r3, #7
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	08da      	lsrs	r2, r3, #3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3208      	adds	r2, #8
 8000980:	69b9      	ldr	r1, [r7, #24]
 8000982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	2203      	movs	r2, #3
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4013      	ands	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0203 	and.w	r2, r3, #3
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d00b      	beq.n	80009da <HAL_GPIO_Init+0xea>
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d007      	beq.n	80009da <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ce:	2b11      	cmp	r3, #17
 80009d0:	d003      	beq.n	80009da <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	2b12      	cmp	r3, #18
 80009d8:	d130      	bne.n	8000a3c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	2203      	movs	r2, #3
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a10:	2201      	movs	r2, #1
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	091b      	lsrs	r3, r3, #4
 8000a26:	f003 0201 	and.w	r2, r3, #1
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4013      	ands	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 80be 	beq.w	8000bf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a65      	ldr	r2, [pc, #404]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <HAL_GPIO_Init+0x324>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000a92:	4a61      	ldr	r2, [pc, #388]	; (8000c18 <HAL_GPIO_Init+0x328>)
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3302      	adds	r3, #2
 8000a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a58      	ldr	r2, [pc, #352]	; (8000c1c <HAL_GPIO_Init+0x32c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d037      	beq.n	8000b2e <HAL_GPIO_Init+0x23e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <HAL_GPIO_Init+0x330>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d031      	beq.n	8000b2a <HAL_GPIO_Init+0x23a>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a56      	ldr	r2, [pc, #344]	; (8000c24 <HAL_GPIO_Init+0x334>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d02b      	beq.n	8000b26 <HAL_GPIO_Init+0x236>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a55      	ldr	r2, [pc, #340]	; (8000c28 <HAL_GPIO_Init+0x338>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d025      	beq.n	8000b22 <HAL_GPIO_Init+0x232>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a54      	ldr	r2, [pc, #336]	; (8000c2c <HAL_GPIO_Init+0x33c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d01f      	beq.n	8000b1e <HAL_GPIO_Init+0x22e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a53      	ldr	r2, [pc, #332]	; (8000c30 <HAL_GPIO_Init+0x340>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d019      	beq.n	8000b1a <HAL_GPIO_Init+0x22a>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a52      	ldr	r2, [pc, #328]	; (8000c34 <HAL_GPIO_Init+0x344>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d013      	beq.n	8000b16 <HAL_GPIO_Init+0x226>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <HAL_GPIO_Init+0x348>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d00d      	beq.n	8000b12 <HAL_GPIO_Init+0x222>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a50      	ldr	r2, [pc, #320]	; (8000c3c <HAL_GPIO_Init+0x34c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d007      	beq.n	8000b0e <HAL_GPIO_Init+0x21e>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4f      	ldr	r2, [pc, #316]	; (8000c40 <HAL_GPIO_Init+0x350>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_GPIO_Init+0x21a>
 8000b06:	2309      	movs	r3, #9
 8000b08:	e012      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	e010      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b0e:	2308      	movs	r3, #8
 8000b10:	e00e      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b12:	2307      	movs	r3, #7
 8000b14:	e00c      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b16:	2306      	movs	r3, #6
 8000b18:	e00a      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	e008      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b1e:	2304      	movs	r3, #4
 8000b20:	e006      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b22:	2303      	movs	r3, #3
 8000b24:	e004      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b26:	2302      	movs	r3, #2
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e000      	b.n	8000b30 <HAL_GPIO_Init+0x240>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	69fa      	ldr	r2, [r7, #28]
 8000b32:	f002 0203 	and.w	r2, r2, #3
 8000b36:	0092      	lsls	r2, r2, #2
 8000b38:	4093      	lsls	r3, r2
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b40:	4935      	ldr	r1, [pc, #212]	; (8000c18 <HAL_GPIO_Init+0x328>)
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b4e:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <HAL_GPIO_Init+0x354>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b72:	4a34      	ldr	r2, [pc, #208]	; (8000c44 <HAL_GPIO_Init+0x354>)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <HAL_GPIO_Init+0x354>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b9c:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <HAL_GPIO_Init+0x354>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_GPIO_Init+0x354>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_GPIO_Init+0x354>)
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_GPIO_Init+0x354>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_GPIO_Init+0x354>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	f67f ae86 	bls.w	8000910 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40013800 	.word	0x40013800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020c00 	.word	0x40020c00
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40021400 	.word	0x40021400
 8000c34:	40021800 	.word	0x40021800
 8000c38:	40021c00 	.word	0x40021c00
 8000c3c:	40022000 	.word	0x40022000
 8000c40:	40022400 	.word	0x40022400
 8000c44:	40013c00 	.word	0x40013c00

08000c48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695a      	ldr	r2, [r3, #20]
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d104      	bne.n	8000c6c <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	619a      	str	r2, [r3, #24]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cae:	f7ff fcfd 	bl	80006ac <HAL_GetTick>
 8000cb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cb4:	e009      	b.n	8000cca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cb6:	f7ff fcf9 	bl	80006ac <HAL_GetTick>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc4:	d901      	bls.n	8000cca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e022      	b.n	8000d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd6:	d1ee      	bne.n	8000cb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce4:	f7ff fce2 	bl	80006ac <HAL_GetTick>
 8000ce8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cea:	e009      	b.n	8000d00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cec:	f7ff fcde 	bl	80006ac <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cfa:	d901      	bls.n	8000d00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e007      	b.n	8000d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d0c:	d1ee      	bne.n	8000cec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e25e      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8087 	beq.w	8000e52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d44:	4b96      	ldr	r3, [pc, #600]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 030c 	and.w	r3, r3, #12
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d00c      	beq.n	8000d6a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d50:	4b93      	ldr	r3, [pc, #588]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d112      	bne.n	8000d82 <HAL_RCC_OscConfig+0x62>
 8000d5c:	4b90      	ldr	r3, [pc, #576]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d68:	d10b      	bne.n	8000d82 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6a:	4b8d      	ldr	r3, [pc, #564]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d06c      	beq.n	8000e50 <HAL_RCC_OscConfig+0x130>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d168      	bne.n	8000e50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e238      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d8a:	d106      	bne.n	8000d9a <HAL_RCC_OscConfig+0x7a>
 8000d8c:	4b84      	ldr	r3, [pc, #528]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a83      	ldr	r2, [pc, #524]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	e02e      	b.n	8000df8 <HAL_RCC_OscConfig+0xd8>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10c      	bne.n	8000dbc <HAL_RCC_OscConfig+0x9c>
 8000da2:	4b7f      	ldr	r3, [pc, #508]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a7e      	ldr	r2, [pc, #504]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7b      	ldr	r2, [pc, #492]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e01d      	b.n	8000df8 <HAL_RCC_OscConfig+0xd8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0xc0>
 8000dc6:	4b76      	ldr	r3, [pc, #472]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a75      	ldr	r2, [pc, #468]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b73      	ldr	r3, [pc, #460]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a72      	ldr	r2, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e00b      	b.n	8000df8 <HAL_RCC_OscConfig+0xd8>
 8000de0:	4b6f      	ldr	r3, [pc, #444]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a6e      	ldr	r2, [pc, #440]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	4b6c      	ldr	r3, [pc, #432]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a6b      	ldr	r2, [pc, #428]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d013      	beq.n	8000e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e00:	f7ff fc54 	bl	80006ac <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fc50 	bl	80006ac <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e1ec      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	4b61      	ldr	r3, [pc, #388]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f0      	beq.n	8000e08 <HAL_RCC_OscConfig+0xe8>
 8000e26:	e014      	b.n	8000e52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc40 	bl	80006ac <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fc3c 	bl	80006ac <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e1d8      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0x110>
 8000e4e:	e000      	b.n	8000e52 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d069      	beq.n	8000f32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e5e:	4b50      	ldr	r3, [pc, #320]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00b      	beq.n	8000e82 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e6a:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d11c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x190>
 8000e76:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d116      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e82:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <HAL_RCC_OscConfig+0x17a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d001      	beq.n	8000e9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e1ac      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9a:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	493d      	ldr	r1, [pc, #244]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	e040      	b.n	8000f32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d023      	beq.n	8000f00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a38      	ldr	r2, [pc, #224]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fbf2 	bl	80006ac <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fbee 	bl	80006ac <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e18a      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4929      	ldr	r1, [pc, #164]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
 8000efe:	e018      	b.n	8000f32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fbce 	bl	80006ac <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f14:	f7ff fbca 	bl	80006ac <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e166      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d038      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d019      	beq.n	8000f7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f4a:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f52:	f7ff fbab 	bl	80006ac <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fba7 	bl	80006ac <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e143      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x23a>
 8000f78:	e01a      	b.n	8000fb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f86:	f7ff fb91 	bl	80006ac <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8c:	e00a      	b.n	8000fa4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fb8d 	bl	80006ac <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d903      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e129      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
 8000fa0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa4:	4b95      	ldr	r3, [pc, #596]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8000fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ee      	bne.n	8000f8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80a4 	beq.w	8001106 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fbe:	4b8f      	ldr	r3, [pc, #572]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10d      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b8c      	ldr	r3, [pc, #560]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a8b      	ldr	r2, [pc, #556]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b89      	ldr	r3, [pc, #548]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe6:	4b86      	ldr	r3, [pc, #536]	; (8001200 <HAL_RCC_OscConfig+0x4e0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d118      	bne.n	8001024 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000ff2:	4b83      	ldr	r3, [pc, #524]	; (8001200 <HAL_RCC_OscConfig+0x4e0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a82      	ldr	r2, [pc, #520]	; (8001200 <HAL_RCC_OscConfig+0x4e0>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fb55 	bl	80006ac <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001006:	f7ff fb51 	bl	80006ac <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e0ed      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001018:	4b79      	ldr	r3, [pc, #484]	; (8001200 <HAL_RCC_OscConfig+0x4e0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f0      	beq.n	8001006 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d106      	bne.n	800103a <HAL_RCC_OscConfig+0x31a>
 800102c:	4b73      	ldr	r3, [pc, #460]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 800102e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001030:	4a72      	ldr	r2, [pc, #456]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6713      	str	r3, [r2, #112]	; 0x70
 8001038:	e02d      	b.n	8001096 <HAL_RCC_OscConfig+0x376>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0x33c>
 8001042:	4b6e      	ldr	r3, [pc, #440]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001046:	4a6d      	ldr	r2, [pc, #436]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	6713      	str	r3, [r2, #112]	; 0x70
 800104e:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001052:	4a6a      	ldr	r2, [pc, #424]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001054:	f023 0304 	bic.w	r3, r3, #4
 8001058:	6713      	str	r3, [r2, #112]	; 0x70
 800105a:	e01c      	b.n	8001096 <HAL_RCC_OscConfig+0x376>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b05      	cmp	r3, #5
 8001062:	d10c      	bne.n	800107e <HAL_RCC_OscConfig+0x35e>
 8001064:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001068:	4a64      	ldr	r2, [pc, #400]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6713      	str	r3, [r2, #112]	; 0x70
 8001070:	4b62      	ldr	r3, [pc, #392]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001074:	4a61      	ldr	r2, [pc, #388]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6713      	str	r3, [r2, #112]	; 0x70
 800107c:	e00b      	b.n	8001096 <HAL_RCC_OscConfig+0x376>
 800107e:	4b5f      	ldr	r3, [pc, #380]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001082:	4a5e      	ldr	r2, [pc, #376]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	6713      	str	r3, [r2, #112]	; 0x70
 800108a:	4b5c      	ldr	r3, [pc, #368]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 800108c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800108e:	4a5b      	ldr	r2, [pc, #364]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d015      	beq.n	80010ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff fb05 	bl	80006ac <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f7ff fb01 	bl	80006ac <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e09b      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010bc:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 80010be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0ee      	beq.n	80010a6 <HAL_RCC_OscConfig+0x386>
 80010c8:	e014      	b.n	80010f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ca:	f7ff faef 	bl	80006ac <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d0:	e00a      	b.n	80010e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f7ff faeb 	bl	80006ac <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e085      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e8:	4b44      	ldr	r3, [pc, #272]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 80010ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1ee      	bne.n	80010d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d105      	bne.n	8001106 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a3f      	ldr	r2, [pc, #252]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d071      	beq.n	80011f2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b08      	cmp	r3, #8
 8001118:	d069      	beq.n	80011ee <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d14b      	bne.n	80011ba <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a35      	ldr	r2, [pc, #212]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800112c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fabd 	bl	80006ac <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff fab9 	bl	80006ac <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e055      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69da      	ldr	r2, [r3, #28]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	019b      	lsls	r3, r3, #6
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	085b      	lsrs	r3, r3, #1
 800116c:	3b01      	subs	r3, #1
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	061b      	lsls	r3, r3, #24
 8001178:	431a      	orrs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	071b      	lsls	r3, r3, #28
 8001180:	491e      	ldr	r1, [pc, #120]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 800118c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fa8b 	bl	80006ac <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fa87 	bl	80006ac <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e023      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x47a>
 80011b8:	e01b      	b.n	80011f2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 80011c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa71 	bl	80006ac <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ce:	f7ff fa6d 	bl	80006ac <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e009      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_RCC_OscConfig+0x4dc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f0      	bne.n	80011ce <HAL_RCC_OscConfig+0x4ae>
 80011ec:	e001      	b.n	80011f2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0ce      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800121c:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d910      	bls.n	800124c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 020f 	bic.w	r2, r3, #15
 8001232:	4964      	ldr	r1, [pc, #400]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0b6      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001264:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4a57      	ldr	r2, [pc, #348]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800126e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800127c:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4a51      	ldr	r2, [pc, #324]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001286:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001288:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	494c      	ldr	r1, [pc, #304]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d040      	beq.n	8001328 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d115      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e07d      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d107      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d109      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e071      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e069      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f023 0203 	bic.w	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012f8:	f7ff f9d8 	bl	80006ac <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	e00a      	b.n	8001316 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001300:	f7ff f9d4 	bl	80006ac <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	; 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e051      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 020c 	and.w	r2, r3, #12
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	429a      	cmp	r2, r3
 8001326:	d1eb      	bne.n	8001300 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d210      	bcs.n	8001358 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 020f 	bic.w	r2, r3, #15
 800133e:	4921      	ldr	r1, [pc, #132]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e030      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4915      	ldr	r1, [pc, #84]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	490d      	ldr	r1, [pc, #52]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001396:	f000 f81d 	bl	80013d4 <HAL_RCC_GetSysClockFreq>
 800139a:	4602      	mov	r2, r0
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	4909      	ldr	r1, [pc, #36]	; (80013cc <HAL_RCC_ClockConfig+0x1c8>)
 80013a8:	5ccb      	ldrb	r3, [r1, r3]
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_RCC_ClockConfig+0x1cc>)
 80013b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f7ff f936 	bl	8000624 <HAL_InitTick>

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00
 80013c8:	40023800 	.word	0x40023800
 80013cc:	08002fd0 	.word	0x08002fd0
 80013d0:	20000008 	.word	0x20000008

080013d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d8:	b090      	sub	sp, #64	; 0x40
 80013da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d00d      	beq.n	8001414 <HAL_RCC_GetSysClockFreq+0x40>
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	f200 80a1 	bhi.w	8001540 <HAL_RCC_GetSysClockFreq+0x16c>
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x34>
 8001402:	2b04      	cmp	r3, #4
 8001404:	d003      	beq.n	800140e <HAL_RCC_GetSysClockFreq+0x3a>
 8001406:	e09b      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <HAL_RCC_GetSysClockFreq+0x184>)
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800140c:	e09b      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800140e:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_GetSysClockFreq+0x188>)
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001412:	e098      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001414:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <HAL_RCC_GetSysClockFreq+0x180>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_RCC_GetSysClockFreq+0x180>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d028      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_RCC_GetSysClockFreq+0x180>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	099b      	lsrs	r3, r3, #6
 8001430:	2200      	movs	r2, #0
 8001432:	623b      	str	r3, [r7, #32]
 8001434:	627a      	str	r2, [r7, #36]	; 0x24
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800143c:	2100      	movs	r1, #0
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_RCC_GetSysClockFreq+0x188>)
 8001440:	fb03 f201 	mul.w	r2, r3, r1
 8001444:	2300      	movs	r3, #0
 8001446:	fb00 f303 	mul.w	r3, r0, r3
 800144a:	4413      	add	r3, r2
 800144c:	4a43      	ldr	r2, [pc, #268]	; (800155c <HAL_RCC_GetSysClockFreq+0x188>)
 800144e:	fba0 1202 	umull	r1, r2, r0, r2
 8001452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001454:	460a      	mov	r2, r1
 8001456:	62ba      	str	r2, [r7, #40]	; 0x28
 8001458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800145a:	4413      	add	r3, r2
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001460:	2200      	movs	r2, #0
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	61fa      	str	r2, [r7, #28]
 8001466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800146a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800146e:	f7fe ff37 	bl	80002e0 <__aeabi_uldivmod>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4613      	mov	r3, r2
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800147a:	e053      	b.n	8001524 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147c:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_RCC_GetSysClockFreq+0x180>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	099b      	lsrs	r3, r3, #6
 8001482:	2200      	movs	r2, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	617a      	str	r2, [r7, #20]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800148e:	f04f 0b00 	mov.w	fp, #0
 8001492:	4652      	mov	r2, sl
 8001494:	465b      	mov	r3, fp
 8001496:	f04f 0000 	mov.w	r0, #0
 800149a:	f04f 0100 	mov.w	r1, #0
 800149e:	0159      	lsls	r1, r3, #5
 80014a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014a4:	0150      	lsls	r0, r2, #5
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	ebb2 080a 	subs.w	r8, r2, sl
 80014ae:	eb63 090b 	sbc.w	r9, r3, fp
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80014be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80014c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80014c6:	ebb2 0408 	subs.w	r4, r2, r8
 80014ca:	eb63 0509 	sbc.w	r5, r3, r9
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	00eb      	lsls	r3, r5, #3
 80014d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014dc:	00e2      	lsls	r2, r4, #3
 80014de:	4614      	mov	r4, r2
 80014e0:	461d      	mov	r5, r3
 80014e2:	eb14 030a 	adds.w	r3, r4, sl
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	eb45 030b 	adc.w	r3, r5, fp
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014fa:	4629      	mov	r1, r5
 80014fc:	028b      	lsls	r3, r1, #10
 80014fe:	4621      	mov	r1, r4
 8001500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001504:	4621      	mov	r1, r4
 8001506:	028a      	lsls	r2, r1, #10
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150e:	2200      	movs	r2, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	60fa      	str	r2, [r7, #12]
 8001514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001518:	f7fe fee2 	bl	80002e0 <__aeabi_uldivmod>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4613      	mov	r3, r2
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_GetSysClockFreq+0x180>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	3301      	adds	r3, #1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	fbb2 f3f3 	udiv	r3, r2, r3
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800153e:	e002      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_RCC_GetSysClockFreq+0x184>)
 8001542:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001548:	4618      	mov	r0, r3
 800154a:	3740      	adds	r7, #64	; 0x40
 800154c:	46bd      	mov	sp, r7
 800154e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	00f42400 	.word	0x00f42400
 800155c:	017d7840 	.word	0x017d7840

08001560 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e025      	b.n	80015c0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d106      	bne.n	800158e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f81d 	bl	80015c8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3304      	adds	r3, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4610      	mov	r0, r2
 80015a2:	f000 f867 	bl	8001674 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	461a      	mov	r2, r3
 80015b0:	6839      	ldr	r1, [r7, #0]
 80015b2:	f000 f8d1 	bl	8001758 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d101      	bne.n	80015f8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80015f4:	2302      	movs	r3, #2
 80015f6:	e018      	b.n	800162a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2202      	movs	r2, #2
 80015fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f925 	bl	8001858 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d104      	bne.n	8001620 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2205      	movs	r2, #5
 800161a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800161e:	e003      	b.n	8001628 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d101      	bne.n	800164c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8001648:	2302      	movs	r3, #2
 800164a:	e00e      	b.n	800166a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f91d 	bl	800189a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d027      	beq.n	80016de <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <FMC_SDRAM_Init+0xe0>)
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80016a4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80016aa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80016b0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80016b6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80016bc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80016c2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80016c8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80016ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e032      	b.n	8001744 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80016ea:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80016f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80016fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <FMC_SDRAM_Init+0xe0>)
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001718:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800171e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8001724:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800172a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8001730:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4313      	orrs	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	ffff8000 	.word	0xffff8000

08001758 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d02e      	beq.n	80017d0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800177e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800178e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	3b01      	subs	r3, #1
 8001796:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8001798:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	3b01      	subs	r3, #1
 80017a0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80017a2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80017ac:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80017b6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	3b01      	subs	r3, #1
 80017be:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80017c0:	4313      	orrs	r3, r2
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	e039      	b.n	8001844 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <FMC_SDRAM_Timing_Init+0xfc>)
 80017da:	4013      	ands	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80017ee:	4313      	orrs	r3, r2
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001802:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001812:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	3b01      	subs	r3, #1
 800181a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800181c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8001826:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	3b01      	subs	r3, #1
 800182e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001830:	4313      	orrs	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	ff0f0fff 	.word	0xff0f0fff

08001858 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001870:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	3b01      	subs	r3, #1
 8001878:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800187a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <main>:
static void SystemClock_Config(void);
static void Gpio_init(void);
static void Fmc_init(void);
static void Sdram_init(void);

int main(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	f5ad 6de3 	sub.w	sp, sp, #1816	; 0x718
 80018c6:	af00      	add	r7, sp, #0

	HAL_Init();
 80018c8:	f7fe fe88 	bl	80005dc <HAL_Init>
	SystemClock_Config();
 80018cc:	f000 f8de 	bl	8001a8c <SystemClock_Config>
	Gpio_init();
 80018d0:	f000 f90e 	bl	8001af0 <Gpio_init>
	Fmc_init();
 80018d4:	f000 f92e 	bl	8001b34 <Fmc_init>
	Sdram_init();
 80018d8:	f000 f9d4 	bl	8001c84 <Sdram_init>
		uint32_t addr_err[0x100];
		uint8_t ram_err[0x100];
		uint8_t sdram_err[0x100];
	};

	volatile uint32_t test_ok = 0; //zmienna w której będzie wynik testu
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
	struct Test_ERR test_err;

	// uzupełnienie randomem małego bloku na stosie
	uint8_t tab[0x100];
	srand(HAL_GetTick());
 80018e2:	f7fe fee3 	bl	80006ac <HAL_GetTick>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fb65 	bl	8001fb8 <srand>
	for (int i = 0; i < 0x100; i++) {
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80018f4:	e016      	b.n	8001924 <main+0x64>
		tab[i] = rand() % 0x100;
 80018f6:	f000 fb8d 	bl	8002014 <rand>
 80018fa:	4603      	mov	r3, r0
 80018fc:	425a      	negs	r2, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	bf58      	it	pl
 8001904:	4253      	negpl	r3, r2
 8001906:	b2d9      	uxtb	r1, r3
 8001908:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800190c:	f5a3 62e3 	sub.w	r2, r3, #1816	; 0x718
 8001910:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 8001914:	4413      	add	r3, r2
 8001916:	460a      	mov	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 0x100; i++) {
 800191a:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 800191e:	3301      	adds	r3, #1
 8001920:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 8001924:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 8001928:	2bff      	cmp	r3, #255	; 0xff
 800192a:	dde4      	ble.n	80018f6 <main+0x36>
	}

	// zapełnienie całej sdram powtarzanymi blokami
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 8001932:	e024      	b.n	800197e <main+0xbe>
		for (int i = 0; i < 0x100; i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 800193a:	e017      	b.n	800196c <main+0xac>
			*(__IO uint8_t*) (SDRAM_DEVICE_ADDR + (j * 0x100) + (1 * i)) = tab[i];
 800193c:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	461a      	mov	r2, r3
 8001944:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8001948:	4413      	add	r3, r2
 800194a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800194e:	4619      	mov	r1, r3
 8001950:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8001954:	f5a3 62e3 	sub.w	r2, r3, #1816	; 0x718
 8001958:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	700b      	strb	r3, [r1, #0]
		for (int i = 0; i < 0x100; i++) {
 8001962:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8001966:	3301      	adds	r3, #1
 8001968:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 800196c:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	dde3      	ble.n	800193c <main+0x7c>
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 8001974:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 8001978:	3301      	adds	r3, #1
 800197a:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 800197e:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001986:	d3d5      	bcc.n	8001934 <main+0x74>
		}

	// porównanie pamięci
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
 800198e:	e064      	b.n	8001a5a <main+0x19a>
		for (int i = 0; i < 0x100; i++) {
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8001996:	e057      	b.n	8001a48 <main+0x188>
			if ((*(__IO uint8_t*) (SDRAM_DEVICE_ADDR + (j * 0x100) + (1 * i))) != tab[i]) {
 8001998:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	461a      	mov	r2, r3
 80019a0:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80019a4:	4413      	add	r3, r2
 80019a6:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80019b2:	f5a3 61e3 	sub.w	r1, r3, #1816	; 0x718
 80019b6:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80019ba:	440b      	add	r3, r1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d03d      	beq.n	8001a3e <main+0x17e>
				test_err.addr_err[test_ok] = (SDRAM_DEVICE_ADDR + (j * 0x100) + (1 * i));
 80019c2:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	461a      	mov	r2, r3
 80019ca:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80019ce:	4413      	add	r3, r2
 80019d0:	f8d7 2700 	ldr.w	r2, [r7, #1792]	; 0x700
 80019d4:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80019d8:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80019dc:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 80019e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				test_err.sdram_err[test_ok] = *(__IO uint8_t*) (SDRAM_DEVICE_ADDR + (j * 0x100) + (1 * i));
 80019e4:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	461a      	mov	r2, r3
 80019ec:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80019f0:	4413      	add	r3, r2
 80019f2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80019f6:	461a      	mov	r2, r3
 80019f8:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	b2d1      	uxtb	r1, r2
 8001a00:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 8001a04:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 8001a08:	4413      	add	r3, r2
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
				test_err.ram_err[test_ok] = tab[i];
 8001a10:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 8001a14:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 8001a18:	f5a2 61e3 	sub.w	r1, r2, #1816	; 0x718
 8001a1c:	f8d7 2704 	ldr.w	r2, [r7, #1796]	; 0x704
 8001a20:	440a      	add	r2, r1
 8001a22:	7811      	ldrb	r1, [r2, #0]
 8001a24:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 8001a28:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 8001a2c:	4413      	add	r3, r2
 8001a2e:	460a      	mov	r2, r1
 8001a30:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
				test_ok++;
 8001a34:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
		for (int i = 0; i < 0x100; i++) {
 8001a3e:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 8001a42:	3301      	adds	r3, #1
 8001a44:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8001a48:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 8001a4c:	2bff      	cmp	r3, #255	; 0xff
 8001a4e:	dda3      	ble.n	8001998 <main+0xd8>
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 8001a50:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
 8001a5a:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d395      	bcc.n	8001990 <main+0xd0>
			}
		}

	while (1) {

		HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 8001a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <main+0x1c8>)
 8001a6a:	f7ff f8ed 	bl	8000c48 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a72:	f7fe fe27 	bl	80006c4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8001a76:	2120      	movs	r1, #32
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <main+0x1c8>)
 8001a7a:	f7ff f8e5 	bl	8000c48 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a82:	f7fe fe1f 	bl	80006c4 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 8001a86:	e7ed      	b.n	8001a64 <main+0x1a4>
 8001a88:	40022400 	.word	0x40022400

08001a8c <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b092      	sub	sp, #72	; 0x48
 8001a90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001aa6:	2319      	movs	r3, #25
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001aaa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f92f 	bl	8000d20 <HAL_RCC_OscConfig>
	HAL_PWREx_EnableOverDrive();
 8001ac2:	f7ff f8dd 	bl	8000c80 <HAL_PWREx_EnableOverDrive>
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType =
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	603b      	str	r3, [r7, #0]
			(RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aca:	2302      	movs	r3, #2
 8001acc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ad2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ad6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	613b      	str	r3, [r7, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2106      	movs	r1, #6
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fb8e 	bl	8001204 <HAL_RCC_ClockConfig>
}
 8001ae8:	bf00      	nop
 8001aea:	3748      	adds	r7, #72	; 0x48
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <Gpio_init>:

void Gpio_init(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <Gpio_init+0x3c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <Gpio_init+0x3c>)
 8001afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <Gpio_init+0x3c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_cfg;
	gpio_cfg.Pin = LED1_PIN | LED2_PIN;
 8001b0e:	f242 0320 	movw	r3, #8224	; 0x2020
 8001b12:	607b      	str	r3, [r7, #4]
	gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(LED1_PORT, &gpio_cfg);
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <Gpio_init+0x40>)
 8001b1e:	f7fe fee7 	bl	80008f0 <HAL_GPIO_Init>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40022400 	.word	0x40022400

08001b34 <Fmc_init>:

void Fmc_init(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
	__HAL_RCC_FMC_CLK_ENABLE();
 8001b3a:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <Fmc_init+0x134>)
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	4a4a      	ldr	r2, [pc, #296]	; (8001c68 <Fmc_init+0x134>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6393      	str	r3, [r2, #56]	; 0x38
 8001b46:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <Fmc_init+0x134>)
 8001b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b52:	4b45      	ldr	r3, [pc, #276]	; (8001c68 <Fmc_init+0x134>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <Fmc_init+0x134>)
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <Fmc_init+0x134>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <Fmc_init+0x134>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a3e      	ldr	r2, [pc, #248]	; (8001c68 <Fmc_init+0x134>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <Fmc_init+0x134>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001b82:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <Fmc_init+0x134>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a38      	ldr	r2, [pc, #224]	; (8001c68 <Fmc_init+0x134>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <Fmc_init+0x134>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001b9a:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <Fmc_init+0x134>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <Fmc_init+0x134>)
 8001ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <Fmc_init+0x134>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <Fmc_init+0x134>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a2c      	ldr	r2, [pc, #176]	; (8001c68 <Fmc_init+0x134>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <Fmc_init+0x134>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <Fmc_init+0x134>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <Fmc_init+0x134>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <Fmc_init+0x134>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpio_cfg;
	gpio_cfg.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
	gpio_cfg.Pull = GPIO_PULLUP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_cfg.Speed = GPIO_SPEED_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_cfg.Alternate = GPIO_AF12_FMC;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

	gpio_cfg.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 8001bf2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001bf6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &gpio_cfg);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481b      	ldr	r0, [pc, #108]	; (8001c6c <Fmc_init+0x138>)
 8001c00:	f7fe fe76 	bl	80008f0 <HAL_GPIO_Init>

	gpio_cfg.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001c04:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c08:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE, &gpio_cfg);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4817      	ldr	r0, [pc, #92]	; (8001c70 <Fmc_init+0x13c>)
 8001c12:	f7fe fe6d 	bl	80008f0 <HAL_GPIO_Init>

	gpio_cfg.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11
 8001c16:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001c1a:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOF, &gpio_cfg);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <Fmc_init+0x140>)
 8001c24:	f7fe fe64 	bl	80008f0 <HAL_GPIO_Init>

	gpio_cfg.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8001c28:	f248 1337 	movw	r3, #33079	; 0x8137
 8001c2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOG, &gpio_cfg);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	4810      	ldr	r0, [pc, #64]	; (8001c78 <Fmc_init+0x144>)
 8001c36:	f7fe fe5b 	bl	80008f0 <HAL_GPIO_Init>

	gpio_cfg.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001c3a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001c3e:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOH, &gpio_cfg);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <Fmc_init+0x148>)
 8001c48:	f7fe fe52 	bl	80008f0 <HAL_GPIO_Init>

	gpio_cfg.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 8001c4c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001c50:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_9 | GPIO_PIN_10;
	HAL_GPIO_Init(GPIOI, &gpio_cfg);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4809      	ldr	r0, [pc, #36]	; (8001c80 <Fmc_init+0x14c>)
 8001c5a:	f7fe fe49 	bl	80008f0 <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	3730      	adds	r7, #48	; 0x30
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021400 	.word	0x40021400
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	40021c00 	.word	0x40021c00
 8001c80:	40022000 	.word	0x40022000

08001c84 <Sdram_init>:

SDRAM_HandleTypeDef sdramHandle;
void Sdram_init(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0

	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <Sdram_init+0xe0>)
 8001c8c:	4a36      	ldr	r2, [pc, #216]	; (8001d68 <Sdram_init+0xe4>)
 8001c8e:	601a      	str	r2, [r3, #0]
	sdramHandle.Init.SDBank = FMC_SDRAM_BANK1;
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <Sdram_init+0xe0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
	sdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <Sdram_init+0xe0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
	sdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <Sdram_init+0xe0>)
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	60da      	str	r2, [r3, #12]
	sdramHandle.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001ca2:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <Sdram_init+0xe0>)
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	611a      	str	r2, [r3, #16]
	sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <Sdram_init+0xe0>)
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	615a      	str	r2, [r3, #20]
	sdramHandle.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <Sdram_init+0xe0>)
 8001cb0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001cb4:	619a      	str	r2, [r3, #24]
	sdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <Sdram_init+0xe0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
	sdramHandle.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <Sdram_init+0xe0>)
 8001cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc2:	621a      	str	r2, [r3, #32]
	sdramHandle.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <Sdram_init+0xe0>)
 8001cc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
	sdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001ccc:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <Sdram_init+0xe0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
	FMC_SDRAM_TimingTypeDef Timing;
	Timing.LoadToActiveDelay = 2;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	607b      	str	r3, [r7, #4]
	Timing.ExitSelfRefreshDelay = 7;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	60bb      	str	r3, [r7, #8]
	Timing.SelfRefreshTime = 4;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]
	Timing.RowCycleDelay = 7;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	613b      	str	r3, [r7, #16]
	Timing.WriteRecoveryTime = 2;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	617b      	str	r3, [r7, #20]
	Timing.RPDelay = 2;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
	Timing.RCDDelay = 2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61fb      	str	r3, [r7, #28]
	HAL_SDRAM_Init(&sdramHandle, &Timing);
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481c      	ldr	r0, [pc, #112]	; (8001d64 <Sdram_init+0xe0>)
 8001cf4:	f7ff fc34 	bl	8001560 <HAL_SDRAM_Init>

	static FMC_SDRAM_CommandTypeDef Command = { 0 };
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <Sdram_init+0xe8>)
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	605a      	str	r2, [r3, #4]

	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <Sdram_init+0xe8>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, 100);
 8001d04:	2264      	movs	r2, #100	; 0x64
 8001d06:	4919      	ldr	r1, [pc, #100]	; (8001d6c <Sdram_init+0xe8>)
 8001d08:	4816      	ldr	r0, [pc, #88]	; (8001d64 <Sdram_init+0xe0>)
 8001d0a:	f7ff fc67 	bl	80015dc <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7fe fcd8 	bl	80006c4 <HAL_Delay>

	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <Sdram_init+0xe8>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	601a      	str	r2, [r3, #0]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, 100);
 8001d1a:	2264      	movs	r2, #100	; 0x64
 8001d1c:	4913      	ldr	r1, [pc, #76]	; (8001d6c <Sdram_init+0xe8>)
 8001d1e:	4811      	ldr	r0, [pc, #68]	; (8001d64 <Sdram_init+0xe0>)
 8001d20:	f7ff fc5c 	bl	80015dc <HAL_SDRAM_SendCommand>

	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <Sdram_init+0xe8>)
 8001d26:	2203      	movs	r2, #3
 8001d28:	601a      	str	r2, [r3, #0]
	Command.AutoRefreshNumber = 8;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <Sdram_init+0xe8>)
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	609a      	str	r2, [r3, #8]
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, 100);
 8001d30:	2264      	movs	r2, #100	; 0x64
 8001d32:	490e      	ldr	r1, [pc, #56]	; (8001d6c <Sdram_init+0xe8>)
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <Sdram_init+0xe0>)
 8001d36:	f7ff fc51 	bl	80015dc <HAL_SDRAM_SendCommand>

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <Sdram_init+0xe8>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	601a      	str	r2, [r3, #0]
	Command.ModeRegisterDefinition =
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <Sdram_init+0xe8>)
 8001d42:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001d46:	60da      	str	r2, [r3, #12]
			SDRAM_MODEREG_BURST_LENGTH_1 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_3
					| SDRAM_MODEREG_OPERATING_MODE_STANDARD | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	HAL_SDRAM_SendCommand(&sdramHandle, &Command, 100);
 8001d48:	2264      	movs	r2, #100	; 0x64
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <Sdram_init+0xe8>)
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <Sdram_init+0xe0>)
 8001d4e:	f7ff fc45 	bl	80015dc <HAL_SDRAM_SendCommand>

	HAL_SDRAM_ProgramRefreshRate(&sdramHandle, 1539);
 8001d52:	f240 6103 	movw	r1, #1539	; 0x603
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <Sdram_init+0xe0>)
 8001d58:	f7ff fc6b 	bl	8001632 <HAL_SDRAM_ProgramRefreshRate>
}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000088 	.word	0x20000088
 8001d68:	a0000140 	.word	0xa0000140
 8001d6c:	200000bc 	.word	0x200000bc

08001d70 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001d74:	f7fe fc86 	bl	8000684 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001d78:	f7fe fdad 	bl	80008d6 <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	return 1;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_kill>:

int _kill(int pid, int sig)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d9a:	f000 fabb 	bl	8002314 <__errno>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2216      	movs	r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
	return -1;
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_exit>:

void _exit (int status)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ffe7 	bl	8001d90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dc2:	e7fe      	b.n	8001dc2 <_exit+0x12>

08001dc4 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e00a      	b.n	8001dec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dd6:	f3af 8000 	nop.w
 8001dda:	4601      	mov	r1, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf0      	blt.n	8001dd6 <_read+0x12>
	}

return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_write>:

int _write(int file, char *ptr, int len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e009      	b.n	8001e24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf1      	blt.n	8001e10 <_write+0x12>
	}
	return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_sbrk+0x50>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x16>
		heap_end = &end;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <_sbrk+0x50>)
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <_sbrk+0x54>)
 8001e4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <_sbrk+0x50>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <_sbrk+0x50>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	466a      	mov	r2, sp
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d907      	bls.n	8001e72 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001e62:	f000 fa57 	bl	8002314 <__errno>
 8001e66:	4603      	mov	r3, r0
 8001e68:	220c      	movs	r2, #12
 8001e6a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e70:	e006      	b.n	8001e80 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <_sbrk+0x50>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <_sbrk+0x50>)
 8001e7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200000d0 	.word	0x200000d0
 8001e8c:	20000220 	.word	0x20000220

08001e90 <_close>:

int _close(int file)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	return -1;
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb8:	605a      	str	r2, [r3, #4]
	return 0;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_isatty>:

int _isatty(int file)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
	return 0;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <SystemInit+0x5c>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <SystemInit+0x5c>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <SystemInit+0x60>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <SystemInit+0x60>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <SystemInit+0x60>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <SystemInit+0x60>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	490d      	ldr	r1, [pc, #52]	; (8001f58 <SystemInit+0x60>)
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <SystemInit+0x64>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <SystemInit+0x60>)
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <SystemInit+0x68>)
 8001f2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <SystemInit+0x60>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <SystemInit+0x60>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <SystemInit+0x60>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <SystemInit+0x5c>)
 8001f44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f48:	609a      	str	r2, [r3, #8]
#endif
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	fef6ffff 	.word	0xfef6ffff
 8001f60:	24003010 	.word	0x24003010

08001f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f6a:	e003      	b.n	8001f74 <LoopCopyDataInit>

08001f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f72:	3104      	adds	r1, #4

08001f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f74:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f7c:	d3f6      	bcc.n	8001f6c <CopyDataInit>
  ldr  r2, =_sbss
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f80:	e002      	b.n	8001f88 <LoopFillZerobss>

08001f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f84:	f842 3b04 	str.w	r3, [r2], #4

08001f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f8c:	d3f9      	bcc.n	8001f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f8e:	f7ff ffb3 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f000 f9c5 	bl	8002320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f96:	f7ff fc93 	bl	80018c0 <main>
  bx  lr    
 8001f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f9c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001fa0:	080030d8 	.word	0x080030d8
  ldr  r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fa8:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001fac:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001fb0:	20000220 	.word	0x20000220

08001fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_IRQHandler>
	...

08001fb8 <srand>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <srand+0x44>)
 8001fbc:	681d      	ldr	r5, [r3, #0]
 8001fbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	b9b3      	cbnz	r3, 8001ff2 <srand+0x3a>
 8001fc4:	2018      	movs	r0, #24
 8001fc6:	f000 fa3b 	bl	8002440 <malloc>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6328      	str	r0, [r5, #48]	; 0x30
 8001fce:	b920      	cbnz	r0, 8001fda <srand+0x22>
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <srand+0x48>)
 8001fd2:	480c      	ldr	r0, [pc, #48]	; (8002004 <srand+0x4c>)
 8001fd4:	2146      	movs	r1, #70	; 0x46
 8001fd6:	f000 f9c9 	bl	800236c <__assert_func>
 8001fda:	490b      	ldr	r1, [pc, #44]	; (8002008 <srand+0x50>)
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <srand+0x54>)
 8001fde:	e9c0 1300 	strd	r1, r3, [r0]
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <srand+0x58>)
 8001fe4:	6083      	str	r3, [r0, #8]
 8001fe6:	230b      	movs	r3, #11
 8001fe8:	8183      	strh	r3, [r0, #12]
 8001fea:	2100      	movs	r1, #0
 8001fec:	2001      	movs	r0, #1
 8001fee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001ff2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611c      	str	r4, [r3, #16]
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	20000064 	.word	0x20000064
 8002000:	08002fe8 	.word	0x08002fe8
 8002004:	08002fff 	.word	0x08002fff
 8002008:	abcd330e 	.word	0xabcd330e
 800200c:	e66d1234 	.word	0xe66d1234
 8002010:	0005deec 	.word	0x0005deec

08002014 <rand>:
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <rand+0x5c>)
 8002016:	b510      	push	{r4, lr}
 8002018:	681c      	ldr	r4, [r3, #0]
 800201a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800201c:	b9b3      	cbnz	r3, 800204c <rand+0x38>
 800201e:	2018      	movs	r0, #24
 8002020:	f000 fa0e 	bl	8002440 <malloc>
 8002024:	4602      	mov	r2, r0
 8002026:	6320      	str	r0, [r4, #48]	; 0x30
 8002028:	b920      	cbnz	r0, 8002034 <rand+0x20>
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <rand+0x60>)
 800202c:	4812      	ldr	r0, [pc, #72]	; (8002078 <rand+0x64>)
 800202e:	2152      	movs	r1, #82	; 0x52
 8002030:	f000 f99c 	bl	800236c <__assert_func>
 8002034:	4911      	ldr	r1, [pc, #68]	; (800207c <rand+0x68>)
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <rand+0x6c>)
 8002038:	e9c0 1300 	strd	r1, r3, [r0]
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <rand+0x70>)
 800203e:	6083      	str	r3, [r0, #8]
 8002040:	230b      	movs	r3, #11
 8002042:	8183      	strh	r3, [r0, #12]
 8002044:	2100      	movs	r1, #0
 8002046:	2001      	movs	r0, #1
 8002048:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800204c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800204e:	480e      	ldr	r0, [pc, #56]	; (8002088 <rand+0x74>)
 8002050:	690b      	ldr	r3, [r1, #16]
 8002052:	694c      	ldr	r4, [r1, #20]
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <rand+0x78>)
 8002056:	4358      	muls	r0, r3
 8002058:	fb02 0004 	mla	r0, r2, r4, r0
 800205c:	fba3 3202 	umull	r3, r2, r3, r2
 8002060:	3301      	adds	r3, #1
 8002062:	eb40 0002 	adc.w	r0, r0, r2
 8002066:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800206a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800206e:	bd10      	pop	{r4, pc}
 8002070:	20000064 	.word	0x20000064
 8002074:	08002fe8 	.word	0x08002fe8
 8002078:	08002fff 	.word	0x08002fff
 800207c:	abcd330e 	.word	0xabcd330e
 8002080:	e66d1234 	.word	0xe66d1234
 8002084:	0005deec 	.word	0x0005deec
 8002088:	5851f42d 	.word	0x5851f42d
 800208c:	4c957f2d 	.word	0x4c957f2d

08002090 <std>:
 8002090:	2300      	movs	r3, #0
 8002092:	b510      	push	{r4, lr}
 8002094:	4604      	mov	r4, r0
 8002096:	e9c0 3300 	strd	r3, r3, [r0]
 800209a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800209e:	6083      	str	r3, [r0, #8]
 80020a0:	8181      	strh	r1, [r0, #12]
 80020a2:	6643      	str	r3, [r0, #100]	; 0x64
 80020a4:	81c2      	strh	r2, [r0, #14]
 80020a6:	6183      	str	r3, [r0, #24]
 80020a8:	4619      	mov	r1, r3
 80020aa:	2208      	movs	r2, #8
 80020ac:	305c      	adds	r0, #92	; 0x5c
 80020ae:	f000 f8e2 	bl	8002276 <memset>
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <std+0x38>)
 80020b4:	6263      	str	r3, [r4, #36]	; 0x24
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <std+0x3c>)
 80020b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <std+0x40>)
 80020bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <std+0x44>)
 80020c0:	6224      	str	r4, [r4, #32]
 80020c2:	6323      	str	r3, [r4, #48]	; 0x30
 80020c4:	bd10      	pop	{r4, pc}
 80020c6:	bf00      	nop
 80020c8:	080021f1 	.word	0x080021f1
 80020cc:	08002213 	.word	0x08002213
 80020d0:	0800224b 	.word	0x0800224b
 80020d4:	0800226f 	.word	0x0800226f

080020d8 <stdio_exit_handler>:
 80020d8:	4a02      	ldr	r2, [pc, #8]	; (80020e4 <stdio_exit_handler+0xc>)
 80020da:	4903      	ldr	r1, [pc, #12]	; (80020e8 <stdio_exit_handler+0x10>)
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <stdio_exit_handler+0x14>)
 80020de:	f000 b869 	b.w	80021b4 <_fwalk_sglue>
 80020e2:	bf00      	nop
 80020e4:	2000000c 	.word	0x2000000c
 80020e8:	080026b5 	.word	0x080026b5
 80020ec:	20000018 	.word	0x20000018

080020f0 <cleanup_stdio>:
 80020f0:	6841      	ldr	r1, [r0, #4]
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <cleanup_stdio+0x34>)
 80020f4:	4299      	cmp	r1, r3
 80020f6:	b510      	push	{r4, lr}
 80020f8:	4604      	mov	r4, r0
 80020fa:	d001      	beq.n	8002100 <cleanup_stdio+0x10>
 80020fc:	f000 fada 	bl	80026b4 <_fflush_r>
 8002100:	68a1      	ldr	r1, [r4, #8]
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <cleanup_stdio+0x38>)
 8002104:	4299      	cmp	r1, r3
 8002106:	d002      	beq.n	800210e <cleanup_stdio+0x1e>
 8002108:	4620      	mov	r0, r4
 800210a:	f000 fad3 	bl	80026b4 <_fflush_r>
 800210e:	68e1      	ldr	r1, [r4, #12]
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <cleanup_stdio+0x3c>)
 8002112:	4299      	cmp	r1, r3
 8002114:	d004      	beq.n	8002120 <cleanup_stdio+0x30>
 8002116:	4620      	mov	r0, r4
 8002118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800211c:	f000 baca 	b.w	80026b4 <_fflush_r>
 8002120:	bd10      	pop	{r4, pc}
 8002122:	bf00      	nop
 8002124:	200000d4 	.word	0x200000d4
 8002128:	2000013c 	.word	0x2000013c
 800212c:	200001a4 	.word	0x200001a4

08002130 <global_stdio_init.part.0>:
 8002130:	b510      	push	{r4, lr}
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <global_stdio_init.part.0+0x30>)
 8002134:	4c0b      	ldr	r4, [pc, #44]	; (8002164 <global_stdio_init.part.0+0x34>)
 8002136:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <global_stdio_init.part.0+0x38>)
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	4620      	mov	r0, r4
 800213c:	2200      	movs	r2, #0
 800213e:	2104      	movs	r1, #4
 8002140:	f7ff ffa6 	bl	8002090 <std>
 8002144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002148:	2201      	movs	r2, #1
 800214a:	2109      	movs	r1, #9
 800214c:	f7ff ffa0 	bl	8002090 <std>
 8002150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002154:	2202      	movs	r2, #2
 8002156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800215a:	2112      	movs	r1, #18
 800215c:	f7ff bf98 	b.w	8002090 <std>
 8002160:	2000020c 	.word	0x2000020c
 8002164:	200000d4 	.word	0x200000d4
 8002168:	080020d9 	.word	0x080020d9

0800216c <__sfp_lock_acquire>:
 800216c:	4801      	ldr	r0, [pc, #4]	; (8002174 <__sfp_lock_acquire+0x8>)
 800216e:	f000 b8fb 	b.w	8002368 <__retarget_lock_acquire_recursive>
 8002172:	bf00      	nop
 8002174:	20000215 	.word	0x20000215

08002178 <__sfp_lock_release>:
 8002178:	4801      	ldr	r0, [pc, #4]	; (8002180 <__sfp_lock_release+0x8>)
 800217a:	f000 b8f6 	b.w	800236a <__retarget_lock_release_recursive>
 800217e:	bf00      	nop
 8002180:	20000215 	.word	0x20000215

08002184 <__sinit>:
 8002184:	b510      	push	{r4, lr}
 8002186:	4604      	mov	r4, r0
 8002188:	f7ff fff0 	bl	800216c <__sfp_lock_acquire>
 800218c:	6a23      	ldr	r3, [r4, #32]
 800218e:	b11b      	cbz	r3, 8002198 <__sinit+0x14>
 8002190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002194:	f7ff bff0 	b.w	8002178 <__sfp_lock_release>
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__sinit+0x28>)
 800219a:	6223      	str	r3, [r4, #32]
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__sinit+0x2c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f5      	bne.n	8002190 <__sinit+0xc>
 80021a4:	f7ff ffc4 	bl	8002130 <global_stdio_init.part.0>
 80021a8:	e7f2      	b.n	8002190 <__sinit+0xc>
 80021aa:	bf00      	nop
 80021ac:	080020f1 	.word	0x080020f1
 80021b0:	2000020c 	.word	0x2000020c

080021b4 <_fwalk_sglue>:
 80021b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021b8:	4607      	mov	r7, r0
 80021ba:	4688      	mov	r8, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	2600      	movs	r6, #0
 80021c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021c4:	f1b9 0901 	subs.w	r9, r9, #1
 80021c8:	d505      	bpl.n	80021d6 <_fwalk_sglue+0x22>
 80021ca:	6824      	ldr	r4, [r4, #0]
 80021cc:	2c00      	cmp	r4, #0
 80021ce:	d1f7      	bne.n	80021c0 <_fwalk_sglue+0xc>
 80021d0:	4630      	mov	r0, r6
 80021d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d6:	89ab      	ldrh	r3, [r5, #12]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d907      	bls.n	80021ec <_fwalk_sglue+0x38>
 80021dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021e0:	3301      	adds	r3, #1
 80021e2:	d003      	beq.n	80021ec <_fwalk_sglue+0x38>
 80021e4:	4629      	mov	r1, r5
 80021e6:	4638      	mov	r0, r7
 80021e8:	47c0      	blx	r8
 80021ea:	4306      	orrs	r6, r0
 80021ec:	3568      	adds	r5, #104	; 0x68
 80021ee:	e7e9      	b.n	80021c4 <_fwalk_sglue+0x10>

080021f0 <__sread>:
 80021f0:	b510      	push	{r4, lr}
 80021f2:	460c      	mov	r4, r1
 80021f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f8:	f000 f868 	bl	80022cc <_read_r>
 80021fc:	2800      	cmp	r0, #0
 80021fe:	bfab      	itete	ge
 8002200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002202:	89a3      	ldrhlt	r3, [r4, #12]
 8002204:	181b      	addge	r3, r3, r0
 8002206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800220a:	bfac      	ite	ge
 800220c:	6563      	strge	r3, [r4, #84]	; 0x54
 800220e:	81a3      	strhlt	r3, [r4, #12]
 8002210:	bd10      	pop	{r4, pc}

08002212 <__swrite>:
 8002212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002216:	461f      	mov	r7, r3
 8002218:	898b      	ldrh	r3, [r1, #12]
 800221a:	05db      	lsls	r3, r3, #23
 800221c:	4605      	mov	r5, r0
 800221e:	460c      	mov	r4, r1
 8002220:	4616      	mov	r6, r2
 8002222:	d505      	bpl.n	8002230 <__swrite+0x1e>
 8002224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002228:	2302      	movs	r3, #2
 800222a:	2200      	movs	r2, #0
 800222c:	f000 f83c 	bl	80022a8 <_lseek_r>
 8002230:	89a3      	ldrh	r3, [r4, #12]
 8002232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800223a:	81a3      	strh	r3, [r4, #12]
 800223c:	4632      	mov	r2, r6
 800223e:	463b      	mov	r3, r7
 8002240:	4628      	mov	r0, r5
 8002242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002246:	f000 b853 	b.w	80022f0 <_write_r>

0800224a <__sseek>:
 800224a:	b510      	push	{r4, lr}
 800224c:	460c      	mov	r4, r1
 800224e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002252:	f000 f829 	bl	80022a8 <_lseek_r>
 8002256:	1c43      	adds	r3, r0, #1
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	bf15      	itete	ne
 800225c:	6560      	strne	r0, [r4, #84]	; 0x54
 800225e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002266:	81a3      	strheq	r3, [r4, #12]
 8002268:	bf18      	it	ne
 800226a:	81a3      	strhne	r3, [r4, #12]
 800226c:	bd10      	pop	{r4, pc}

0800226e <__sclose>:
 800226e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002272:	f000 b809 	b.w	8002288 <_close_r>

08002276 <memset>:
 8002276:	4402      	add	r2, r0
 8002278:	4603      	mov	r3, r0
 800227a:	4293      	cmp	r3, r2
 800227c:	d100      	bne.n	8002280 <memset+0xa>
 800227e:	4770      	bx	lr
 8002280:	f803 1b01 	strb.w	r1, [r3], #1
 8002284:	e7f9      	b.n	800227a <memset+0x4>
	...

08002288 <_close_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	4d06      	ldr	r5, [pc, #24]	; (80022a4 <_close_r+0x1c>)
 800228c:	2300      	movs	r3, #0
 800228e:	4604      	mov	r4, r0
 8002290:	4608      	mov	r0, r1
 8002292:	602b      	str	r3, [r5, #0]
 8002294:	f7ff fdfc 	bl	8001e90 <_close>
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	d102      	bne.n	80022a2 <_close_r+0x1a>
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	b103      	cbz	r3, 80022a2 <_close_r+0x1a>
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
 80022a4:	20000210 	.word	0x20000210

080022a8 <_lseek_r>:
 80022a8:	b538      	push	{r3, r4, r5, lr}
 80022aa:	4d07      	ldr	r5, [pc, #28]	; (80022c8 <_lseek_r+0x20>)
 80022ac:	4604      	mov	r4, r0
 80022ae:	4608      	mov	r0, r1
 80022b0:	4611      	mov	r1, r2
 80022b2:	2200      	movs	r2, #0
 80022b4:	602a      	str	r2, [r5, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f7ff fe11 	bl	8001ede <_lseek>
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	d102      	bne.n	80022c6 <_lseek_r+0x1e>
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	b103      	cbz	r3, 80022c6 <_lseek_r+0x1e>
 80022c4:	6023      	str	r3, [r4, #0]
 80022c6:	bd38      	pop	{r3, r4, r5, pc}
 80022c8:	20000210 	.word	0x20000210

080022cc <_read_r>:
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	4d07      	ldr	r5, [pc, #28]	; (80022ec <_read_r+0x20>)
 80022d0:	4604      	mov	r4, r0
 80022d2:	4608      	mov	r0, r1
 80022d4:	4611      	mov	r1, r2
 80022d6:	2200      	movs	r2, #0
 80022d8:	602a      	str	r2, [r5, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	f7ff fd72 	bl	8001dc4 <_read>
 80022e0:	1c43      	adds	r3, r0, #1
 80022e2:	d102      	bne.n	80022ea <_read_r+0x1e>
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	b103      	cbz	r3, 80022ea <_read_r+0x1e>
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
 80022ec:	20000210 	.word	0x20000210

080022f0 <_write_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4d07      	ldr	r5, [pc, #28]	; (8002310 <_write_r+0x20>)
 80022f4:	4604      	mov	r4, r0
 80022f6:	4608      	mov	r0, r1
 80022f8:	4611      	mov	r1, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	602a      	str	r2, [r5, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	f7ff fd7d 	bl	8001dfe <_write>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d102      	bne.n	800230e <_write_r+0x1e>
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	b103      	cbz	r3, 800230e <_write_r+0x1e>
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	20000210 	.word	0x20000210

08002314 <__errno>:
 8002314:	4b01      	ldr	r3, [pc, #4]	; (800231c <__errno+0x8>)
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000064 	.word	0x20000064

08002320 <__libc_init_array>:
 8002320:	b570      	push	{r4, r5, r6, lr}
 8002322:	4d0d      	ldr	r5, [pc, #52]	; (8002358 <__libc_init_array+0x38>)
 8002324:	4c0d      	ldr	r4, [pc, #52]	; (800235c <__libc_init_array+0x3c>)
 8002326:	1b64      	subs	r4, r4, r5
 8002328:	10a4      	asrs	r4, r4, #2
 800232a:	2600      	movs	r6, #0
 800232c:	42a6      	cmp	r6, r4
 800232e:	d109      	bne.n	8002344 <__libc_init_array+0x24>
 8002330:	4d0b      	ldr	r5, [pc, #44]	; (8002360 <__libc_init_array+0x40>)
 8002332:	4c0c      	ldr	r4, [pc, #48]	; (8002364 <__libc_init_array+0x44>)
 8002334:	f000 fe40 	bl	8002fb8 <_init>
 8002338:	1b64      	subs	r4, r4, r5
 800233a:	10a4      	asrs	r4, r4, #2
 800233c:	2600      	movs	r6, #0
 800233e:	42a6      	cmp	r6, r4
 8002340:	d105      	bne.n	800234e <__libc_init_array+0x2e>
 8002342:	bd70      	pop	{r4, r5, r6, pc}
 8002344:	f855 3b04 	ldr.w	r3, [r5], #4
 8002348:	4798      	blx	r3
 800234a:	3601      	adds	r6, #1
 800234c:	e7ee      	b.n	800232c <__libc_init_array+0xc>
 800234e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002352:	4798      	blx	r3
 8002354:	3601      	adds	r6, #1
 8002356:	e7f2      	b.n	800233e <__libc_init_array+0x1e>
 8002358:	080030d0 	.word	0x080030d0
 800235c:	080030d0 	.word	0x080030d0
 8002360:	080030d0 	.word	0x080030d0
 8002364:	080030d4 	.word	0x080030d4

08002368 <__retarget_lock_acquire_recursive>:
 8002368:	4770      	bx	lr

0800236a <__retarget_lock_release_recursive>:
 800236a:	4770      	bx	lr

0800236c <__assert_func>:
 800236c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800236e:	4614      	mov	r4, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <__assert_func+0x2c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4605      	mov	r5, r0
 8002378:	68d8      	ldr	r0, [r3, #12]
 800237a:	b14c      	cbz	r4, 8002390 <__assert_func+0x24>
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <__assert_func+0x30>)
 800237e:	9100      	str	r1, [sp, #0]
 8002380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002384:	4906      	ldr	r1, [pc, #24]	; (80023a0 <__assert_func+0x34>)
 8002386:	462b      	mov	r3, r5
 8002388:	f000 f9bc 	bl	8002704 <fiprintf>
 800238c:	f000 f9dc 	bl	8002748 <abort>
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <__assert_func+0x38>)
 8002392:	461c      	mov	r4, r3
 8002394:	e7f3      	b.n	800237e <__assert_func+0x12>
 8002396:	bf00      	nop
 8002398:	20000064 	.word	0x20000064
 800239c:	08003057 	.word	0x08003057
 80023a0:	08003064 	.word	0x08003064
 80023a4:	08003092 	.word	0x08003092

080023a8 <_free_r>:
 80023a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023aa:	2900      	cmp	r1, #0
 80023ac:	d044      	beq.n	8002438 <_free_r+0x90>
 80023ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023b2:	9001      	str	r0, [sp, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f1a1 0404 	sub.w	r4, r1, #4
 80023ba:	bfb8      	it	lt
 80023bc:	18e4      	addlt	r4, r4, r3
 80023be:	f000 f8e7 	bl	8002590 <__malloc_lock>
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <_free_r+0x94>)
 80023c4:	9801      	ldr	r0, [sp, #4]
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	b933      	cbnz	r3, 80023d8 <_free_r+0x30>
 80023ca:	6063      	str	r3, [r4, #4]
 80023cc:	6014      	str	r4, [r2, #0]
 80023ce:	b003      	add	sp, #12
 80023d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023d4:	f000 b8e2 	b.w	800259c <__malloc_unlock>
 80023d8:	42a3      	cmp	r3, r4
 80023da:	d908      	bls.n	80023ee <_free_r+0x46>
 80023dc:	6825      	ldr	r5, [r4, #0]
 80023de:	1961      	adds	r1, r4, r5
 80023e0:	428b      	cmp	r3, r1
 80023e2:	bf01      	itttt	eq
 80023e4:	6819      	ldreq	r1, [r3, #0]
 80023e6:	685b      	ldreq	r3, [r3, #4]
 80023e8:	1949      	addeq	r1, r1, r5
 80023ea:	6021      	streq	r1, [r4, #0]
 80023ec:	e7ed      	b.n	80023ca <_free_r+0x22>
 80023ee:	461a      	mov	r2, r3
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	b10b      	cbz	r3, 80023f8 <_free_r+0x50>
 80023f4:	42a3      	cmp	r3, r4
 80023f6:	d9fa      	bls.n	80023ee <_free_r+0x46>
 80023f8:	6811      	ldr	r1, [r2, #0]
 80023fa:	1855      	adds	r5, r2, r1
 80023fc:	42a5      	cmp	r5, r4
 80023fe:	d10b      	bne.n	8002418 <_free_r+0x70>
 8002400:	6824      	ldr	r4, [r4, #0]
 8002402:	4421      	add	r1, r4
 8002404:	1854      	adds	r4, r2, r1
 8002406:	42a3      	cmp	r3, r4
 8002408:	6011      	str	r1, [r2, #0]
 800240a:	d1e0      	bne.n	80023ce <_free_r+0x26>
 800240c:	681c      	ldr	r4, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	6053      	str	r3, [r2, #4]
 8002412:	440c      	add	r4, r1
 8002414:	6014      	str	r4, [r2, #0]
 8002416:	e7da      	b.n	80023ce <_free_r+0x26>
 8002418:	d902      	bls.n	8002420 <_free_r+0x78>
 800241a:	230c      	movs	r3, #12
 800241c:	6003      	str	r3, [r0, #0]
 800241e:	e7d6      	b.n	80023ce <_free_r+0x26>
 8002420:	6825      	ldr	r5, [r4, #0]
 8002422:	1961      	adds	r1, r4, r5
 8002424:	428b      	cmp	r3, r1
 8002426:	bf04      	itt	eq
 8002428:	6819      	ldreq	r1, [r3, #0]
 800242a:	685b      	ldreq	r3, [r3, #4]
 800242c:	6063      	str	r3, [r4, #4]
 800242e:	bf04      	itt	eq
 8002430:	1949      	addeq	r1, r1, r5
 8002432:	6021      	streq	r1, [r4, #0]
 8002434:	6054      	str	r4, [r2, #4]
 8002436:	e7ca      	b.n	80023ce <_free_r+0x26>
 8002438:	b003      	add	sp, #12
 800243a:	bd30      	pop	{r4, r5, pc}
 800243c:	20000218 	.word	0x20000218

08002440 <malloc>:
 8002440:	4b02      	ldr	r3, [pc, #8]	; (800244c <malloc+0xc>)
 8002442:	4601      	mov	r1, r0
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f000 b823 	b.w	8002490 <_malloc_r>
 800244a:	bf00      	nop
 800244c:	20000064 	.word	0x20000064

08002450 <sbrk_aligned>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	4e0e      	ldr	r6, [pc, #56]	; (800248c <sbrk_aligned+0x3c>)
 8002454:	460c      	mov	r4, r1
 8002456:	6831      	ldr	r1, [r6, #0]
 8002458:	4605      	mov	r5, r0
 800245a:	b911      	cbnz	r1, 8002462 <sbrk_aligned+0x12>
 800245c:	f000 f964 	bl	8002728 <_sbrk_r>
 8002460:	6030      	str	r0, [r6, #0]
 8002462:	4621      	mov	r1, r4
 8002464:	4628      	mov	r0, r5
 8002466:	f000 f95f 	bl	8002728 <_sbrk_r>
 800246a:	1c43      	adds	r3, r0, #1
 800246c:	d00a      	beq.n	8002484 <sbrk_aligned+0x34>
 800246e:	1cc4      	adds	r4, r0, #3
 8002470:	f024 0403 	bic.w	r4, r4, #3
 8002474:	42a0      	cmp	r0, r4
 8002476:	d007      	beq.n	8002488 <sbrk_aligned+0x38>
 8002478:	1a21      	subs	r1, r4, r0
 800247a:	4628      	mov	r0, r5
 800247c:	f000 f954 	bl	8002728 <_sbrk_r>
 8002480:	3001      	adds	r0, #1
 8002482:	d101      	bne.n	8002488 <sbrk_aligned+0x38>
 8002484:	f04f 34ff 	mov.w	r4, #4294967295
 8002488:	4620      	mov	r0, r4
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	2000021c 	.word	0x2000021c

08002490 <_malloc_r>:
 8002490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002494:	1ccd      	adds	r5, r1, #3
 8002496:	f025 0503 	bic.w	r5, r5, #3
 800249a:	3508      	adds	r5, #8
 800249c:	2d0c      	cmp	r5, #12
 800249e:	bf38      	it	cc
 80024a0:	250c      	movcc	r5, #12
 80024a2:	2d00      	cmp	r5, #0
 80024a4:	4607      	mov	r7, r0
 80024a6:	db01      	blt.n	80024ac <_malloc_r+0x1c>
 80024a8:	42a9      	cmp	r1, r5
 80024aa:	d905      	bls.n	80024b8 <_malloc_r+0x28>
 80024ac:	230c      	movs	r3, #12
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	2600      	movs	r6, #0
 80024b2:	4630      	mov	r0, r6
 80024b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800258c <_malloc_r+0xfc>
 80024bc:	f000 f868 	bl	8002590 <__malloc_lock>
 80024c0:	f8d8 3000 	ldr.w	r3, [r8]
 80024c4:	461c      	mov	r4, r3
 80024c6:	bb5c      	cbnz	r4, 8002520 <_malloc_r+0x90>
 80024c8:	4629      	mov	r1, r5
 80024ca:	4638      	mov	r0, r7
 80024cc:	f7ff ffc0 	bl	8002450 <sbrk_aligned>
 80024d0:	1c43      	adds	r3, r0, #1
 80024d2:	4604      	mov	r4, r0
 80024d4:	d155      	bne.n	8002582 <_malloc_r+0xf2>
 80024d6:	f8d8 4000 	ldr.w	r4, [r8]
 80024da:	4626      	mov	r6, r4
 80024dc:	2e00      	cmp	r6, #0
 80024de:	d145      	bne.n	800256c <_malloc_r+0xdc>
 80024e0:	2c00      	cmp	r4, #0
 80024e2:	d048      	beq.n	8002576 <_malloc_r+0xe6>
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	4631      	mov	r1, r6
 80024e8:	4638      	mov	r0, r7
 80024ea:	eb04 0903 	add.w	r9, r4, r3
 80024ee:	f000 f91b 	bl	8002728 <_sbrk_r>
 80024f2:	4581      	cmp	r9, r0
 80024f4:	d13f      	bne.n	8002576 <_malloc_r+0xe6>
 80024f6:	6821      	ldr	r1, [r4, #0]
 80024f8:	1a6d      	subs	r5, r5, r1
 80024fa:	4629      	mov	r1, r5
 80024fc:	4638      	mov	r0, r7
 80024fe:	f7ff ffa7 	bl	8002450 <sbrk_aligned>
 8002502:	3001      	adds	r0, #1
 8002504:	d037      	beq.n	8002576 <_malloc_r+0xe6>
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	442b      	add	r3, r5
 800250a:	6023      	str	r3, [r4, #0]
 800250c:	f8d8 3000 	ldr.w	r3, [r8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d038      	beq.n	8002586 <_malloc_r+0xf6>
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	42a2      	cmp	r2, r4
 8002518:	d12b      	bne.n	8002572 <_malloc_r+0xe2>
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	e00f      	b.n	8002540 <_malloc_r+0xb0>
 8002520:	6822      	ldr	r2, [r4, #0]
 8002522:	1b52      	subs	r2, r2, r5
 8002524:	d41f      	bmi.n	8002566 <_malloc_r+0xd6>
 8002526:	2a0b      	cmp	r2, #11
 8002528:	d917      	bls.n	800255a <_malloc_r+0xca>
 800252a:	1961      	adds	r1, r4, r5
 800252c:	42a3      	cmp	r3, r4
 800252e:	6025      	str	r5, [r4, #0]
 8002530:	bf18      	it	ne
 8002532:	6059      	strne	r1, [r3, #4]
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	bf08      	it	eq
 8002538:	f8c8 1000 	streq.w	r1, [r8]
 800253c:	5162      	str	r2, [r4, r5]
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	4638      	mov	r0, r7
 8002542:	f104 060b 	add.w	r6, r4, #11
 8002546:	f000 f829 	bl	800259c <__malloc_unlock>
 800254a:	f026 0607 	bic.w	r6, r6, #7
 800254e:	1d23      	adds	r3, r4, #4
 8002550:	1af2      	subs	r2, r6, r3
 8002552:	d0ae      	beq.n	80024b2 <_malloc_r+0x22>
 8002554:	1b9b      	subs	r3, r3, r6
 8002556:	50a3      	str	r3, [r4, r2]
 8002558:	e7ab      	b.n	80024b2 <_malloc_r+0x22>
 800255a:	42a3      	cmp	r3, r4
 800255c:	6862      	ldr	r2, [r4, #4]
 800255e:	d1dd      	bne.n	800251c <_malloc_r+0x8c>
 8002560:	f8c8 2000 	str.w	r2, [r8]
 8002564:	e7ec      	b.n	8002540 <_malloc_r+0xb0>
 8002566:	4623      	mov	r3, r4
 8002568:	6864      	ldr	r4, [r4, #4]
 800256a:	e7ac      	b.n	80024c6 <_malloc_r+0x36>
 800256c:	4634      	mov	r4, r6
 800256e:	6876      	ldr	r6, [r6, #4]
 8002570:	e7b4      	b.n	80024dc <_malloc_r+0x4c>
 8002572:	4613      	mov	r3, r2
 8002574:	e7cc      	b.n	8002510 <_malloc_r+0x80>
 8002576:	230c      	movs	r3, #12
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	4638      	mov	r0, r7
 800257c:	f000 f80e 	bl	800259c <__malloc_unlock>
 8002580:	e797      	b.n	80024b2 <_malloc_r+0x22>
 8002582:	6025      	str	r5, [r4, #0]
 8002584:	e7dc      	b.n	8002540 <_malloc_r+0xb0>
 8002586:	605b      	str	r3, [r3, #4]
 8002588:	deff      	udf	#255	; 0xff
 800258a:	bf00      	nop
 800258c:	20000218 	.word	0x20000218

08002590 <__malloc_lock>:
 8002590:	4801      	ldr	r0, [pc, #4]	; (8002598 <__malloc_lock+0x8>)
 8002592:	f7ff bee9 	b.w	8002368 <__retarget_lock_acquire_recursive>
 8002596:	bf00      	nop
 8002598:	20000214 	.word	0x20000214

0800259c <__malloc_unlock>:
 800259c:	4801      	ldr	r0, [pc, #4]	; (80025a4 <__malloc_unlock+0x8>)
 800259e:	f7ff bee4 	b.w	800236a <__retarget_lock_release_recursive>
 80025a2:	bf00      	nop
 80025a4:	20000214 	.word	0x20000214

080025a8 <__sflush_r>:
 80025a8:	898a      	ldrh	r2, [r1, #12]
 80025aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ae:	4605      	mov	r5, r0
 80025b0:	0710      	lsls	r0, r2, #28
 80025b2:	460c      	mov	r4, r1
 80025b4:	d458      	bmi.n	8002668 <__sflush_r+0xc0>
 80025b6:	684b      	ldr	r3, [r1, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	dc05      	bgt.n	80025c8 <__sflush_r+0x20>
 80025bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	dc02      	bgt.n	80025c8 <__sflush_r+0x20>
 80025c2:	2000      	movs	r0, #0
 80025c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025ca:	2e00      	cmp	r6, #0
 80025cc:	d0f9      	beq.n	80025c2 <__sflush_r+0x1a>
 80025ce:	2300      	movs	r3, #0
 80025d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025d4:	682f      	ldr	r7, [r5, #0]
 80025d6:	6a21      	ldr	r1, [r4, #32]
 80025d8:	602b      	str	r3, [r5, #0]
 80025da:	d032      	beq.n	8002642 <__sflush_r+0x9a>
 80025dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	075a      	lsls	r2, r3, #29
 80025e2:	d505      	bpl.n	80025f0 <__sflush_r+0x48>
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	1ac0      	subs	r0, r0, r3
 80025e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025ea:	b10b      	cbz	r3, 80025f0 <__sflush_r+0x48>
 80025ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ee:	1ac0      	subs	r0, r0, r3
 80025f0:	2300      	movs	r3, #0
 80025f2:	4602      	mov	r2, r0
 80025f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025f6:	6a21      	ldr	r1, [r4, #32]
 80025f8:	4628      	mov	r0, r5
 80025fa:	47b0      	blx	r6
 80025fc:	1c43      	adds	r3, r0, #1
 80025fe:	89a3      	ldrh	r3, [r4, #12]
 8002600:	d106      	bne.n	8002610 <__sflush_r+0x68>
 8002602:	6829      	ldr	r1, [r5, #0]
 8002604:	291d      	cmp	r1, #29
 8002606:	d82b      	bhi.n	8002660 <__sflush_r+0xb8>
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <__sflush_r+0x108>)
 800260a:	410a      	asrs	r2, r1
 800260c:	07d6      	lsls	r6, r2, #31
 800260e:	d427      	bmi.n	8002660 <__sflush_r+0xb8>
 8002610:	2200      	movs	r2, #0
 8002612:	6062      	str	r2, [r4, #4]
 8002614:	04d9      	lsls	r1, r3, #19
 8002616:	6922      	ldr	r2, [r4, #16]
 8002618:	6022      	str	r2, [r4, #0]
 800261a:	d504      	bpl.n	8002626 <__sflush_r+0x7e>
 800261c:	1c42      	adds	r2, r0, #1
 800261e:	d101      	bne.n	8002624 <__sflush_r+0x7c>
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	b903      	cbnz	r3, 8002626 <__sflush_r+0x7e>
 8002624:	6560      	str	r0, [r4, #84]	; 0x54
 8002626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002628:	602f      	str	r7, [r5, #0]
 800262a:	2900      	cmp	r1, #0
 800262c:	d0c9      	beq.n	80025c2 <__sflush_r+0x1a>
 800262e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002632:	4299      	cmp	r1, r3
 8002634:	d002      	beq.n	800263c <__sflush_r+0x94>
 8002636:	4628      	mov	r0, r5
 8002638:	f7ff feb6 	bl	80023a8 <_free_r>
 800263c:	2000      	movs	r0, #0
 800263e:	6360      	str	r0, [r4, #52]	; 0x34
 8002640:	e7c0      	b.n	80025c4 <__sflush_r+0x1c>
 8002642:	2301      	movs	r3, #1
 8002644:	4628      	mov	r0, r5
 8002646:	47b0      	blx	r6
 8002648:	1c41      	adds	r1, r0, #1
 800264a:	d1c8      	bne.n	80025de <__sflush_r+0x36>
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0c5      	beq.n	80025de <__sflush_r+0x36>
 8002652:	2b1d      	cmp	r3, #29
 8002654:	d001      	beq.n	800265a <__sflush_r+0xb2>
 8002656:	2b16      	cmp	r3, #22
 8002658:	d101      	bne.n	800265e <__sflush_r+0xb6>
 800265a:	602f      	str	r7, [r5, #0]
 800265c:	e7b1      	b.n	80025c2 <__sflush_r+0x1a>
 800265e:	89a3      	ldrh	r3, [r4, #12]
 8002660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002664:	81a3      	strh	r3, [r4, #12]
 8002666:	e7ad      	b.n	80025c4 <__sflush_r+0x1c>
 8002668:	690f      	ldr	r7, [r1, #16]
 800266a:	2f00      	cmp	r7, #0
 800266c:	d0a9      	beq.n	80025c2 <__sflush_r+0x1a>
 800266e:	0793      	lsls	r3, r2, #30
 8002670:	680e      	ldr	r6, [r1, #0]
 8002672:	bf08      	it	eq
 8002674:	694b      	ldreq	r3, [r1, #20]
 8002676:	600f      	str	r7, [r1, #0]
 8002678:	bf18      	it	ne
 800267a:	2300      	movne	r3, #0
 800267c:	eba6 0807 	sub.w	r8, r6, r7
 8002680:	608b      	str	r3, [r1, #8]
 8002682:	f1b8 0f00 	cmp.w	r8, #0
 8002686:	dd9c      	ble.n	80025c2 <__sflush_r+0x1a>
 8002688:	6a21      	ldr	r1, [r4, #32]
 800268a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800268c:	4643      	mov	r3, r8
 800268e:	463a      	mov	r2, r7
 8002690:	4628      	mov	r0, r5
 8002692:	47b0      	blx	r6
 8002694:	2800      	cmp	r0, #0
 8002696:	dc06      	bgt.n	80026a6 <__sflush_r+0xfe>
 8002698:	89a3      	ldrh	r3, [r4, #12]
 800269a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269e:	81a3      	strh	r3, [r4, #12]
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	e78e      	b.n	80025c4 <__sflush_r+0x1c>
 80026a6:	4407      	add	r7, r0
 80026a8:	eba8 0800 	sub.w	r8, r8, r0
 80026ac:	e7e9      	b.n	8002682 <__sflush_r+0xda>
 80026ae:	bf00      	nop
 80026b0:	dfbffffe 	.word	0xdfbffffe

080026b4 <_fflush_r>:
 80026b4:	b538      	push	{r3, r4, r5, lr}
 80026b6:	690b      	ldr	r3, [r1, #16]
 80026b8:	4605      	mov	r5, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	b913      	cbnz	r3, 80026c4 <_fflush_r+0x10>
 80026be:	2500      	movs	r5, #0
 80026c0:	4628      	mov	r0, r5
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
 80026c4:	b118      	cbz	r0, 80026ce <_fflush_r+0x1a>
 80026c6:	6a03      	ldr	r3, [r0, #32]
 80026c8:	b90b      	cbnz	r3, 80026ce <_fflush_r+0x1a>
 80026ca:	f7ff fd5b 	bl	8002184 <__sinit>
 80026ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f3      	beq.n	80026be <_fflush_r+0xa>
 80026d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026d8:	07d0      	lsls	r0, r2, #31
 80026da:	d404      	bmi.n	80026e6 <_fflush_r+0x32>
 80026dc:	0599      	lsls	r1, r3, #22
 80026de:	d402      	bmi.n	80026e6 <_fflush_r+0x32>
 80026e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026e2:	f7ff fe41 	bl	8002368 <__retarget_lock_acquire_recursive>
 80026e6:	4628      	mov	r0, r5
 80026e8:	4621      	mov	r1, r4
 80026ea:	f7ff ff5d 	bl	80025a8 <__sflush_r>
 80026ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026f0:	07da      	lsls	r2, r3, #31
 80026f2:	4605      	mov	r5, r0
 80026f4:	d4e4      	bmi.n	80026c0 <_fflush_r+0xc>
 80026f6:	89a3      	ldrh	r3, [r4, #12]
 80026f8:	059b      	lsls	r3, r3, #22
 80026fa:	d4e1      	bmi.n	80026c0 <_fflush_r+0xc>
 80026fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026fe:	f7ff fe34 	bl	800236a <__retarget_lock_release_recursive>
 8002702:	e7dd      	b.n	80026c0 <_fflush_r+0xc>

08002704 <fiprintf>:
 8002704:	b40e      	push	{r1, r2, r3}
 8002706:	b503      	push	{r0, r1, lr}
 8002708:	4601      	mov	r1, r0
 800270a:	ab03      	add	r3, sp, #12
 800270c:	4805      	ldr	r0, [pc, #20]	; (8002724 <fiprintf+0x20>)
 800270e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002712:	6800      	ldr	r0, [r0, #0]
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	f000 f847 	bl	80027a8 <_vfiprintf_r>
 800271a:	b002      	add	sp, #8
 800271c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002720:	b003      	add	sp, #12
 8002722:	4770      	bx	lr
 8002724:	20000064 	.word	0x20000064

08002728 <_sbrk_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4d06      	ldr	r5, [pc, #24]	; (8002744 <_sbrk_r+0x1c>)
 800272c:	2300      	movs	r3, #0
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	f7ff fb80 	bl	8001e38 <_sbrk>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d102      	bne.n	8002742 <_sbrk_r+0x1a>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b103      	cbz	r3, 8002742 <_sbrk_r+0x1a>
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	20000210 	.word	0x20000210

08002748 <abort>:
 8002748:	b508      	push	{r3, lr}
 800274a:	2006      	movs	r0, #6
 800274c:	f000 fb94 	bl	8002e78 <raise>
 8002750:	2001      	movs	r0, #1
 8002752:	f7ff fb2d 	bl	8001db0 <_exit>

08002756 <__sfputc_r>:
 8002756:	6893      	ldr	r3, [r2, #8]
 8002758:	3b01      	subs	r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	b410      	push	{r4}
 800275e:	6093      	str	r3, [r2, #8]
 8002760:	da08      	bge.n	8002774 <__sfputc_r+0x1e>
 8002762:	6994      	ldr	r4, [r2, #24]
 8002764:	42a3      	cmp	r3, r4
 8002766:	db01      	blt.n	800276c <__sfputc_r+0x16>
 8002768:	290a      	cmp	r1, #10
 800276a:	d103      	bne.n	8002774 <__sfputc_r+0x1e>
 800276c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002770:	f000 bac4 	b.w	8002cfc <__swbuf_r>
 8002774:	6813      	ldr	r3, [r2, #0]
 8002776:	1c58      	adds	r0, r3, #1
 8002778:	6010      	str	r0, [r2, #0]
 800277a:	7019      	strb	r1, [r3, #0]
 800277c:	4608      	mov	r0, r1
 800277e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002782:	4770      	bx	lr

08002784 <__sfputs_r>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	4606      	mov	r6, r0
 8002788:	460f      	mov	r7, r1
 800278a:	4614      	mov	r4, r2
 800278c:	18d5      	adds	r5, r2, r3
 800278e:	42ac      	cmp	r4, r5
 8002790:	d101      	bne.n	8002796 <__sfputs_r+0x12>
 8002792:	2000      	movs	r0, #0
 8002794:	e007      	b.n	80027a6 <__sfputs_r+0x22>
 8002796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800279a:	463a      	mov	r2, r7
 800279c:	4630      	mov	r0, r6
 800279e:	f7ff ffda 	bl	8002756 <__sfputc_r>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	d1f3      	bne.n	800278e <__sfputs_r+0xa>
 80027a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027a8 <_vfiprintf_r>:
 80027a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ac:	460d      	mov	r5, r1
 80027ae:	b09d      	sub	sp, #116	; 0x74
 80027b0:	4614      	mov	r4, r2
 80027b2:	4698      	mov	r8, r3
 80027b4:	4606      	mov	r6, r0
 80027b6:	b118      	cbz	r0, 80027c0 <_vfiprintf_r+0x18>
 80027b8:	6a03      	ldr	r3, [r0, #32]
 80027ba:	b90b      	cbnz	r3, 80027c0 <_vfiprintf_r+0x18>
 80027bc:	f7ff fce2 	bl	8002184 <__sinit>
 80027c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027c2:	07d9      	lsls	r1, r3, #31
 80027c4:	d405      	bmi.n	80027d2 <_vfiprintf_r+0x2a>
 80027c6:	89ab      	ldrh	r3, [r5, #12]
 80027c8:	059a      	lsls	r2, r3, #22
 80027ca:	d402      	bmi.n	80027d2 <_vfiprintf_r+0x2a>
 80027cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027ce:	f7ff fdcb 	bl	8002368 <__retarget_lock_acquire_recursive>
 80027d2:	89ab      	ldrh	r3, [r5, #12]
 80027d4:	071b      	lsls	r3, r3, #28
 80027d6:	d501      	bpl.n	80027dc <_vfiprintf_r+0x34>
 80027d8:	692b      	ldr	r3, [r5, #16]
 80027da:	b99b      	cbnz	r3, 8002804 <_vfiprintf_r+0x5c>
 80027dc:	4629      	mov	r1, r5
 80027de:	4630      	mov	r0, r6
 80027e0:	f000 faca 	bl	8002d78 <__swsetup_r>
 80027e4:	b170      	cbz	r0, 8002804 <_vfiprintf_r+0x5c>
 80027e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027e8:	07dc      	lsls	r4, r3, #31
 80027ea:	d504      	bpl.n	80027f6 <_vfiprintf_r+0x4e>
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	b01d      	add	sp, #116	; 0x74
 80027f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027f6:	89ab      	ldrh	r3, [r5, #12]
 80027f8:	0598      	lsls	r0, r3, #22
 80027fa:	d4f7      	bmi.n	80027ec <_vfiprintf_r+0x44>
 80027fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027fe:	f7ff fdb4 	bl	800236a <__retarget_lock_release_recursive>
 8002802:	e7f3      	b.n	80027ec <_vfiprintf_r+0x44>
 8002804:	2300      	movs	r3, #0
 8002806:	9309      	str	r3, [sp, #36]	; 0x24
 8002808:	2320      	movs	r3, #32
 800280a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800280e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002812:	2330      	movs	r3, #48	; 0x30
 8002814:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80029c8 <_vfiprintf_r+0x220>
 8002818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800281c:	f04f 0901 	mov.w	r9, #1
 8002820:	4623      	mov	r3, r4
 8002822:	469a      	mov	sl, r3
 8002824:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002828:	b10a      	cbz	r2, 800282e <_vfiprintf_r+0x86>
 800282a:	2a25      	cmp	r2, #37	; 0x25
 800282c:	d1f9      	bne.n	8002822 <_vfiprintf_r+0x7a>
 800282e:	ebba 0b04 	subs.w	fp, sl, r4
 8002832:	d00b      	beq.n	800284c <_vfiprintf_r+0xa4>
 8002834:	465b      	mov	r3, fp
 8002836:	4622      	mov	r2, r4
 8002838:	4629      	mov	r1, r5
 800283a:	4630      	mov	r0, r6
 800283c:	f7ff ffa2 	bl	8002784 <__sfputs_r>
 8002840:	3001      	adds	r0, #1
 8002842:	f000 80a9 	beq.w	8002998 <_vfiprintf_r+0x1f0>
 8002846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002848:	445a      	add	r2, fp
 800284a:	9209      	str	r2, [sp, #36]	; 0x24
 800284c:	f89a 3000 	ldrb.w	r3, [sl]
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a1 	beq.w	8002998 <_vfiprintf_r+0x1f0>
 8002856:	2300      	movs	r3, #0
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002860:	f10a 0a01 	add.w	sl, sl, #1
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	9307      	str	r3, [sp, #28]
 8002868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800286c:	931a      	str	r3, [sp, #104]	; 0x68
 800286e:	4654      	mov	r4, sl
 8002870:	2205      	movs	r2, #5
 8002872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002876:	4854      	ldr	r0, [pc, #336]	; (80029c8 <_vfiprintf_r+0x220>)
 8002878:	f7fd fce2 	bl	8000240 <memchr>
 800287c:	9a04      	ldr	r2, [sp, #16]
 800287e:	b9d8      	cbnz	r0, 80028b8 <_vfiprintf_r+0x110>
 8002880:	06d1      	lsls	r1, r2, #27
 8002882:	bf44      	itt	mi
 8002884:	2320      	movmi	r3, #32
 8002886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800288a:	0713      	lsls	r3, r2, #28
 800288c:	bf44      	itt	mi
 800288e:	232b      	movmi	r3, #43	; 0x2b
 8002890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002894:	f89a 3000 	ldrb.w	r3, [sl]
 8002898:	2b2a      	cmp	r3, #42	; 0x2a
 800289a:	d015      	beq.n	80028c8 <_vfiprintf_r+0x120>
 800289c:	9a07      	ldr	r2, [sp, #28]
 800289e:	4654      	mov	r4, sl
 80028a0:	2000      	movs	r0, #0
 80028a2:	f04f 0c0a 	mov.w	ip, #10
 80028a6:	4621      	mov	r1, r4
 80028a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ac:	3b30      	subs	r3, #48	; 0x30
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	d94d      	bls.n	800294e <_vfiprintf_r+0x1a6>
 80028b2:	b1b0      	cbz	r0, 80028e2 <_vfiprintf_r+0x13a>
 80028b4:	9207      	str	r2, [sp, #28]
 80028b6:	e014      	b.n	80028e2 <_vfiprintf_r+0x13a>
 80028b8:	eba0 0308 	sub.w	r3, r0, r8
 80028bc:	fa09 f303 	lsl.w	r3, r9, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	9304      	str	r3, [sp, #16]
 80028c4:	46a2      	mov	sl, r4
 80028c6:	e7d2      	b.n	800286e <_vfiprintf_r+0xc6>
 80028c8:	9b03      	ldr	r3, [sp, #12]
 80028ca:	1d19      	adds	r1, r3, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	9103      	str	r1, [sp, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bfbb      	ittet	lt
 80028d4:	425b      	neglt	r3, r3
 80028d6:	f042 0202 	orrlt.w	r2, r2, #2
 80028da:	9307      	strge	r3, [sp, #28]
 80028dc:	9307      	strlt	r3, [sp, #28]
 80028de:	bfb8      	it	lt
 80028e0:	9204      	strlt	r2, [sp, #16]
 80028e2:	7823      	ldrb	r3, [r4, #0]
 80028e4:	2b2e      	cmp	r3, #46	; 0x2e
 80028e6:	d10c      	bne.n	8002902 <_vfiprintf_r+0x15a>
 80028e8:	7863      	ldrb	r3, [r4, #1]
 80028ea:	2b2a      	cmp	r3, #42	; 0x2a
 80028ec:	d134      	bne.n	8002958 <_vfiprintf_r+0x1b0>
 80028ee:	9b03      	ldr	r3, [sp, #12]
 80028f0:	1d1a      	adds	r2, r3, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	9203      	str	r2, [sp, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bfb8      	it	lt
 80028fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80028fe:	3402      	adds	r4, #2
 8002900:	9305      	str	r3, [sp, #20]
 8002902:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80029d8 <_vfiprintf_r+0x230>
 8002906:	7821      	ldrb	r1, [r4, #0]
 8002908:	2203      	movs	r2, #3
 800290a:	4650      	mov	r0, sl
 800290c:	f7fd fc98 	bl	8000240 <memchr>
 8002910:	b138      	cbz	r0, 8002922 <_vfiprintf_r+0x17a>
 8002912:	9b04      	ldr	r3, [sp, #16]
 8002914:	eba0 000a 	sub.w	r0, r0, sl
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	4082      	lsls	r2, r0
 800291c:	4313      	orrs	r3, r2
 800291e:	3401      	adds	r4, #1
 8002920:	9304      	str	r3, [sp, #16]
 8002922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002926:	4829      	ldr	r0, [pc, #164]	; (80029cc <_vfiprintf_r+0x224>)
 8002928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800292c:	2206      	movs	r2, #6
 800292e:	f7fd fc87 	bl	8000240 <memchr>
 8002932:	2800      	cmp	r0, #0
 8002934:	d03f      	beq.n	80029b6 <_vfiprintf_r+0x20e>
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <_vfiprintf_r+0x228>)
 8002938:	bb1b      	cbnz	r3, 8002982 <_vfiprintf_r+0x1da>
 800293a:	9b03      	ldr	r3, [sp, #12]
 800293c:	3307      	adds	r3, #7
 800293e:	f023 0307 	bic.w	r3, r3, #7
 8002942:	3308      	adds	r3, #8
 8002944:	9303      	str	r3, [sp, #12]
 8002946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002948:	443b      	add	r3, r7
 800294a:	9309      	str	r3, [sp, #36]	; 0x24
 800294c:	e768      	b.n	8002820 <_vfiprintf_r+0x78>
 800294e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002952:	460c      	mov	r4, r1
 8002954:	2001      	movs	r0, #1
 8002956:	e7a6      	b.n	80028a6 <_vfiprintf_r+0xfe>
 8002958:	2300      	movs	r3, #0
 800295a:	3401      	adds	r4, #1
 800295c:	9305      	str	r3, [sp, #20]
 800295e:	4619      	mov	r1, r3
 8002960:	f04f 0c0a 	mov.w	ip, #10
 8002964:	4620      	mov	r0, r4
 8002966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800296a:	3a30      	subs	r2, #48	; 0x30
 800296c:	2a09      	cmp	r2, #9
 800296e:	d903      	bls.n	8002978 <_vfiprintf_r+0x1d0>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0c6      	beq.n	8002902 <_vfiprintf_r+0x15a>
 8002974:	9105      	str	r1, [sp, #20]
 8002976:	e7c4      	b.n	8002902 <_vfiprintf_r+0x15a>
 8002978:	fb0c 2101 	mla	r1, ip, r1, r2
 800297c:	4604      	mov	r4, r0
 800297e:	2301      	movs	r3, #1
 8002980:	e7f0      	b.n	8002964 <_vfiprintf_r+0x1bc>
 8002982:	ab03      	add	r3, sp, #12
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	462a      	mov	r2, r5
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <_vfiprintf_r+0x22c>)
 800298a:	a904      	add	r1, sp, #16
 800298c:	4630      	mov	r0, r6
 800298e:	f3af 8000 	nop.w
 8002992:	4607      	mov	r7, r0
 8002994:	1c78      	adds	r0, r7, #1
 8002996:	d1d6      	bne.n	8002946 <_vfiprintf_r+0x19e>
 8002998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800299a:	07d9      	lsls	r1, r3, #31
 800299c:	d405      	bmi.n	80029aa <_vfiprintf_r+0x202>
 800299e:	89ab      	ldrh	r3, [r5, #12]
 80029a0:	059a      	lsls	r2, r3, #22
 80029a2:	d402      	bmi.n	80029aa <_vfiprintf_r+0x202>
 80029a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029a6:	f7ff fce0 	bl	800236a <__retarget_lock_release_recursive>
 80029aa:	89ab      	ldrh	r3, [r5, #12]
 80029ac:	065b      	lsls	r3, r3, #25
 80029ae:	f53f af1d 	bmi.w	80027ec <_vfiprintf_r+0x44>
 80029b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029b4:	e71c      	b.n	80027f0 <_vfiprintf_r+0x48>
 80029b6:	ab03      	add	r3, sp, #12
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	462a      	mov	r2, r5
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <_vfiprintf_r+0x22c>)
 80029be:	a904      	add	r1, sp, #16
 80029c0:	4630      	mov	r0, r6
 80029c2:	f000 f879 	bl	8002ab8 <_printf_i>
 80029c6:	e7e4      	b.n	8002992 <_vfiprintf_r+0x1ea>
 80029c8:	08003093 	.word	0x08003093
 80029cc:	0800309d 	.word	0x0800309d
 80029d0:	00000000 	.word	0x00000000
 80029d4:	08002785 	.word	0x08002785
 80029d8:	08003099 	.word	0x08003099

080029dc <_printf_common>:
 80029dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e0:	4616      	mov	r6, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	688a      	ldr	r2, [r1, #8]
 80029e6:	690b      	ldr	r3, [r1, #16]
 80029e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029ec:	4293      	cmp	r3, r2
 80029ee:	bfb8      	it	lt
 80029f0:	4613      	movlt	r3, r2
 80029f2:	6033      	str	r3, [r6, #0]
 80029f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029f8:	4607      	mov	r7, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	b10a      	cbz	r2, 8002a02 <_printf_common+0x26>
 80029fe:	3301      	adds	r3, #1
 8002a00:	6033      	str	r3, [r6, #0]
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	0699      	lsls	r1, r3, #26
 8002a06:	bf42      	ittt	mi
 8002a08:	6833      	ldrmi	r3, [r6, #0]
 8002a0a:	3302      	addmi	r3, #2
 8002a0c:	6033      	strmi	r3, [r6, #0]
 8002a0e:	6825      	ldr	r5, [r4, #0]
 8002a10:	f015 0506 	ands.w	r5, r5, #6
 8002a14:	d106      	bne.n	8002a24 <_printf_common+0x48>
 8002a16:	f104 0a19 	add.w	sl, r4, #25
 8002a1a:	68e3      	ldr	r3, [r4, #12]
 8002a1c:	6832      	ldr	r2, [r6, #0]
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	42ab      	cmp	r3, r5
 8002a22:	dc26      	bgt.n	8002a72 <_printf_common+0x96>
 8002a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a28:	1e13      	subs	r3, r2, #0
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	bf18      	it	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	0692      	lsls	r2, r2, #26
 8002a32:	d42b      	bmi.n	8002a8c <_printf_common+0xb0>
 8002a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a38:	4649      	mov	r1, r9
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	47c0      	blx	r8
 8002a3e:	3001      	adds	r0, #1
 8002a40:	d01e      	beq.n	8002a80 <_printf_common+0xa4>
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	6922      	ldr	r2, [r4, #16]
 8002a46:	f003 0306 	and.w	r3, r3, #6
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf02      	ittt	eq
 8002a4e:	68e5      	ldreq	r5, [r4, #12]
 8002a50:	6833      	ldreq	r3, [r6, #0]
 8002a52:	1aed      	subeq	r5, r5, r3
 8002a54:	68a3      	ldr	r3, [r4, #8]
 8002a56:	bf0c      	ite	eq
 8002a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a5c:	2500      	movne	r5, #0
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	bfc4      	itt	gt
 8002a62:	1a9b      	subgt	r3, r3, r2
 8002a64:	18ed      	addgt	r5, r5, r3
 8002a66:	2600      	movs	r6, #0
 8002a68:	341a      	adds	r4, #26
 8002a6a:	42b5      	cmp	r5, r6
 8002a6c:	d11a      	bne.n	8002aa4 <_printf_common+0xc8>
 8002a6e:	2000      	movs	r0, #0
 8002a70:	e008      	b.n	8002a84 <_printf_common+0xa8>
 8002a72:	2301      	movs	r3, #1
 8002a74:	4652      	mov	r2, sl
 8002a76:	4649      	mov	r1, r9
 8002a78:	4638      	mov	r0, r7
 8002a7a:	47c0      	blx	r8
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	d103      	bne.n	8002a88 <_printf_common+0xac>
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a88:	3501      	adds	r5, #1
 8002a8a:	e7c6      	b.n	8002a1a <_printf_common+0x3e>
 8002a8c:	18e1      	adds	r1, r4, r3
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	2030      	movs	r0, #48	; 0x30
 8002a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a96:	4422      	add	r2, r4
 8002a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	e7c7      	b.n	8002a34 <_printf_common+0x58>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	4638      	mov	r0, r7
 8002aac:	47c0      	blx	r8
 8002aae:	3001      	adds	r0, #1
 8002ab0:	d0e6      	beq.n	8002a80 <_printf_common+0xa4>
 8002ab2:	3601      	adds	r6, #1
 8002ab4:	e7d9      	b.n	8002a6a <_printf_common+0x8e>
	...

08002ab8 <_printf_i>:
 8002ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002abc:	7e0f      	ldrb	r7, [r1, #24]
 8002abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ac0:	2f78      	cmp	r7, #120	; 0x78
 8002ac2:	4691      	mov	r9, r2
 8002ac4:	4680      	mov	r8, r0
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	469a      	mov	sl, r3
 8002aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ace:	d807      	bhi.n	8002ae0 <_printf_i+0x28>
 8002ad0:	2f62      	cmp	r7, #98	; 0x62
 8002ad2:	d80a      	bhi.n	8002aea <_printf_i+0x32>
 8002ad4:	2f00      	cmp	r7, #0
 8002ad6:	f000 80d4 	beq.w	8002c82 <_printf_i+0x1ca>
 8002ada:	2f58      	cmp	r7, #88	; 0x58
 8002adc:	f000 80c0 	beq.w	8002c60 <_printf_i+0x1a8>
 8002ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ae8:	e03a      	b.n	8002b60 <_printf_i+0xa8>
 8002aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002aee:	2b15      	cmp	r3, #21
 8002af0:	d8f6      	bhi.n	8002ae0 <_printf_i+0x28>
 8002af2:	a101      	add	r1, pc, #4	; (adr r1, 8002af8 <_printf_i+0x40>)
 8002af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002af8:	08002b51 	.word	0x08002b51
 8002afc:	08002b65 	.word	0x08002b65
 8002b00:	08002ae1 	.word	0x08002ae1
 8002b04:	08002ae1 	.word	0x08002ae1
 8002b08:	08002ae1 	.word	0x08002ae1
 8002b0c:	08002ae1 	.word	0x08002ae1
 8002b10:	08002b65 	.word	0x08002b65
 8002b14:	08002ae1 	.word	0x08002ae1
 8002b18:	08002ae1 	.word	0x08002ae1
 8002b1c:	08002ae1 	.word	0x08002ae1
 8002b20:	08002ae1 	.word	0x08002ae1
 8002b24:	08002c69 	.word	0x08002c69
 8002b28:	08002b91 	.word	0x08002b91
 8002b2c:	08002c23 	.word	0x08002c23
 8002b30:	08002ae1 	.word	0x08002ae1
 8002b34:	08002ae1 	.word	0x08002ae1
 8002b38:	08002c8b 	.word	0x08002c8b
 8002b3c:	08002ae1 	.word	0x08002ae1
 8002b40:	08002b91 	.word	0x08002b91
 8002b44:	08002ae1 	.word	0x08002ae1
 8002b48:	08002ae1 	.word	0x08002ae1
 8002b4c:	08002c2b 	.word	0x08002c2b
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	1d1a      	adds	r2, r3, #4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	602a      	str	r2, [r5, #0]
 8002b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b60:	2301      	movs	r3, #1
 8002b62:	e09f      	b.n	8002ca4 <_printf_i+0x1ec>
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	682b      	ldr	r3, [r5, #0]
 8002b68:	0607      	lsls	r7, r0, #24
 8002b6a:	f103 0104 	add.w	r1, r3, #4
 8002b6e:	6029      	str	r1, [r5, #0]
 8002b70:	d501      	bpl.n	8002b76 <_printf_i+0xbe>
 8002b72:	681e      	ldr	r6, [r3, #0]
 8002b74:	e003      	b.n	8002b7e <_printf_i+0xc6>
 8002b76:	0646      	lsls	r6, r0, #25
 8002b78:	d5fb      	bpl.n	8002b72 <_printf_i+0xba>
 8002b7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b7e:	2e00      	cmp	r6, #0
 8002b80:	da03      	bge.n	8002b8a <_printf_i+0xd2>
 8002b82:	232d      	movs	r3, #45	; 0x2d
 8002b84:	4276      	negs	r6, r6
 8002b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b8a:	485a      	ldr	r0, [pc, #360]	; (8002cf4 <_printf_i+0x23c>)
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	e012      	b.n	8002bb6 <_printf_i+0xfe>
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	6820      	ldr	r0, [r4, #0]
 8002b94:	1d19      	adds	r1, r3, #4
 8002b96:	6029      	str	r1, [r5, #0]
 8002b98:	0605      	lsls	r5, r0, #24
 8002b9a:	d501      	bpl.n	8002ba0 <_printf_i+0xe8>
 8002b9c:	681e      	ldr	r6, [r3, #0]
 8002b9e:	e002      	b.n	8002ba6 <_printf_i+0xee>
 8002ba0:	0641      	lsls	r1, r0, #25
 8002ba2:	d5fb      	bpl.n	8002b9c <_printf_i+0xe4>
 8002ba4:	881e      	ldrh	r6, [r3, #0]
 8002ba6:	4853      	ldr	r0, [pc, #332]	; (8002cf4 <_printf_i+0x23c>)
 8002ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8002baa:	bf0c      	ite	eq
 8002bac:	2308      	moveq	r3, #8
 8002bae:	230a      	movne	r3, #10
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bb6:	6865      	ldr	r5, [r4, #4]
 8002bb8:	60a5      	str	r5, [r4, #8]
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	bfa2      	ittt	ge
 8002bbe:	6821      	ldrge	r1, [r4, #0]
 8002bc0:	f021 0104 	bicge.w	r1, r1, #4
 8002bc4:	6021      	strge	r1, [r4, #0]
 8002bc6:	b90e      	cbnz	r6, 8002bcc <_printf_i+0x114>
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	d04b      	beq.n	8002c64 <_printf_i+0x1ac>
 8002bcc:	4615      	mov	r5, r2
 8002bce:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bd2:	fb03 6711 	mls	r7, r3, r1, r6
 8002bd6:	5dc7      	ldrb	r7, [r0, r7]
 8002bd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bdc:	4637      	mov	r7, r6
 8002bde:	42bb      	cmp	r3, r7
 8002be0:	460e      	mov	r6, r1
 8002be2:	d9f4      	bls.n	8002bce <_printf_i+0x116>
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d10b      	bne.n	8002c00 <_printf_i+0x148>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	07de      	lsls	r6, r3, #31
 8002bec:	d508      	bpl.n	8002c00 <_printf_i+0x148>
 8002bee:	6923      	ldr	r3, [r4, #16]
 8002bf0:	6861      	ldr	r1, [r4, #4]
 8002bf2:	4299      	cmp	r1, r3
 8002bf4:	bfde      	ittt	le
 8002bf6:	2330      	movle	r3, #48	; 0x30
 8002bf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c00:	1b52      	subs	r2, r2, r5
 8002c02:	6122      	str	r2, [r4, #16]
 8002c04:	f8cd a000 	str.w	sl, [sp]
 8002c08:	464b      	mov	r3, r9
 8002c0a:	aa03      	add	r2, sp, #12
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	4640      	mov	r0, r8
 8002c10:	f7ff fee4 	bl	80029dc <_printf_common>
 8002c14:	3001      	adds	r0, #1
 8002c16:	d14a      	bne.n	8002cae <_printf_i+0x1f6>
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	b004      	add	sp, #16
 8002c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	f043 0320 	orr.w	r3, r3, #32
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	4833      	ldr	r0, [pc, #204]	; (8002cf8 <_printf_i+0x240>)
 8002c2c:	2778      	movs	r7, #120	; 0x78
 8002c2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	6829      	ldr	r1, [r5, #0]
 8002c36:	061f      	lsls	r7, r3, #24
 8002c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c3c:	d402      	bmi.n	8002c44 <_printf_i+0x18c>
 8002c3e:	065f      	lsls	r7, r3, #25
 8002c40:	bf48      	it	mi
 8002c42:	b2b6      	uxthmi	r6, r6
 8002c44:	07df      	lsls	r7, r3, #31
 8002c46:	bf48      	it	mi
 8002c48:	f043 0320 	orrmi.w	r3, r3, #32
 8002c4c:	6029      	str	r1, [r5, #0]
 8002c4e:	bf48      	it	mi
 8002c50:	6023      	strmi	r3, [r4, #0]
 8002c52:	b91e      	cbnz	r6, 8002c5c <_printf_i+0x1a4>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	f023 0320 	bic.w	r3, r3, #32
 8002c5a:	6023      	str	r3, [r4, #0]
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	e7a7      	b.n	8002bb0 <_printf_i+0xf8>
 8002c60:	4824      	ldr	r0, [pc, #144]	; (8002cf4 <_printf_i+0x23c>)
 8002c62:	e7e4      	b.n	8002c2e <_printf_i+0x176>
 8002c64:	4615      	mov	r5, r2
 8002c66:	e7bd      	b.n	8002be4 <_printf_i+0x12c>
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	6826      	ldr	r6, [r4, #0]
 8002c6c:	6961      	ldr	r1, [r4, #20]
 8002c6e:	1d18      	adds	r0, r3, #4
 8002c70:	6028      	str	r0, [r5, #0]
 8002c72:	0635      	lsls	r5, r6, #24
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	d501      	bpl.n	8002c7c <_printf_i+0x1c4>
 8002c78:	6019      	str	r1, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <_printf_i+0x1ca>
 8002c7c:	0670      	lsls	r0, r6, #25
 8002c7e:	d5fb      	bpl.n	8002c78 <_printf_i+0x1c0>
 8002c80:	8019      	strh	r1, [r3, #0]
 8002c82:	2300      	movs	r3, #0
 8002c84:	6123      	str	r3, [r4, #16]
 8002c86:	4615      	mov	r5, r2
 8002c88:	e7bc      	b.n	8002c04 <_printf_i+0x14c>
 8002c8a:	682b      	ldr	r3, [r5, #0]
 8002c8c:	1d1a      	adds	r2, r3, #4
 8002c8e:	602a      	str	r2, [r5, #0]
 8002c90:	681d      	ldr	r5, [r3, #0]
 8002c92:	6862      	ldr	r2, [r4, #4]
 8002c94:	2100      	movs	r1, #0
 8002c96:	4628      	mov	r0, r5
 8002c98:	f7fd fad2 	bl	8000240 <memchr>
 8002c9c:	b108      	cbz	r0, 8002ca2 <_printf_i+0x1ea>
 8002c9e:	1b40      	subs	r0, r0, r5
 8002ca0:	6060      	str	r0, [r4, #4]
 8002ca2:	6863      	ldr	r3, [r4, #4]
 8002ca4:	6123      	str	r3, [r4, #16]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cac:	e7aa      	b.n	8002c04 <_printf_i+0x14c>
 8002cae:	6923      	ldr	r3, [r4, #16]
 8002cb0:	462a      	mov	r2, r5
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	47d0      	blx	sl
 8002cb8:	3001      	adds	r0, #1
 8002cba:	d0ad      	beq.n	8002c18 <_printf_i+0x160>
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	079b      	lsls	r3, r3, #30
 8002cc0:	d413      	bmi.n	8002cea <_printf_i+0x232>
 8002cc2:	68e0      	ldr	r0, [r4, #12]
 8002cc4:	9b03      	ldr	r3, [sp, #12]
 8002cc6:	4298      	cmp	r0, r3
 8002cc8:	bfb8      	it	lt
 8002cca:	4618      	movlt	r0, r3
 8002ccc:	e7a6      	b.n	8002c1c <_printf_i+0x164>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4632      	mov	r2, r6
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	4640      	mov	r0, r8
 8002cd6:	47d0      	blx	sl
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d09d      	beq.n	8002c18 <_printf_i+0x160>
 8002cdc:	3501      	adds	r5, #1
 8002cde:	68e3      	ldr	r3, [r4, #12]
 8002ce0:	9903      	ldr	r1, [sp, #12]
 8002ce2:	1a5b      	subs	r3, r3, r1
 8002ce4:	42ab      	cmp	r3, r5
 8002ce6:	dcf2      	bgt.n	8002cce <_printf_i+0x216>
 8002ce8:	e7eb      	b.n	8002cc2 <_printf_i+0x20a>
 8002cea:	2500      	movs	r5, #0
 8002cec:	f104 0619 	add.w	r6, r4, #25
 8002cf0:	e7f5      	b.n	8002cde <_printf_i+0x226>
 8002cf2:	bf00      	nop
 8002cf4:	080030a4 	.word	0x080030a4
 8002cf8:	080030b5 	.word	0x080030b5

08002cfc <__swbuf_r>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	460e      	mov	r6, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	4605      	mov	r5, r0
 8002d04:	b118      	cbz	r0, 8002d0e <__swbuf_r+0x12>
 8002d06:	6a03      	ldr	r3, [r0, #32]
 8002d08:	b90b      	cbnz	r3, 8002d0e <__swbuf_r+0x12>
 8002d0a:	f7ff fa3b 	bl	8002184 <__sinit>
 8002d0e:	69a3      	ldr	r3, [r4, #24]
 8002d10:	60a3      	str	r3, [r4, #8]
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	071a      	lsls	r2, r3, #28
 8002d16:	d525      	bpl.n	8002d64 <__swbuf_r+0x68>
 8002d18:	6923      	ldr	r3, [r4, #16]
 8002d1a:	b31b      	cbz	r3, 8002d64 <__swbuf_r+0x68>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	6922      	ldr	r2, [r4, #16]
 8002d20:	1a98      	subs	r0, r3, r2
 8002d22:	6963      	ldr	r3, [r4, #20]
 8002d24:	b2f6      	uxtb	r6, r6
 8002d26:	4283      	cmp	r3, r0
 8002d28:	4637      	mov	r7, r6
 8002d2a:	dc04      	bgt.n	8002d36 <__swbuf_r+0x3a>
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f7ff fcc0 	bl	80026b4 <_fflush_r>
 8002d34:	b9e0      	cbnz	r0, 8002d70 <__swbuf_r+0x74>
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	60a3      	str	r3, [r4, #8]
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	6022      	str	r2, [r4, #0]
 8002d42:	701e      	strb	r6, [r3, #0]
 8002d44:	6962      	ldr	r2, [r4, #20]
 8002d46:	1c43      	adds	r3, r0, #1
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d004      	beq.n	8002d56 <__swbuf_r+0x5a>
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	07db      	lsls	r3, r3, #31
 8002d50:	d506      	bpl.n	8002d60 <__swbuf_r+0x64>
 8002d52:	2e0a      	cmp	r6, #10
 8002d54:	d104      	bne.n	8002d60 <__swbuf_r+0x64>
 8002d56:	4621      	mov	r1, r4
 8002d58:	4628      	mov	r0, r5
 8002d5a:	f7ff fcab 	bl	80026b4 <_fflush_r>
 8002d5e:	b938      	cbnz	r0, 8002d70 <__swbuf_r+0x74>
 8002d60:	4638      	mov	r0, r7
 8002d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d64:	4621      	mov	r1, r4
 8002d66:	4628      	mov	r0, r5
 8002d68:	f000 f806 	bl	8002d78 <__swsetup_r>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d0d5      	beq.n	8002d1c <__swbuf_r+0x20>
 8002d70:	f04f 37ff 	mov.w	r7, #4294967295
 8002d74:	e7f4      	b.n	8002d60 <__swbuf_r+0x64>
	...

08002d78 <__swsetup_r>:
 8002d78:	b538      	push	{r3, r4, r5, lr}
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <__swsetup_r+0xac>)
 8002d7c:	4605      	mov	r5, r0
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	460c      	mov	r4, r1
 8002d82:	b118      	cbz	r0, 8002d8c <__swsetup_r+0x14>
 8002d84:	6a03      	ldr	r3, [r0, #32]
 8002d86:	b90b      	cbnz	r3, 8002d8c <__swsetup_r+0x14>
 8002d88:	f7ff f9fc 	bl	8002184 <__sinit>
 8002d8c:	89a3      	ldrh	r3, [r4, #12]
 8002d8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d92:	0718      	lsls	r0, r3, #28
 8002d94:	d422      	bmi.n	8002ddc <__swsetup_r+0x64>
 8002d96:	06d9      	lsls	r1, r3, #27
 8002d98:	d407      	bmi.n	8002daa <__swsetup_r+0x32>
 8002d9a:	2309      	movs	r3, #9
 8002d9c:	602b      	str	r3, [r5, #0]
 8002d9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002da2:	81a3      	strh	r3, [r4, #12]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	e034      	b.n	8002e14 <__swsetup_r+0x9c>
 8002daa:	0758      	lsls	r0, r3, #29
 8002dac:	d512      	bpl.n	8002dd4 <__swsetup_r+0x5c>
 8002dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002db0:	b141      	cbz	r1, 8002dc4 <__swsetup_r+0x4c>
 8002db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002db6:	4299      	cmp	r1, r3
 8002db8:	d002      	beq.n	8002dc0 <__swsetup_r+0x48>
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f7ff faf4 	bl	80023a8 <_free_r>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	6363      	str	r3, [r4, #52]	; 0x34
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002dca:	81a3      	strh	r3, [r4, #12]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6063      	str	r3, [r4, #4]
 8002dd0:	6923      	ldr	r3, [r4, #16]
 8002dd2:	6023      	str	r3, [r4, #0]
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	81a3      	strh	r3, [r4, #12]
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	b94b      	cbnz	r3, 8002df4 <__swsetup_r+0x7c>
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dea:	d003      	beq.n	8002df4 <__swsetup_r+0x7c>
 8002dec:	4621      	mov	r1, r4
 8002dee:	4628      	mov	r0, r5
 8002df0:	f000 f884 	bl	8002efc <__smakebuf_r>
 8002df4:	89a0      	ldrh	r0, [r4, #12]
 8002df6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dfa:	f010 0301 	ands.w	r3, r0, #1
 8002dfe:	d00a      	beq.n	8002e16 <__swsetup_r+0x9e>
 8002e00:	2300      	movs	r3, #0
 8002e02:	60a3      	str	r3, [r4, #8]
 8002e04:	6963      	ldr	r3, [r4, #20]
 8002e06:	425b      	negs	r3, r3
 8002e08:	61a3      	str	r3, [r4, #24]
 8002e0a:	6923      	ldr	r3, [r4, #16]
 8002e0c:	b943      	cbnz	r3, 8002e20 <__swsetup_r+0xa8>
 8002e0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e12:	d1c4      	bne.n	8002d9e <__swsetup_r+0x26>
 8002e14:	bd38      	pop	{r3, r4, r5, pc}
 8002e16:	0781      	lsls	r1, r0, #30
 8002e18:	bf58      	it	pl
 8002e1a:	6963      	ldrpl	r3, [r4, #20]
 8002e1c:	60a3      	str	r3, [r4, #8]
 8002e1e:	e7f4      	b.n	8002e0a <__swsetup_r+0x92>
 8002e20:	2000      	movs	r0, #0
 8002e22:	e7f7      	b.n	8002e14 <__swsetup_r+0x9c>
 8002e24:	20000064 	.word	0x20000064

08002e28 <_raise_r>:
 8002e28:	291f      	cmp	r1, #31
 8002e2a:	b538      	push	{r3, r4, r5, lr}
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	460d      	mov	r5, r1
 8002e30:	d904      	bls.n	8002e3c <_raise_r+0x14>
 8002e32:	2316      	movs	r3, #22
 8002e34:	6003      	str	r3, [r0, #0]
 8002e36:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002e3e:	b112      	cbz	r2, 8002e46 <_raise_r+0x1e>
 8002e40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002e44:	b94b      	cbnz	r3, 8002e5a <_raise_r+0x32>
 8002e46:	4620      	mov	r0, r4
 8002e48:	f000 f830 	bl	8002eac <_getpid_r>
 8002e4c:	462a      	mov	r2, r5
 8002e4e:	4601      	mov	r1, r0
 8002e50:	4620      	mov	r0, r4
 8002e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e56:	f000 b817 	b.w	8002e88 <_kill_r>
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d00a      	beq.n	8002e74 <_raise_r+0x4c>
 8002e5e:	1c59      	adds	r1, r3, #1
 8002e60:	d103      	bne.n	8002e6a <_raise_r+0x42>
 8002e62:	2316      	movs	r3, #22
 8002e64:	6003      	str	r3, [r0, #0]
 8002e66:	2001      	movs	r0, #1
 8002e68:	e7e7      	b.n	8002e3a <_raise_r+0x12>
 8002e6a:	2400      	movs	r4, #0
 8002e6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002e70:	4628      	mov	r0, r5
 8002e72:	4798      	blx	r3
 8002e74:	2000      	movs	r0, #0
 8002e76:	e7e0      	b.n	8002e3a <_raise_r+0x12>

08002e78 <raise>:
 8002e78:	4b02      	ldr	r3, [pc, #8]	; (8002e84 <raise+0xc>)
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f7ff bfd3 	b.w	8002e28 <_raise_r>
 8002e82:	bf00      	nop
 8002e84:	20000064 	.word	0x20000064

08002e88 <_kill_r>:
 8002e88:	b538      	push	{r3, r4, r5, lr}
 8002e8a:	4d07      	ldr	r5, [pc, #28]	; (8002ea8 <_kill_r+0x20>)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	4604      	mov	r4, r0
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	f7fe ff7b 	bl	8001d90 <_kill>
 8002e9a:	1c43      	adds	r3, r0, #1
 8002e9c:	d102      	bne.n	8002ea4 <_kill_r+0x1c>
 8002e9e:	682b      	ldr	r3, [r5, #0]
 8002ea0:	b103      	cbz	r3, 8002ea4 <_kill_r+0x1c>
 8002ea2:	6023      	str	r3, [r4, #0]
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000210 	.word	0x20000210

08002eac <_getpid_r>:
 8002eac:	f7fe bf68 	b.w	8001d80 <_getpid>

08002eb0 <__swhatbuf_r>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	b096      	sub	sp, #88	; 0x58
 8002ebc:	4615      	mov	r5, r2
 8002ebe:	461e      	mov	r6, r3
 8002ec0:	da0d      	bge.n	8002ede <__swhatbuf_r+0x2e>
 8002ec2:	89a3      	ldrh	r3, [r4, #12]
 8002ec4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	bf0c      	ite	eq
 8002ece:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002ed2:	2340      	movne	r3, #64	; 0x40
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	6031      	str	r1, [r6, #0]
 8002ed8:	602b      	str	r3, [r5, #0]
 8002eda:	b016      	add	sp, #88	; 0x58
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	466a      	mov	r2, sp
 8002ee0:	f000 f848 	bl	8002f74 <_fstat_r>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	dbec      	blt.n	8002ec2 <__swhatbuf_r+0x12>
 8002ee8:	9901      	ldr	r1, [sp, #4]
 8002eea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002eee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002ef2:	4259      	negs	r1, r3
 8002ef4:	4159      	adcs	r1, r3
 8002ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002efa:	e7eb      	b.n	8002ed4 <__swhatbuf_r+0x24>

08002efc <__smakebuf_r>:
 8002efc:	898b      	ldrh	r3, [r1, #12]
 8002efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f00:	079d      	lsls	r5, r3, #30
 8002f02:	4606      	mov	r6, r0
 8002f04:	460c      	mov	r4, r1
 8002f06:	d507      	bpl.n	8002f18 <__smakebuf_r+0x1c>
 8002f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	6123      	str	r3, [r4, #16]
 8002f10:	2301      	movs	r3, #1
 8002f12:	6163      	str	r3, [r4, #20]
 8002f14:	b002      	add	sp, #8
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	ab01      	add	r3, sp, #4
 8002f1a:	466a      	mov	r2, sp
 8002f1c:	f7ff ffc8 	bl	8002eb0 <__swhatbuf_r>
 8002f20:	9900      	ldr	r1, [sp, #0]
 8002f22:	4605      	mov	r5, r0
 8002f24:	4630      	mov	r0, r6
 8002f26:	f7ff fab3 	bl	8002490 <_malloc_r>
 8002f2a:	b948      	cbnz	r0, 8002f40 <__smakebuf_r+0x44>
 8002f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f30:	059a      	lsls	r2, r3, #22
 8002f32:	d4ef      	bmi.n	8002f14 <__smakebuf_r+0x18>
 8002f34:	f023 0303 	bic.w	r3, r3, #3
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	81a3      	strh	r3, [r4, #12]
 8002f3e:	e7e3      	b.n	8002f08 <__smakebuf_r+0xc>
 8002f40:	89a3      	ldrh	r3, [r4, #12]
 8002f42:	6020      	str	r0, [r4, #0]
 8002f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f48:	81a3      	strh	r3, [r4, #12]
 8002f4a:	9b00      	ldr	r3, [sp, #0]
 8002f4c:	6163      	str	r3, [r4, #20]
 8002f4e:	9b01      	ldr	r3, [sp, #4]
 8002f50:	6120      	str	r0, [r4, #16]
 8002f52:	b15b      	cbz	r3, 8002f6c <__smakebuf_r+0x70>
 8002f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f000 f81d 	bl	8002f98 <_isatty_r>
 8002f5e:	b128      	cbz	r0, 8002f6c <__smakebuf_r+0x70>
 8002f60:	89a3      	ldrh	r3, [r4, #12]
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	81a3      	strh	r3, [r4, #12]
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	431d      	orrs	r5, r3
 8002f70:	81a5      	strh	r5, [r4, #12]
 8002f72:	e7cf      	b.n	8002f14 <__smakebuf_r+0x18>

08002f74 <_fstat_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4d07      	ldr	r5, [pc, #28]	; (8002f94 <_fstat_r+0x20>)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	602b      	str	r3, [r5, #0]
 8002f82:	f7fe ff91 	bl	8001ea8 <_fstat>
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	d102      	bne.n	8002f90 <_fstat_r+0x1c>
 8002f8a:	682b      	ldr	r3, [r5, #0]
 8002f8c:	b103      	cbz	r3, 8002f90 <_fstat_r+0x1c>
 8002f8e:	6023      	str	r3, [r4, #0]
 8002f90:	bd38      	pop	{r3, r4, r5, pc}
 8002f92:	bf00      	nop
 8002f94:	20000210 	.word	0x20000210

08002f98 <_isatty_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4d06      	ldr	r5, [pc, #24]	; (8002fb4 <_isatty_r+0x1c>)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	602b      	str	r3, [r5, #0]
 8002fa4:	f7fe ff90 	bl	8001ec8 <_isatty>
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	d102      	bne.n	8002fb2 <_isatty_r+0x1a>
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	b103      	cbz	r3, 8002fb2 <_isatty_r+0x1a>
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	bd38      	pop	{r3, r4, r5, pc}
 8002fb4:	20000210 	.word	0x20000210

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
