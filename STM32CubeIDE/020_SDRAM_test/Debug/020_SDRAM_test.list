
020_SDRAM_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e4  080031e4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031ec  080031ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080031f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000068  0800325c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  0800325c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007348  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000186e  00000000  00000000  00027421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00028c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053e  00000000  00000000  000293c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d2cc  00000000  00000000  000298fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008497  00000000  00000000  00056bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010dfcf  00000000  00000000  0005f061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024b8  00000000  00000000  0016d030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0016f4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	080030dc 	.word	0x080030dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	080030dc 	.word	0x080030dc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	f5ad 6de3 	sub.w	sp, sp, #1816	; 0x718
 80005e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e4:	f000 fc23 	bl	8000e2e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e8:	f000 f8ca 	bl	8000780 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ec:	f000 f9c2 	bl	8000974 <MX_GPIO_Init>
	MX_FMC_Init();
 80005f0:	f000 f934 	bl	800085c <MX_FMC_Init>
		uint32_t addr_err[0x100];
		uint8_t ram_err[0x100];
		uint8_t sdram_err[0x100];
	};

	volatile uint32_t test_ok = 0; //zmienna w której będzie wynik testu
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
	struct Test_ERR test_err;

	// uzupełnienie randomem małego bloku na stosie
	uint8_t tab[0x100];
	srand(HAL_GetTick());
 80005fa:	f000 fc69 	bl	8000ed0 <HAL_GetTick>
 80005fe:	4603      	mov	r3, r0
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fd6b 	bl	80020dc <srand>
	for (int i = 0; i < 0x100; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 800060c:	e016      	b.n	800063c <main+0x60>
		tab[i] = rand() % 0x100;
 800060e:	f001 fd93 	bl	8002138 <rand>
 8000612:	4603      	mov	r3, r0
 8000614:	425a      	negs	r2, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	bf58      	it	pl
 800061c:	4253      	negpl	r3, r2
 800061e:	b2d9      	uxtb	r1, r3
 8000620:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8000624:	f5a3 62e3 	sub.w	r2, r3, #1816	; 0x718
 8000628:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 800062c:	4413      	add	r3, r2
 800062e:	460a      	mov	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 0x100; i++) {
 8000632:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 8000636:	3301      	adds	r3, #1
 8000638:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 800063c:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
 8000640:	2bff      	cmp	r3, #255	; 0xff
 8000642:	dde4      	ble.n	800060e <main+0x32>
	}

	// zapełnienie całej sdram powtarzanymi blokami
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 800064a:	e024      	b.n	8000696 <main+0xba>
		for (int i = 0; i < 0x100; i++) {
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 8000652:	e017      	b.n	8000684 <main+0xa8>
			*(__IO uint8_t*) (SDRAM_BANK_ADDR_START + (j * 0x100) + (1 * i)) = tab[i];
 8000654:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	461a      	mov	r2, r3
 800065c:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8000660:	4413      	add	r3, r2
 8000662:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000666:	4619      	mov	r1, r3
 8000668:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800066c:	f5a3 62e3 	sub.w	r2, r3, #1816	; 0x718
 8000670:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	700b      	strb	r3, [r1, #0]
		for (int i = 0; i < 0x100; i++) {
 800067a:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 800067e:	3301      	adds	r3, #1
 8000680:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 8000684:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
 8000688:	2bff      	cmp	r3, #255	; 0xff
 800068a:	dde3      	ble.n	8000654 <main+0x78>
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 800068c:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 8000690:	3301      	adds	r3, #1
 8000692:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 8000696:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
 800069a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800069e:	dbd5      	blt.n	800064c <main+0x70>
		}

	// porównanie pamięci
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
 80006a6:	e064      	b.n	8000772 <main+0x196>
		for (int i = 0; i < 0x100; i++) {
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 80006ae:	e057      	b.n	8000760 <main+0x184>
			if ((*(__IO uint8_t*) (SDRAM_BANK_ADDR_START + (j * 0x100) + (1 * i))) != tab[i]) {
 80006b0:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	461a      	mov	r2, r3
 80006b8:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80006bc:	4413      	add	r3, r2
 80006be:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80006ca:	f5a3 61e3 	sub.w	r1, r3, #1816	; 0x718
 80006ce:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80006d2:	440b      	add	r3, r1
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d03d      	beq.n	8000756 <main+0x17a>
				test_err.addr_err[test_ok] = (SDRAM_BANK_ADDR_START + (j * 0x100) + (1 * i));
 80006da:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	461a      	mov	r2, r3
 80006e2:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 80006e6:	4413      	add	r3, r2
 80006e8:	f8d7 2700 	ldr.w	r2, [r7, #1792]	; 0x700
 80006ec:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80006f0:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80006f4:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 80006f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				test_err.sdram_err[test_ok] = *(__IO uint8_t*) (SDRAM_BANK_ADDR_START + (j * 0x100) + (1 * i));
 80006fc:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	461a      	mov	r2, r3
 8000704:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 8000708:	4413      	add	r3, r2
 800070a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800070e:	461a      	mov	r2, r3
 8000710:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 8000714:	7812      	ldrb	r2, [r2, #0]
 8000716:	b2d1      	uxtb	r1, r2
 8000718:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800071c:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 8000720:	4413      	add	r3, r2
 8000722:	460a      	mov	r2, r1
 8000724:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
				test_err.ram_err[test_ok] = tab[i];
 8000728:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 800072c:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 8000730:	f5a2 61e3 	sub.w	r1, r2, #1816	; 0x718
 8000734:	f8d7 2704 	ldr.w	r2, [r7, #1796]	; 0x704
 8000738:	440a      	add	r2, r1
 800073a:	7811      	ldrb	r1, [r2, #0]
 800073c:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 8000740:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 8000744:	4413      	add	r3, r2
 8000746:	460a      	mov	r2, r1
 8000748:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
				test_ok++;
 800074c:	f8d7 3700 	ldr.w	r3, [r7, #1792]	; 0x700
 8000750:	3301      	adds	r3, #1
 8000752:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
		for (int i = 0; i < 0x100; i++) {
 8000756:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 800075a:	3301      	adds	r3, #1
 800075c:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8000760:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 8000764:	2bff      	cmp	r3, #255	; 0xff
 8000766:	dda3      	ble.n	80006b0 <main+0xd4>
	for (int j = 0; j < SDRAM_BANK_COUNT; j++)
 8000768:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 800076c:	3301      	adds	r3, #1
 800076e:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
 8000772:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 8000776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800077a:	db95      	blt.n	80006a8 <main+0xcc>
			}
		}

	while (1) {
 800077c:	e7fe      	b.n	800077c <main+0x1a0>
	...

08000780 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2234      	movs	r2, #52	; 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fe03 	bl	800239a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <SystemClock_Config+0xd4>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <SystemClock_Config+0xd4>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <SystemClock_Config+0xd4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <SystemClock_Config+0xd8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <SystemClock_Config+0xd8>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <SystemClock_Config+0xd8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 12;
 80007e8:	230c      	movs	r3, #12
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 192;
 80007ec:	23c0      	movs	r3, #192	; 0xc0
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fe77 	bl	80014f4 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x90>
		Error_Handler();
 800080c:	f000 f91e 	bl	8000a4c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000810:	f000 fe20 	bl	8001454 <HAL_PWREx_EnableOverDrive>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x9e>
		Error_Handler();
 800081a:	f000 f917 	bl	8000a4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800081e:	230f      	movs	r3, #15
 8000820:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800082e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2106      	movs	r1, #6
 800083c:	4618      	mov	r0, r3
 800083e:	f001 f907 	bl	8001a50 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xcc>
		Error_Handler();
 8000848:	f000 f900 	bl	8000a4c <Error_Handler>
	}
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	; 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000876:	4b3d      	ldr	r3, [pc, #244]	; (800096c <MX_FMC_Init+0x110>)
 8000878:	4a3d      	ldr	r2, [pc, #244]	; (8000970 <MX_FMC_Init+0x114>)
 800087a:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <MX_FMC_Init+0x110>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000882:	4b3a      	ldr	r3, [pc, #232]	; (800096c <MX_FMC_Init+0x110>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_FMC_Init+0x110>)
 800088a:	2204      	movs	r2, #4
 800088c:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <MX_FMC_Init+0x110>)
 8000890:	2220      	movs	r2, #32
 8000892:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000894:	4b35      	ldr	r3, [pc, #212]	; (800096c <MX_FMC_Init+0x110>)
 8000896:	2240      	movs	r2, #64	; 0x40
 8000898:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_FMC_Init+0x110>)
 800089c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a0:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <MX_FMC_Init+0x110>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80008a8:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_FMC_Init+0x110>)
 80008aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ae:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80008b0:	4b2e      	ldr	r3, [pc, #184]	; (800096c <MX_FMC_Init+0x110>)
 80008b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	; (800096c <MX_FMC_Init+0x110>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	// SDRAM freq 100MHz = 10ns
	SdramTiming.LoadToActiveDelay = 2; //tMRD = 2CLK
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
	SdramTiming.ExitSelfRefreshDelay = 7; //tXSR = 67ns
 80008c2:	2307      	movs	r3, #7
 80008c4:	61bb      	str	r3, [r7, #24]
	SdramTiming.SelfRefreshTime = 5; //tRAS = 42ns
 80008c6:	2305      	movs	r3, #5
 80008c8:	61fb      	str	r3, [r7, #28]
	SdramTiming.RowCycleDelay = 6; //tRC = 60ns
 80008ca:	2306      	movs	r3, #6
 80008cc:	623b      	str	r3, [r7, #32]
	SdramTiming.WriteRecoveryTime = 2; //tWR = (1CLK+ 7ns) = 17ns
 80008ce:	2302      	movs	r3, #2
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	SdramTiming.RPDelay = 2; //tRP = 18ns
 80008d2:	2302      	movs	r3, #2
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
	SdramTiming.RCDDelay = 2; //tRCD = 18ns
 80008d6:	2302      	movs	r3, #2
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4822      	ldr	r0, [pc, #136]	; (800096c <MX_FMC_Init+0x110>)
 80008e2:	f001 fa67 	bl	8001db4 <HAL_SDRAM_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_FMC_Init+0x94>
		Error_Handler();
 80008ec:	f000 f8ae 	bl	8000a4c <Error_Handler>
#define SDRAM_MODEREG_CAS_LATENCY_3             	((uint16_t)0x0030)
#define SDRAM_MODEREG_OPERATING_MODE_STANDARD   	((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_PROGRAMMED	((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE    	((uint16_t)0x0200)
	// SDRAM Initialization Sequence
	FMC_SDRAM_CommandTypeDef cmd = { 0 };
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80008fc:	2310      	movs	r3, #16
 80008fe:	60bb      	str	r3, [r7, #8]

	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000900:	2301      	movs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0x100);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090a:	4619      	mov	r1, r3
 800090c:	4817      	ldr	r0, [pc, #92]	; (800096c <MX_FMC_Init+0x110>)
 800090e:	f001 fa85 	bl	8001e1c <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fae8 	bl	8000ee8 <HAL_Delay>

	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 8000918:	2302      	movs	r3, #2
 800091a:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0x100);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_FMC_Init+0x110>)
 8000926:	f001 fa79 	bl	8001e1c <HAL_SDRAM_SendCommand>

	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800092a:	2303      	movs	r3, #3
 800092c:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 8;
 800092e:	2308      	movs	r3, #8
 8000930:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0x100);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000938:	4619      	mov	r1, r3
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_FMC_Init+0x110>)
 800093c:	f001 fa6e 	bl	8001e1c <HAL_SDRAM_SendCommand>

	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000940:	2304      	movs	r3, #4
 8000942:	607b      	str	r3, [r7, #4]
	cmd.ModeRegisterDefinition = //
 8000944:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000948:	613b      	str	r3, [r7, #16]
			SDRAM_MODEREG_BURST_LENGTH_1 |
			SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
			SDRAM_MODEREG_CAS_LATENCY_2 |
			SDRAM_MODEREG_OPERATING_MODE_STANDARD |
			SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0x100);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_FMC_Init+0x110>)
 8000954:	f001 fa62 	bl	8001e1c <HAL_SDRAM_SendCommand>

	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1543);
 8000958:	f240 6107 	movw	r1, #1543	; 0x607
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <MX_FMC_Init+0x110>)
 800095e:	f001 fa92 	bl	8001e86 <HAL_SDRAM_ProgramRefreshRate>
	/* USER CODE END FMC_Init 2 */
}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000084 	.word	0x20000084
 8000970:	a0000140 	.word	0xa0000140

08000974 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800097a:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <MX_GPIO_Init+0xd4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <MX_GPIO_Init+0xd4>)
 80009f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_GPIO_Init+0xd4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000ab4:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <HAL_FMC_MspInit+0x104>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d16f      	bne.n	8000b9c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000abc:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <HAL_FMC_MspInit+0x104>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <HAL_FMC_MspInit+0x108>)
 8000ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac6:	4a38      	ldr	r2, [pc, #224]	; (8000ba8 <HAL_FMC_MspInit+0x108>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6393      	str	r3, [r2, #56]	; 0x38
 8000ace:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <HAL_FMC_MspInit+0x108>)
 8000ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000ada:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ade:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aec:	230c      	movs	r3, #12
 8000aee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	482d      	ldr	r0, [pc, #180]	; (8000bac <HAL_FMC_MspInit+0x10c>)
 8000af6:	f000 fb01 	bl	80010fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000afa:	f248 1333 	movw	r3, #33075	; 0x8133
 8000afe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <HAL_FMC_MspInit+0x110>)
 8000b16:	f000 faf1 	bl	80010fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000b1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <HAL_FMC_MspInit+0x114>)
 8000b36:	f000 fae1 	bl	80010fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8000b3a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000b3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <HAL_FMC_MspInit+0x118>)
 8000b56:	f000 fad1 	bl	80010fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b5a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4811      	ldr	r0, [pc, #68]	; (8000bbc <HAL_FMC_MspInit+0x11c>)
 8000b76:	f000 fac1 	bl	80010fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8000b7a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000b7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <HAL_FMC_MspInit+0x120>)
 8000b96:	f000 fab1 	bl	80010fc <HAL_GPIO_Init>
 8000b9a:	e000      	b.n	8000b9e <HAL_FMC_MspInit+0xfe>
    return;
 8000b9c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000b8 	.word	0x200000b8
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40022000 	.word	0x40022000
 8000bbc:	40021400 	.word	0x40021400
 8000bc0:	40021c00 	.word	0x40021c00

08000bc4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000bcc:	f7ff ff68 	bl	8000aa0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f940 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return 1;
 8000c30:	2301      	movs	r3, #1
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_kill>:

int _kill(int pid, int sig)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c46:	f001 fbf7 	bl	8002438 <__errno>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2216      	movs	r2, #22
 8000c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_exit>:

void _exit (int status)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ffe7 	bl	8000c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c6e:	e7fe      	b.n	8000c6e <_exit+0x12>

08000c70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e00a      	b.n	8000c98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c82:	f3af 8000 	nop.w
 8000c86:	4601      	mov	r1, r0
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	b2ca      	uxtb	r2, r1
 8000c90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf0      	blt.n	8000c82 <_read+0x12>
  }

  return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e009      	b.n	8000cd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf1      	blt.n	8000cbc <_write+0x12>
  }
  return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_close>:

int _close(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_isatty>:

int _isatty(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f001 fb5c 	bl	8002438 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20080000 	.word	0x20080000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	200000bc 	.word	0x200000bc
 8000db4:	20000210 	.word	0x20000210

08000db8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f001 fb1b 	bl	8002444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fbe5 	bl	80005dc <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e20:	080031f4 	.word	0x080031f4
  ldr r2, =_sbss
 8000e24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e28:	20000210 	.word	0x20000210

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>

08000e2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e32:	2003      	movs	r0, #3
 8000e34:	f000 f92e 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f000 f805 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3e:	f7ff fe0b 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f93b 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f911 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	200000c0 	.word	0x200000c0

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200000c0 	.word	0x200000c0

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffde 	bl	8000ed0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <__NVIC_SetPriorityGrouping+0x40>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x40>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	05fa0000 	.word	0x05fa0000

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff47 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff5c 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffb0 	bl	8001050 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e175      	b.n	8001408 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 8164 	bne.w	8001402 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_GPIO_Init+0x56>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d017      	beq.n	80011f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80be 	beq.w	8001402 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b66      	ldr	r3, [pc, #408]	; (8001420 <HAL_GPIO_Init+0x324>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a65      	ldr	r2, [pc, #404]	; (8001420 <HAL_GPIO_Init+0x324>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_GPIO_Init+0x324>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800129e:	4a61      	ldr	r2, [pc, #388]	; (8001424 <HAL_GPIO_Init+0x328>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <HAL_GPIO_Init+0x32c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d037      	beq.n	800133a <HAL_GPIO_Init+0x23e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a57      	ldr	r2, [pc, #348]	; (800142c <HAL_GPIO_Init+0x330>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d031      	beq.n	8001336 <HAL_GPIO_Init+0x23a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a56      	ldr	r2, [pc, #344]	; (8001430 <HAL_GPIO_Init+0x334>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d02b      	beq.n	8001332 <HAL_GPIO_Init+0x236>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a55      	ldr	r2, [pc, #340]	; (8001434 <HAL_GPIO_Init+0x338>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d025      	beq.n	800132e <HAL_GPIO_Init+0x232>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_GPIO_Init+0x33c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01f      	beq.n	800132a <HAL_GPIO_Init+0x22e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a53      	ldr	r2, [pc, #332]	; (800143c <HAL_GPIO_Init+0x340>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x22a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_GPIO_Init+0x344>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x226>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a51      	ldr	r2, [pc, #324]	; (8001444 <HAL_GPIO_Init+0x348>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x222>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a50      	ldr	r2, [pc, #320]	; (8001448 <HAL_GPIO_Init+0x34c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x21e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4f      	ldr	r2, [pc, #316]	; (800144c <HAL_GPIO_Init+0x350>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x21a>
 8001312:	2309      	movs	r3, #9
 8001314:	e012      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001316:	230a      	movs	r3, #10
 8001318:	e010      	b.n	800133c <HAL_GPIO_Init+0x240>
 800131a:	2308      	movs	r3, #8
 800131c:	e00e      	b.n	800133c <HAL_GPIO_Init+0x240>
 800131e:	2307      	movs	r3, #7
 8001320:	e00c      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001322:	2306      	movs	r3, #6
 8001324:	e00a      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001326:	2305      	movs	r3, #5
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x240>
 800132a:	2304      	movs	r3, #4
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x240>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x240>
 800133a:	2300      	movs	r3, #0
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	; (8001424 <HAL_GPIO_Init+0x328>)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_GPIO_Init+0x354>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a34      	ldr	r2, [pc, #208]	; (8001450 <HAL_GPIO_Init+0x354>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_GPIO_Init+0x354>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f67f ae86 	bls.w	800111c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40021400 	.word	0x40021400
 8001440:	40021800 	.word	0x40021800
 8001444:	40021c00 	.word	0x40021c00
 8001448:	40022000 	.word	0x40022000
 800144c:	40022400 	.word	0x40022400
 8001450:	40013c00 	.word	0x40013c00

08001454 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_PWREx_EnableOverDrive+0x98>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001482:	f7ff fd25 	bl	8000ed0 <HAL_GetTick>
 8001486:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001488:	e009      	b.n	800149e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800148a:	f7ff fd21 	bl	8000ed0 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001498:	d901      	bls.n	800149e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e022      	b.n	80014e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014aa:	d1ee      	bne.n	800148a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff fd0a 	bl	8000ed0 <HAL_GetTick>
 80014bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014be:	e009      	b.n	80014d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014c0:	f7ff fd06 	bl	8000ed0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ce:	d901      	bls.n	80014d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e007      	b.n	80014e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014e0:	d1ee      	bne.n	80014c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e29b      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8087 	beq.w	8001626 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001518:	4b96      	ldr	r3, [pc, #600]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b04      	cmp	r3, #4
 8001522:	d00c      	beq.n	800153e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001524:	4b93      	ldr	r3, [pc, #588]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b08      	cmp	r3, #8
 800152e:	d112      	bne.n	8001556 <HAL_RCC_OscConfig+0x62>
 8001530:	4b90      	ldr	r3, [pc, #576]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800153c:	d10b      	bne.n	8001556 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153e:	4b8d      	ldr	r3, [pc, #564]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d06c      	beq.n	8001624 <HAL_RCC_OscConfig+0x130>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d168      	bne.n	8001624 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e275      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x7a>
 8001560:	4b84      	ldr	r3, [pc, #528]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a83      	ldr	r2, [pc, #524]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e02e      	b.n	80015cc <HAL_RCC_OscConfig+0xd8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x9c>
 8001576:	4b7f      	ldr	r3, [pc, #508]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7e      	ldr	r2, [pc, #504]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800157c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b7c      	ldr	r3, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7b      	ldr	r2, [pc, #492]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xd8>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0xc0>
 800159a:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a75      	ldr	r2, [pc, #468]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b73      	ldr	r3, [pc, #460]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a72      	ldr	r2, [pc, #456]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xd8>
 80015b4:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6b      	ldr	r2, [pc, #428]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc7c 	bl	8000ed0 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fc78 	bl	8000ed0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e229      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b61      	ldr	r3, [pc, #388]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xe8>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc68 	bl	8000ed0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fc64 	bl	8000ed0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e215      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x110>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d069      	beq.n	8001706 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001632:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163e:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b08      	cmp	r3, #8
 8001648:	d11c      	bne.n	8001684 <HAL_RCC_OscConfig+0x190>
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x17a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1e9      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	493d      	ldr	r1, [pc, #244]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	e040      	b.n	8001706 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d023      	beq.n	80016d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a38      	ldr	r2, [pc, #224]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fc1a 	bl	8000ed0 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff fc16 	bl	8000ed0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1c7      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4b30      	ldr	r3, [pc, #192]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4929      	ldr	r1, [pc, #164]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
 80016d2:	e018      	b.n	8001706 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a26      	ldr	r2, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fbf6 	bl	8000ed0 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fbf2 	bl	8000ed0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1a3      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d038      	beq.n	8001784 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d019      	beq.n	800174e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800171c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fbd3 	bl	8000ed0 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff fbcf 	bl	8000ed0 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e180      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x23a>
 800174c:	e01a      	b.n	8001784 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fbb9 	bl	8000ed0 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff fbb5 	bl	8000ed0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d903      	bls.n	8001778 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e166      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
 8001774:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1ee      	bne.n	8001762 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a4 	beq.w	80018da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001792:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b89      	ldr	r3, [pc, #548]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a88      	ldr	r2, [pc, #544]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b86      	ldr	r3, [pc, #536]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ba:	4b83      	ldr	r3, [pc, #524]	; (80019c8 <HAL_RCC_OscConfig+0x4d4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017c6:	4b80      	ldr	r3, [pc, #512]	; (80019c8 <HAL_RCC_OscConfig+0x4d4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7f      	ldr	r2, [pc, #508]	; (80019c8 <HAL_RCC_OscConfig+0x4d4>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fb7d 	bl	8000ed0 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff fb79 	bl	8000ed0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e12a      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ec:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x4d4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x31a>
 8001800:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001804:	4a6f      	ldr	r2, [pc, #444]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6713      	str	r3, [r2, #112]	; 0x70
 800180c:	e02d      	b.n	800186a <HAL_RCC_OscConfig+0x376>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x33c>
 8001816:	4b6b      	ldr	r3, [pc, #428]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a6a      	ldr	r2, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	4a67      	ldr	r2, [pc, #412]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6713      	str	r3, [r2, #112]	; 0x70
 800182e:	e01c      	b.n	800186a <HAL_RCC_OscConfig+0x376>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d10c      	bne.n	8001852 <HAL_RCC_OscConfig+0x35e>
 8001838:	4b62      	ldr	r3, [pc, #392]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a61      	ldr	r2, [pc, #388]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a5e      	ldr	r2, [pc, #376]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
 8001850:	e00b      	b.n	800186a <HAL_RCC_OscConfig+0x376>
 8001852:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	4a5b      	ldr	r2, [pc, #364]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6713      	str	r3, [r2, #112]	; 0x70
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001862:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d015      	beq.n	800189e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff fb2d 	bl	8000ed0 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff fb29 	bl	8000ed0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0d8      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ee      	beq.n	800187a <HAL_RCC_OscConfig+0x386>
 800189c:	e014      	b.n	80018c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff fb17 	bl	8000ed0 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff fb13 	bl	8000ed0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0c2      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ee      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d105      	bne.n	80018da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ce:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a3c      	ldr	r2, [pc, #240]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80018d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80ae 	beq.w	8001a40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e4:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d06d      	beq.n	80019cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d14b      	bne.n	8001990 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fae4 	bl	8000ed0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fae0 	bl	8000ed0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e091      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	3b01      	subs	r3, #1
 8001944:	041b      	lsls	r3, r3, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	071b      	lsls	r3, r3, #28
 8001956:	491b      	ldr	r1, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fab2 	bl	8000ed0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff faae 	bl	8000ed0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e05f      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x47c>
 800198e:	e057      	b.n	8001a40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 8001996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fa98 	bl	8000ed0 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff fa94 	bl	8000ed0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e045      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_OscConfig+0x4d0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4b0>
 80019c2:	e03d      	b.n	8001a40 <HAL_RCC_OscConfig+0x54c>
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_RCC_OscConfig+0x558>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d030      	beq.n	8001a3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d129      	bne.n	8001a3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d122      	bne.n	8001a3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d119      	bne.n	8001a3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	3b01      	subs	r3, #1
 8001a16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d10f      	bne.n	8001a3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800

08001a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0d0      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d910      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 020f 	bic.w	r2, r3, #15
 8001a7e:	4965      	ldr	r1, [pc, #404]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0b8      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a58      	ldr	r2, [pc, #352]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ace:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	494d      	ldr	r1, [pc, #308]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d040      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d115      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e07f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e073      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e06b      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4936      	ldr	r1, [pc, #216]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b44:	f7ff f9c4 	bl	8000ed0 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff f9c0 	bl	8000ed0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e053      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 020c 	and.w	r2, r3, #12
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1eb      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d210      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 020f 	bic.w	r2, r3, #15
 8001b8a:	4922      	ldr	r1, [pc, #136]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e032      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4916      	ldr	r1, [pc, #88]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	490e      	ldr	r1, [pc, #56]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001be2:	f000 f821 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	490a      	ldr	r1, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x1cc>)
 8001bf4:	5ccb      	ldrb	r3, [r1, r3]
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1d0>)
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1d4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f920 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	080030f4 	.word	0x080030f4
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c2c:	b090      	sub	sp, #64	; 0x40
 8001c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
 8001c34:	2300      	movs	r3, #0
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c38:	2300      	movs	r3, #0
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d00d      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	f200 80a1 	bhi.w	8001d94 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x34>
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5a:	e09b      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_GetSysClockFreq+0x184>)
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c60:	e09b      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c62:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c66:	e098      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c68:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d028      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	2200      	movs	r2, #0
 8001c86:	623b      	str	r3, [r7, #32]
 8001c88:	627a      	str	r2, [r7, #36]	; 0x24
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c90:	2100      	movs	r1, #0
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c94:	fb03 f201 	mul.w	r2, r3, r1
 8001c98:	2300      	movs	r3, #0
 8001c9a:	fb00 f303 	mul.w	r3, r0, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a43      	ldr	r2, [pc, #268]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ca8:	460a      	mov	r2, r1
 8001caa:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cae:	4413      	add	r3, r2
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	61fa      	str	r2, [r7, #28]
 8001cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cc2:	f7fe fb0d 	bl	80002e0 <__aeabi_uldivmod>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cce:	e053      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd0:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	617a      	str	r2, [r7, #20]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ce2:	f04f 0b00 	mov.w	fp, #0
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	465b      	mov	r3, fp
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	0159      	lsls	r1, r3, #5
 8001cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf8:	0150      	lsls	r0, r2, #5
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	ebb2 080a 	subs.w	r8, r2, sl
 8001d02:	eb63 090b 	sbc.w	r9, r3, fp
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d1a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d1e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	00eb      	lsls	r3, r5, #3
 8001d2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d30:	00e2      	lsls	r2, r4, #3
 8001d32:	4614      	mov	r4, r2
 8001d34:	461d      	mov	r5, r3
 8001d36:	eb14 030a 	adds.w	r3, r4, sl
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	eb45 030b 	adc.w	r3, r5, fp
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4e:	4629      	mov	r1, r5
 8001d50:	028b      	lsls	r3, r1, #10
 8001d52:	4621      	mov	r1, r4
 8001d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d58:	4621      	mov	r1, r4
 8001d5a:	028a      	lsls	r2, r1, #10
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d62:	2200      	movs	r2, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	60fa      	str	r2, [r7, #12]
 8001d68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d6c:	f7fe fab8 	bl	80002e0 <__aeabi_uldivmod>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4613      	mov	r3, r2
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d92:	e002      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_GetSysClockFreq+0x184>)
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3740      	adds	r7, #64	; 0x40
 8001da0:	46bd      	mov	sp, r7
 8001da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	017d7840 	.word	0x017d7840

08001db4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e025      	b.n	8001e14 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7fe fef1 	bl	8000bc4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3304      	adds	r3, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4610      	mov	r0, r2
 8001df6:	f000 f86f 	bl	8001ed8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	461a      	mov	r2, r3
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	f000 f8c3 	bl	8001f90 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e2e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d101      	bne.n	8001e3a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
 8001e38:	e021      	b.n	8001e7e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d002      	beq.n	8001e46 <HAL_SDRAM_SendCommand+0x2a>
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d118      	bne.n	8001e78 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f904 	bl	8002064 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d104      	bne.n	8001e6e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2205      	movs	r2, #5
 8001e68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e6c:	e006      	b.n	8001e7c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e76:	e001      	b.n	8001e7c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e016      	b.n	8001ece <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d10f      	bne.n	8001ecc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f8f6 	bl	80020ac <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e000      	b.n	8001ece <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d121      	bne.n	8001f2e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <FMC_SDRAM_Init+0xb4>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	6851      	ldr	r1, [r2, #4]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6892      	ldr	r2, [r2, #8]
 8001efa:	4311      	orrs	r1, r2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	68d2      	ldr	r2, [r2, #12]
 8001f00:	4311      	orrs	r1, r2
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	6912      	ldr	r2, [r2, #16]
 8001f06:	4311      	orrs	r1, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	6952      	ldr	r2, [r2, #20]
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	6992      	ldr	r2, [r2, #24]
 8001f12:	4311      	orrs	r1, r2
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	69d2      	ldr	r2, [r2, #28]
 8001f18:	4311      	orrs	r1, r2
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6a12      	ldr	r2, [r2, #32]
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f24:	430a      	orrs	r2, r1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e026      	b.n	8001f7c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	69d9      	ldr	r1, [r3, #28]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4319      	orrs	r1, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	430b      	orrs	r3, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <FMC_SDRAM_Init+0xb4>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	6851      	ldr	r1, [r2, #4]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6892      	ldr	r2, [r2, #8]
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	6912      	ldr	r2, [r2, #16]
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	6952      	ldr	r2, [r2, #20]
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	6992      	ldr	r2, [r2, #24]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	ffff8000 	.word	0xffff8000

08001f90 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d128      	bne.n	8001ff4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1e59      	subs	r1, r3, #1
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4319      	orrs	r1, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	4319      	orrs	r1, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	031b      	lsls	r3, r3, #12
 8001fcc:	4319      	orrs	r1, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4319      	orrs	r1, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	051b      	lsls	r3, r3, #20
 8001fe0:	4319      	orrs	r1, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	430b      	orrs	r3, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	e02d      	b.n	8002050 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <FMC_SDRAM_Timing_Init+0xd0>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	68d2      	ldr	r2, [r2, #12]
 8002000:	3a01      	subs	r2, #1
 8002002:	0311      	lsls	r1, r2, #12
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	6952      	ldr	r2, [r2, #20]
 8002008:	3a01      	subs	r2, #1
 800200a:	0512      	lsls	r2, r2, #20
 800200c:	430a      	orrs	r2, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	1e59      	subs	r1, r3, #1
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4319      	orrs	r1, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	3b01      	subs	r3, #1
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	4319      	orrs	r1, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	3b01      	subs	r3, #1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	4319      	orrs	r1, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	3b01      	subs	r3, #1
 8002046:	061b      	lsls	r3, r3, #24
 8002048:	430b      	orrs	r3, r1
 800204a:	431a      	orrs	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	ff0f0fff 	.word	0xff0f0fff

08002064 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <FMC_SDRAM_SendCommand+0x44>)
 8002076:	4013      	ands	r3, r2
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	6811      	ldr	r1, [r2, #0]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	6852      	ldr	r2, [r2, #4]
 8002080:	4311      	orrs	r1, r2
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	6892      	ldr	r2, [r2, #8]
 8002086:	3a01      	subs	r2, #1
 8002088:	0152      	lsls	r2, r2, #5
 800208a:	4311      	orrs	r1, r2
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	68d2      	ldr	r2, [r2, #12]
 8002090:	0252      	lsls	r2, r2, #9
 8002092:	430a      	orrs	r2, r1
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	ffc00000 	.word	0xffc00000

080020ac <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80020bc:	4013      	ands	r3, r2
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	ffffc001 	.word	0xffffc001

080020dc <srand>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <srand+0x44>)
 80020e0:	681d      	ldr	r5, [r3, #0]
 80020e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020e4:	4604      	mov	r4, r0
 80020e6:	b9b3      	cbnz	r3, 8002116 <srand+0x3a>
 80020e8:	2018      	movs	r0, #24
 80020ea:	f000 fa3b 	bl	8002564 <malloc>
 80020ee:	4602      	mov	r2, r0
 80020f0:	6328      	str	r0, [r5, #48]	; 0x30
 80020f2:	b920      	cbnz	r0, 80020fe <srand+0x22>
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <srand+0x48>)
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <srand+0x4c>)
 80020f8:	2146      	movs	r1, #70	; 0x46
 80020fa:	f000 f9c9 	bl	8002490 <__assert_func>
 80020fe:	490b      	ldr	r1, [pc, #44]	; (800212c <srand+0x50>)
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <srand+0x54>)
 8002102:	e9c0 1300 	strd	r1, r3, [r0]
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <srand+0x58>)
 8002108:	6083      	str	r3, [r0, #8]
 800210a:	230b      	movs	r3, #11
 800210c:	8183      	strh	r3, [r0, #12]
 800210e:	2100      	movs	r1, #0
 8002110:	2001      	movs	r0, #1
 8002112:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002116:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002118:	2200      	movs	r2, #0
 800211a:	611c      	str	r4, [r3, #16]
 800211c:	615a      	str	r2, [r3, #20]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	20000064 	.word	0x20000064
 8002124:	08003104 	.word	0x08003104
 8002128:	0800311b 	.word	0x0800311b
 800212c:	abcd330e 	.word	0xabcd330e
 8002130:	e66d1234 	.word	0xe66d1234
 8002134:	0005deec 	.word	0x0005deec

08002138 <rand>:
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <rand+0x5c>)
 800213a:	b510      	push	{r4, lr}
 800213c:	681c      	ldr	r4, [r3, #0]
 800213e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002140:	b9b3      	cbnz	r3, 8002170 <rand+0x38>
 8002142:	2018      	movs	r0, #24
 8002144:	f000 fa0e 	bl	8002564 <malloc>
 8002148:	4602      	mov	r2, r0
 800214a:	6320      	str	r0, [r4, #48]	; 0x30
 800214c:	b920      	cbnz	r0, 8002158 <rand+0x20>
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <rand+0x60>)
 8002150:	4812      	ldr	r0, [pc, #72]	; (800219c <rand+0x64>)
 8002152:	2152      	movs	r1, #82	; 0x52
 8002154:	f000 f99c 	bl	8002490 <__assert_func>
 8002158:	4911      	ldr	r1, [pc, #68]	; (80021a0 <rand+0x68>)
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <rand+0x6c>)
 800215c:	e9c0 1300 	strd	r1, r3, [r0]
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <rand+0x70>)
 8002162:	6083      	str	r3, [r0, #8]
 8002164:	230b      	movs	r3, #11
 8002166:	8183      	strh	r3, [r0, #12]
 8002168:	2100      	movs	r1, #0
 800216a:	2001      	movs	r0, #1
 800216c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002170:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002172:	480e      	ldr	r0, [pc, #56]	; (80021ac <rand+0x74>)
 8002174:	690b      	ldr	r3, [r1, #16]
 8002176:	694c      	ldr	r4, [r1, #20]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <rand+0x78>)
 800217a:	4358      	muls	r0, r3
 800217c:	fb02 0004 	mla	r0, r2, r4, r0
 8002180:	fba3 3202 	umull	r3, r2, r3, r2
 8002184:	3301      	adds	r3, #1
 8002186:	eb40 0002 	adc.w	r0, r0, r2
 800218a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800218e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002192:	bd10      	pop	{r4, pc}
 8002194:	20000064 	.word	0x20000064
 8002198:	08003104 	.word	0x08003104
 800219c:	0800311b 	.word	0x0800311b
 80021a0:	abcd330e 	.word	0xabcd330e
 80021a4:	e66d1234 	.word	0xe66d1234
 80021a8:	0005deec 	.word	0x0005deec
 80021ac:	5851f42d 	.word	0x5851f42d
 80021b0:	4c957f2d 	.word	0x4c957f2d

080021b4 <std>:
 80021b4:	2300      	movs	r3, #0
 80021b6:	b510      	push	{r4, lr}
 80021b8:	4604      	mov	r4, r0
 80021ba:	e9c0 3300 	strd	r3, r3, [r0]
 80021be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021c2:	6083      	str	r3, [r0, #8]
 80021c4:	8181      	strh	r1, [r0, #12]
 80021c6:	6643      	str	r3, [r0, #100]	; 0x64
 80021c8:	81c2      	strh	r2, [r0, #14]
 80021ca:	6183      	str	r3, [r0, #24]
 80021cc:	4619      	mov	r1, r3
 80021ce:	2208      	movs	r2, #8
 80021d0:	305c      	adds	r0, #92	; 0x5c
 80021d2:	f000 f8e2 	bl	800239a <memset>
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <std+0x38>)
 80021d8:	6263      	str	r3, [r4, #36]	; 0x24
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <std+0x3c>)
 80021dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <std+0x40>)
 80021e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <std+0x44>)
 80021e4:	6224      	str	r4, [r4, #32]
 80021e6:	6323      	str	r3, [r4, #48]	; 0x30
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	bf00      	nop
 80021ec:	08002315 	.word	0x08002315
 80021f0:	08002337 	.word	0x08002337
 80021f4:	0800236f 	.word	0x0800236f
 80021f8:	08002393 	.word	0x08002393

080021fc <stdio_exit_handler>:
 80021fc:	4a02      	ldr	r2, [pc, #8]	; (8002208 <stdio_exit_handler+0xc>)
 80021fe:	4903      	ldr	r1, [pc, #12]	; (800220c <stdio_exit_handler+0x10>)
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <stdio_exit_handler+0x14>)
 8002202:	f000 b869 	b.w	80022d8 <_fwalk_sglue>
 8002206:	bf00      	nop
 8002208:	2000000c 	.word	0x2000000c
 800220c:	080027d9 	.word	0x080027d9
 8002210:	20000018 	.word	0x20000018

08002214 <cleanup_stdio>:
 8002214:	6841      	ldr	r1, [r0, #4]
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <cleanup_stdio+0x34>)
 8002218:	4299      	cmp	r1, r3
 800221a:	b510      	push	{r4, lr}
 800221c:	4604      	mov	r4, r0
 800221e:	d001      	beq.n	8002224 <cleanup_stdio+0x10>
 8002220:	f000 fada 	bl	80027d8 <_fflush_r>
 8002224:	68a1      	ldr	r1, [r4, #8]
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <cleanup_stdio+0x38>)
 8002228:	4299      	cmp	r1, r3
 800222a:	d002      	beq.n	8002232 <cleanup_stdio+0x1e>
 800222c:	4620      	mov	r0, r4
 800222e:	f000 fad3 	bl	80027d8 <_fflush_r>
 8002232:	68e1      	ldr	r1, [r4, #12]
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <cleanup_stdio+0x3c>)
 8002236:	4299      	cmp	r1, r3
 8002238:	d004      	beq.n	8002244 <cleanup_stdio+0x30>
 800223a:	4620      	mov	r0, r4
 800223c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002240:	f000 baca 	b.w	80027d8 <_fflush_r>
 8002244:	bd10      	pop	{r4, pc}
 8002246:	bf00      	nop
 8002248:	200000c4 	.word	0x200000c4
 800224c:	2000012c 	.word	0x2000012c
 8002250:	20000194 	.word	0x20000194

08002254 <global_stdio_init.part.0>:
 8002254:	b510      	push	{r4, lr}
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <global_stdio_init.part.0+0x30>)
 8002258:	4c0b      	ldr	r4, [pc, #44]	; (8002288 <global_stdio_init.part.0+0x34>)
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <global_stdio_init.part.0+0x38>)
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	4620      	mov	r0, r4
 8002260:	2200      	movs	r2, #0
 8002262:	2104      	movs	r1, #4
 8002264:	f7ff ffa6 	bl	80021b4 <std>
 8002268:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800226c:	2201      	movs	r2, #1
 800226e:	2109      	movs	r1, #9
 8002270:	f7ff ffa0 	bl	80021b4 <std>
 8002274:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002278:	2202      	movs	r2, #2
 800227a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800227e:	2112      	movs	r1, #18
 8002280:	f7ff bf98 	b.w	80021b4 <std>
 8002284:	200001fc 	.word	0x200001fc
 8002288:	200000c4 	.word	0x200000c4
 800228c:	080021fd 	.word	0x080021fd

08002290 <__sfp_lock_acquire>:
 8002290:	4801      	ldr	r0, [pc, #4]	; (8002298 <__sfp_lock_acquire+0x8>)
 8002292:	f000 b8fb 	b.w	800248c <__retarget_lock_acquire_recursive>
 8002296:	bf00      	nop
 8002298:	20000205 	.word	0x20000205

0800229c <__sfp_lock_release>:
 800229c:	4801      	ldr	r0, [pc, #4]	; (80022a4 <__sfp_lock_release+0x8>)
 800229e:	f000 b8f6 	b.w	800248e <__retarget_lock_release_recursive>
 80022a2:	bf00      	nop
 80022a4:	20000205 	.word	0x20000205

080022a8 <__sinit>:
 80022a8:	b510      	push	{r4, lr}
 80022aa:	4604      	mov	r4, r0
 80022ac:	f7ff fff0 	bl	8002290 <__sfp_lock_acquire>
 80022b0:	6a23      	ldr	r3, [r4, #32]
 80022b2:	b11b      	cbz	r3, 80022bc <__sinit+0x14>
 80022b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022b8:	f7ff bff0 	b.w	800229c <__sfp_lock_release>
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__sinit+0x28>)
 80022be:	6223      	str	r3, [r4, #32]
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__sinit+0x2c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f5      	bne.n	80022b4 <__sinit+0xc>
 80022c8:	f7ff ffc4 	bl	8002254 <global_stdio_init.part.0>
 80022cc:	e7f2      	b.n	80022b4 <__sinit+0xc>
 80022ce:	bf00      	nop
 80022d0:	08002215 	.word	0x08002215
 80022d4:	200001fc 	.word	0x200001fc

080022d8 <_fwalk_sglue>:
 80022d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022dc:	4607      	mov	r7, r0
 80022de:	4688      	mov	r8, r1
 80022e0:	4614      	mov	r4, r2
 80022e2:	2600      	movs	r6, #0
 80022e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022e8:	f1b9 0901 	subs.w	r9, r9, #1
 80022ec:	d505      	bpl.n	80022fa <_fwalk_sglue+0x22>
 80022ee:	6824      	ldr	r4, [r4, #0]
 80022f0:	2c00      	cmp	r4, #0
 80022f2:	d1f7      	bne.n	80022e4 <_fwalk_sglue+0xc>
 80022f4:	4630      	mov	r0, r6
 80022f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022fa:	89ab      	ldrh	r3, [r5, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d907      	bls.n	8002310 <_fwalk_sglue+0x38>
 8002300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002304:	3301      	adds	r3, #1
 8002306:	d003      	beq.n	8002310 <_fwalk_sglue+0x38>
 8002308:	4629      	mov	r1, r5
 800230a:	4638      	mov	r0, r7
 800230c:	47c0      	blx	r8
 800230e:	4306      	orrs	r6, r0
 8002310:	3568      	adds	r5, #104	; 0x68
 8002312:	e7e9      	b.n	80022e8 <_fwalk_sglue+0x10>

08002314 <__sread>:
 8002314:	b510      	push	{r4, lr}
 8002316:	460c      	mov	r4, r1
 8002318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800231c:	f000 f868 	bl	80023f0 <_read_r>
 8002320:	2800      	cmp	r0, #0
 8002322:	bfab      	itete	ge
 8002324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002326:	89a3      	ldrhlt	r3, [r4, #12]
 8002328:	181b      	addge	r3, r3, r0
 800232a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800232e:	bfac      	ite	ge
 8002330:	6563      	strge	r3, [r4, #84]	; 0x54
 8002332:	81a3      	strhlt	r3, [r4, #12]
 8002334:	bd10      	pop	{r4, pc}

08002336 <__swrite>:
 8002336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800233a:	461f      	mov	r7, r3
 800233c:	898b      	ldrh	r3, [r1, #12]
 800233e:	05db      	lsls	r3, r3, #23
 8002340:	4605      	mov	r5, r0
 8002342:	460c      	mov	r4, r1
 8002344:	4616      	mov	r6, r2
 8002346:	d505      	bpl.n	8002354 <__swrite+0x1e>
 8002348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800234c:	2302      	movs	r3, #2
 800234e:	2200      	movs	r2, #0
 8002350:	f000 f83c 	bl	80023cc <_lseek_r>
 8002354:	89a3      	ldrh	r3, [r4, #12]
 8002356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800235a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800235e:	81a3      	strh	r3, [r4, #12]
 8002360:	4632      	mov	r2, r6
 8002362:	463b      	mov	r3, r7
 8002364:	4628      	mov	r0, r5
 8002366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800236a:	f000 b853 	b.w	8002414 <_write_r>

0800236e <__sseek>:
 800236e:	b510      	push	{r4, lr}
 8002370:	460c      	mov	r4, r1
 8002372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002376:	f000 f829 	bl	80023cc <_lseek_r>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	bf15      	itete	ne
 8002380:	6560      	strne	r0, [r4, #84]	; 0x54
 8002382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800238a:	81a3      	strheq	r3, [r4, #12]
 800238c:	bf18      	it	ne
 800238e:	81a3      	strhne	r3, [r4, #12]
 8002390:	bd10      	pop	{r4, pc}

08002392 <__sclose>:
 8002392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002396:	f000 b809 	b.w	80023ac <_close_r>

0800239a <memset>:
 800239a:	4402      	add	r2, r0
 800239c:	4603      	mov	r3, r0
 800239e:	4293      	cmp	r3, r2
 80023a0:	d100      	bne.n	80023a4 <memset+0xa>
 80023a2:	4770      	bx	lr
 80023a4:	f803 1b01 	strb.w	r1, [r3], #1
 80023a8:	e7f9      	b.n	800239e <memset+0x4>
	...

080023ac <_close_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4d06      	ldr	r5, [pc, #24]	; (80023c8 <_close_r+0x1c>)
 80023b0:	2300      	movs	r3, #0
 80023b2:	4604      	mov	r4, r0
 80023b4:	4608      	mov	r0, r1
 80023b6:	602b      	str	r3, [r5, #0]
 80023b8:	f7fe fc93 	bl	8000ce2 <_close>
 80023bc:	1c43      	adds	r3, r0, #1
 80023be:	d102      	bne.n	80023c6 <_close_r+0x1a>
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	b103      	cbz	r3, 80023c6 <_close_r+0x1a>
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	bd38      	pop	{r3, r4, r5, pc}
 80023c8:	20000200 	.word	0x20000200

080023cc <_lseek_r>:
 80023cc:	b538      	push	{r3, r4, r5, lr}
 80023ce:	4d07      	ldr	r5, [pc, #28]	; (80023ec <_lseek_r+0x20>)
 80023d0:	4604      	mov	r4, r0
 80023d2:	4608      	mov	r0, r1
 80023d4:	4611      	mov	r1, r2
 80023d6:	2200      	movs	r2, #0
 80023d8:	602a      	str	r2, [r5, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	f7fe fca8 	bl	8000d30 <_lseek>
 80023e0:	1c43      	adds	r3, r0, #1
 80023e2:	d102      	bne.n	80023ea <_lseek_r+0x1e>
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	b103      	cbz	r3, 80023ea <_lseek_r+0x1e>
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	bd38      	pop	{r3, r4, r5, pc}
 80023ec:	20000200 	.word	0x20000200

080023f0 <_read_r>:
 80023f0:	b538      	push	{r3, r4, r5, lr}
 80023f2:	4d07      	ldr	r5, [pc, #28]	; (8002410 <_read_r+0x20>)
 80023f4:	4604      	mov	r4, r0
 80023f6:	4608      	mov	r0, r1
 80023f8:	4611      	mov	r1, r2
 80023fa:	2200      	movs	r2, #0
 80023fc:	602a      	str	r2, [r5, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	f7fe fc36 	bl	8000c70 <_read>
 8002404:	1c43      	adds	r3, r0, #1
 8002406:	d102      	bne.n	800240e <_read_r+0x1e>
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	b103      	cbz	r3, 800240e <_read_r+0x1e>
 800240c:	6023      	str	r3, [r4, #0]
 800240e:	bd38      	pop	{r3, r4, r5, pc}
 8002410:	20000200 	.word	0x20000200

08002414 <_write_r>:
 8002414:	b538      	push	{r3, r4, r5, lr}
 8002416:	4d07      	ldr	r5, [pc, #28]	; (8002434 <_write_r+0x20>)
 8002418:	4604      	mov	r4, r0
 800241a:	4608      	mov	r0, r1
 800241c:	4611      	mov	r1, r2
 800241e:	2200      	movs	r2, #0
 8002420:	602a      	str	r2, [r5, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	f7fe fc41 	bl	8000caa <_write>
 8002428:	1c43      	adds	r3, r0, #1
 800242a:	d102      	bne.n	8002432 <_write_r+0x1e>
 800242c:	682b      	ldr	r3, [r5, #0]
 800242e:	b103      	cbz	r3, 8002432 <_write_r+0x1e>
 8002430:	6023      	str	r3, [r4, #0]
 8002432:	bd38      	pop	{r3, r4, r5, pc}
 8002434:	20000200 	.word	0x20000200

08002438 <__errno>:
 8002438:	4b01      	ldr	r3, [pc, #4]	; (8002440 <__errno+0x8>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000064 	.word	0x20000064

08002444 <__libc_init_array>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	4d0d      	ldr	r5, [pc, #52]	; (800247c <__libc_init_array+0x38>)
 8002448:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <__libc_init_array+0x3c>)
 800244a:	1b64      	subs	r4, r4, r5
 800244c:	10a4      	asrs	r4, r4, #2
 800244e:	2600      	movs	r6, #0
 8002450:	42a6      	cmp	r6, r4
 8002452:	d109      	bne.n	8002468 <__libc_init_array+0x24>
 8002454:	4d0b      	ldr	r5, [pc, #44]	; (8002484 <__libc_init_array+0x40>)
 8002456:	4c0c      	ldr	r4, [pc, #48]	; (8002488 <__libc_init_array+0x44>)
 8002458:	f000 fe40 	bl	80030dc <_init>
 800245c:	1b64      	subs	r4, r4, r5
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	2600      	movs	r6, #0
 8002462:	42a6      	cmp	r6, r4
 8002464:	d105      	bne.n	8002472 <__libc_init_array+0x2e>
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	f855 3b04 	ldr.w	r3, [r5], #4
 800246c:	4798      	blx	r3
 800246e:	3601      	adds	r6, #1
 8002470:	e7ee      	b.n	8002450 <__libc_init_array+0xc>
 8002472:	f855 3b04 	ldr.w	r3, [r5], #4
 8002476:	4798      	blx	r3
 8002478:	3601      	adds	r6, #1
 800247a:	e7f2      	b.n	8002462 <__libc_init_array+0x1e>
 800247c:	080031ec 	.word	0x080031ec
 8002480:	080031ec 	.word	0x080031ec
 8002484:	080031ec 	.word	0x080031ec
 8002488:	080031f0 	.word	0x080031f0

0800248c <__retarget_lock_acquire_recursive>:
 800248c:	4770      	bx	lr

0800248e <__retarget_lock_release_recursive>:
 800248e:	4770      	bx	lr

08002490 <__assert_func>:
 8002490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002492:	4614      	mov	r4, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <__assert_func+0x2c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4605      	mov	r5, r0
 800249c:	68d8      	ldr	r0, [r3, #12]
 800249e:	b14c      	cbz	r4, 80024b4 <__assert_func+0x24>
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <__assert_func+0x30>)
 80024a2:	9100      	str	r1, [sp, #0]
 80024a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <__assert_func+0x34>)
 80024aa:	462b      	mov	r3, r5
 80024ac:	f000 f9bc 	bl	8002828 <fiprintf>
 80024b0:	f000 f9dc 	bl	800286c <abort>
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__assert_func+0x38>)
 80024b6:	461c      	mov	r4, r3
 80024b8:	e7f3      	b.n	80024a2 <__assert_func+0x12>
 80024ba:	bf00      	nop
 80024bc:	20000064 	.word	0x20000064
 80024c0:	08003173 	.word	0x08003173
 80024c4:	08003180 	.word	0x08003180
 80024c8:	080031ae 	.word	0x080031ae

080024cc <_free_r>:
 80024cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024ce:	2900      	cmp	r1, #0
 80024d0:	d044      	beq.n	800255c <_free_r+0x90>
 80024d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d6:	9001      	str	r0, [sp, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f1a1 0404 	sub.w	r4, r1, #4
 80024de:	bfb8      	it	lt
 80024e0:	18e4      	addlt	r4, r4, r3
 80024e2:	f000 f8e7 	bl	80026b4 <__malloc_lock>
 80024e6:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <_free_r+0x94>)
 80024e8:	9801      	ldr	r0, [sp, #4]
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	b933      	cbnz	r3, 80024fc <_free_r+0x30>
 80024ee:	6063      	str	r3, [r4, #4]
 80024f0:	6014      	str	r4, [r2, #0]
 80024f2:	b003      	add	sp, #12
 80024f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024f8:	f000 b8e2 	b.w	80026c0 <__malloc_unlock>
 80024fc:	42a3      	cmp	r3, r4
 80024fe:	d908      	bls.n	8002512 <_free_r+0x46>
 8002500:	6825      	ldr	r5, [r4, #0]
 8002502:	1961      	adds	r1, r4, r5
 8002504:	428b      	cmp	r3, r1
 8002506:	bf01      	itttt	eq
 8002508:	6819      	ldreq	r1, [r3, #0]
 800250a:	685b      	ldreq	r3, [r3, #4]
 800250c:	1949      	addeq	r1, r1, r5
 800250e:	6021      	streq	r1, [r4, #0]
 8002510:	e7ed      	b.n	80024ee <_free_r+0x22>
 8002512:	461a      	mov	r2, r3
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	b10b      	cbz	r3, 800251c <_free_r+0x50>
 8002518:	42a3      	cmp	r3, r4
 800251a:	d9fa      	bls.n	8002512 <_free_r+0x46>
 800251c:	6811      	ldr	r1, [r2, #0]
 800251e:	1855      	adds	r5, r2, r1
 8002520:	42a5      	cmp	r5, r4
 8002522:	d10b      	bne.n	800253c <_free_r+0x70>
 8002524:	6824      	ldr	r4, [r4, #0]
 8002526:	4421      	add	r1, r4
 8002528:	1854      	adds	r4, r2, r1
 800252a:	42a3      	cmp	r3, r4
 800252c:	6011      	str	r1, [r2, #0]
 800252e:	d1e0      	bne.n	80024f2 <_free_r+0x26>
 8002530:	681c      	ldr	r4, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	6053      	str	r3, [r2, #4]
 8002536:	440c      	add	r4, r1
 8002538:	6014      	str	r4, [r2, #0]
 800253a:	e7da      	b.n	80024f2 <_free_r+0x26>
 800253c:	d902      	bls.n	8002544 <_free_r+0x78>
 800253e:	230c      	movs	r3, #12
 8002540:	6003      	str	r3, [r0, #0]
 8002542:	e7d6      	b.n	80024f2 <_free_r+0x26>
 8002544:	6825      	ldr	r5, [r4, #0]
 8002546:	1961      	adds	r1, r4, r5
 8002548:	428b      	cmp	r3, r1
 800254a:	bf04      	itt	eq
 800254c:	6819      	ldreq	r1, [r3, #0]
 800254e:	685b      	ldreq	r3, [r3, #4]
 8002550:	6063      	str	r3, [r4, #4]
 8002552:	bf04      	itt	eq
 8002554:	1949      	addeq	r1, r1, r5
 8002556:	6021      	streq	r1, [r4, #0]
 8002558:	6054      	str	r4, [r2, #4]
 800255a:	e7ca      	b.n	80024f2 <_free_r+0x26>
 800255c:	b003      	add	sp, #12
 800255e:	bd30      	pop	{r4, r5, pc}
 8002560:	20000208 	.word	0x20000208

08002564 <malloc>:
 8002564:	4b02      	ldr	r3, [pc, #8]	; (8002570 <malloc+0xc>)
 8002566:	4601      	mov	r1, r0
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	f000 b823 	b.w	80025b4 <_malloc_r>
 800256e:	bf00      	nop
 8002570:	20000064 	.word	0x20000064

08002574 <sbrk_aligned>:
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	4e0e      	ldr	r6, [pc, #56]	; (80025b0 <sbrk_aligned+0x3c>)
 8002578:	460c      	mov	r4, r1
 800257a:	6831      	ldr	r1, [r6, #0]
 800257c:	4605      	mov	r5, r0
 800257e:	b911      	cbnz	r1, 8002586 <sbrk_aligned+0x12>
 8002580:	f000 f964 	bl	800284c <_sbrk_r>
 8002584:	6030      	str	r0, [r6, #0]
 8002586:	4621      	mov	r1, r4
 8002588:	4628      	mov	r0, r5
 800258a:	f000 f95f 	bl	800284c <_sbrk_r>
 800258e:	1c43      	adds	r3, r0, #1
 8002590:	d00a      	beq.n	80025a8 <sbrk_aligned+0x34>
 8002592:	1cc4      	adds	r4, r0, #3
 8002594:	f024 0403 	bic.w	r4, r4, #3
 8002598:	42a0      	cmp	r0, r4
 800259a:	d007      	beq.n	80025ac <sbrk_aligned+0x38>
 800259c:	1a21      	subs	r1, r4, r0
 800259e:	4628      	mov	r0, r5
 80025a0:	f000 f954 	bl	800284c <_sbrk_r>
 80025a4:	3001      	adds	r0, #1
 80025a6:	d101      	bne.n	80025ac <sbrk_aligned+0x38>
 80025a8:	f04f 34ff 	mov.w	r4, #4294967295
 80025ac:	4620      	mov	r0, r4
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
 80025b0:	2000020c 	.word	0x2000020c

080025b4 <_malloc_r>:
 80025b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025b8:	1ccd      	adds	r5, r1, #3
 80025ba:	f025 0503 	bic.w	r5, r5, #3
 80025be:	3508      	adds	r5, #8
 80025c0:	2d0c      	cmp	r5, #12
 80025c2:	bf38      	it	cc
 80025c4:	250c      	movcc	r5, #12
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	4607      	mov	r7, r0
 80025ca:	db01      	blt.n	80025d0 <_malloc_r+0x1c>
 80025cc:	42a9      	cmp	r1, r5
 80025ce:	d905      	bls.n	80025dc <_malloc_r+0x28>
 80025d0:	230c      	movs	r3, #12
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	2600      	movs	r6, #0
 80025d6:	4630      	mov	r0, r6
 80025d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80026b0 <_malloc_r+0xfc>
 80025e0:	f000 f868 	bl	80026b4 <__malloc_lock>
 80025e4:	f8d8 3000 	ldr.w	r3, [r8]
 80025e8:	461c      	mov	r4, r3
 80025ea:	bb5c      	cbnz	r4, 8002644 <_malloc_r+0x90>
 80025ec:	4629      	mov	r1, r5
 80025ee:	4638      	mov	r0, r7
 80025f0:	f7ff ffc0 	bl	8002574 <sbrk_aligned>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	4604      	mov	r4, r0
 80025f8:	d155      	bne.n	80026a6 <_malloc_r+0xf2>
 80025fa:	f8d8 4000 	ldr.w	r4, [r8]
 80025fe:	4626      	mov	r6, r4
 8002600:	2e00      	cmp	r6, #0
 8002602:	d145      	bne.n	8002690 <_malloc_r+0xdc>
 8002604:	2c00      	cmp	r4, #0
 8002606:	d048      	beq.n	800269a <_malloc_r+0xe6>
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	4631      	mov	r1, r6
 800260c:	4638      	mov	r0, r7
 800260e:	eb04 0903 	add.w	r9, r4, r3
 8002612:	f000 f91b 	bl	800284c <_sbrk_r>
 8002616:	4581      	cmp	r9, r0
 8002618:	d13f      	bne.n	800269a <_malloc_r+0xe6>
 800261a:	6821      	ldr	r1, [r4, #0]
 800261c:	1a6d      	subs	r5, r5, r1
 800261e:	4629      	mov	r1, r5
 8002620:	4638      	mov	r0, r7
 8002622:	f7ff ffa7 	bl	8002574 <sbrk_aligned>
 8002626:	3001      	adds	r0, #1
 8002628:	d037      	beq.n	800269a <_malloc_r+0xe6>
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	442b      	add	r3, r5
 800262e:	6023      	str	r3, [r4, #0]
 8002630:	f8d8 3000 	ldr.w	r3, [r8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d038      	beq.n	80026aa <_malloc_r+0xf6>
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	42a2      	cmp	r2, r4
 800263c:	d12b      	bne.n	8002696 <_malloc_r+0xe2>
 800263e:	2200      	movs	r2, #0
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	e00f      	b.n	8002664 <_malloc_r+0xb0>
 8002644:	6822      	ldr	r2, [r4, #0]
 8002646:	1b52      	subs	r2, r2, r5
 8002648:	d41f      	bmi.n	800268a <_malloc_r+0xd6>
 800264a:	2a0b      	cmp	r2, #11
 800264c:	d917      	bls.n	800267e <_malloc_r+0xca>
 800264e:	1961      	adds	r1, r4, r5
 8002650:	42a3      	cmp	r3, r4
 8002652:	6025      	str	r5, [r4, #0]
 8002654:	bf18      	it	ne
 8002656:	6059      	strne	r1, [r3, #4]
 8002658:	6863      	ldr	r3, [r4, #4]
 800265a:	bf08      	it	eq
 800265c:	f8c8 1000 	streq.w	r1, [r8]
 8002660:	5162      	str	r2, [r4, r5]
 8002662:	604b      	str	r3, [r1, #4]
 8002664:	4638      	mov	r0, r7
 8002666:	f104 060b 	add.w	r6, r4, #11
 800266a:	f000 f829 	bl	80026c0 <__malloc_unlock>
 800266e:	f026 0607 	bic.w	r6, r6, #7
 8002672:	1d23      	adds	r3, r4, #4
 8002674:	1af2      	subs	r2, r6, r3
 8002676:	d0ae      	beq.n	80025d6 <_malloc_r+0x22>
 8002678:	1b9b      	subs	r3, r3, r6
 800267a:	50a3      	str	r3, [r4, r2]
 800267c:	e7ab      	b.n	80025d6 <_malloc_r+0x22>
 800267e:	42a3      	cmp	r3, r4
 8002680:	6862      	ldr	r2, [r4, #4]
 8002682:	d1dd      	bne.n	8002640 <_malloc_r+0x8c>
 8002684:	f8c8 2000 	str.w	r2, [r8]
 8002688:	e7ec      	b.n	8002664 <_malloc_r+0xb0>
 800268a:	4623      	mov	r3, r4
 800268c:	6864      	ldr	r4, [r4, #4]
 800268e:	e7ac      	b.n	80025ea <_malloc_r+0x36>
 8002690:	4634      	mov	r4, r6
 8002692:	6876      	ldr	r6, [r6, #4]
 8002694:	e7b4      	b.n	8002600 <_malloc_r+0x4c>
 8002696:	4613      	mov	r3, r2
 8002698:	e7cc      	b.n	8002634 <_malloc_r+0x80>
 800269a:	230c      	movs	r3, #12
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4638      	mov	r0, r7
 80026a0:	f000 f80e 	bl	80026c0 <__malloc_unlock>
 80026a4:	e797      	b.n	80025d6 <_malloc_r+0x22>
 80026a6:	6025      	str	r5, [r4, #0]
 80026a8:	e7dc      	b.n	8002664 <_malloc_r+0xb0>
 80026aa:	605b      	str	r3, [r3, #4]
 80026ac:	deff      	udf	#255	; 0xff
 80026ae:	bf00      	nop
 80026b0:	20000208 	.word	0x20000208

080026b4 <__malloc_lock>:
 80026b4:	4801      	ldr	r0, [pc, #4]	; (80026bc <__malloc_lock+0x8>)
 80026b6:	f7ff bee9 	b.w	800248c <__retarget_lock_acquire_recursive>
 80026ba:	bf00      	nop
 80026bc:	20000204 	.word	0x20000204

080026c0 <__malloc_unlock>:
 80026c0:	4801      	ldr	r0, [pc, #4]	; (80026c8 <__malloc_unlock+0x8>)
 80026c2:	f7ff bee4 	b.w	800248e <__retarget_lock_release_recursive>
 80026c6:	bf00      	nop
 80026c8:	20000204 	.word	0x20000204

080026cc <__sflush_r>:
 80026cc:	898a      	ldrh	r2, [r1, #12]
 80026ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026d2:	4605      	mov	r5, r0
 80026d4:	0710      	lsls	r0, r2, #28
 80026d6:	460c      	mov	r4, r1
 80026d8:	d458      	bmi.n	800278c <__sflush_r+0xc0>
 80026da:	684b      	ldr	r3, [r1, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	dc05      	bgt.n	80026ec <__sflush_r+0x20>
 80026e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dc02      	bgt.n	80026ec <__sflush_r+0x20>
 80026e6:	2000      	movs	r0, #0
 80026e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026ee:	2e00      	cmp	r6, #0
 80026f0:	d0f9      	beq.n	80026e6 <__sflush_r+0x1a>
 80026f2:	2300      	movs	r3, #0
 80026f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026f8:	682f      	ldr	r7, [r5, #0]
 80026fa:	6a21      	ldr	r1, [r4, #32]
 80026fc:	602b      	str	r3, [r5, #0]
 80026fe:	d032      	beq.n	8002766 <__sflush_r+0x9a>
 8002700:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002702:	89a3      	ldrh	r3, [r4, #12]
 8002704:	075a      	lsls	r2, r3, #29
 8002706:	d505      	bpl.n	8002714 <__sflush_r+0x48>
 8002708:	6863      	ldr	r3, [r4, #4]
 800270a:	1ac0      	subs	r0, r0, r3
 800270c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800270e:	b10b      	cbz	r3, 8002714 <__sflush_r+0x48>
 8002710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002712:	1ac0      	subs	r0, r0, r3
 8002714:	2300      	movs	r3, #0
 8002716:	4602      	mov	r2, r0
 8002718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800271a:	6a21      	ldr	r1, [r4, #32]
 800271c:	4628      	mov	r0, r5
 800271e:	47b0      	blx	r6
 8002720:	1c43      	adds	r3, r0, #1
 8002722:	89a3      	ldrh	r3, [r4, #12]
 8002724:	d106      	bne.n	8002734 <__sflush_r+0x68>
 8002726:	6829      	ldr	r1, [r5, #0]
 8002728:	291d      	cmp	r1, #29
 800272a:	d82b      	bhi.n	8002784 <__sflush_r+0xb8>
 800272c:	4a29      	ldr	r2, [pc, #164]	; (80027d4 <__sflush_r+0x108>)
 800272e:	410a      	asrs	r2, r1
 8002730:	07d6      	lsls	r6, r2, #31
 8002732:	d427      	bmi.n	8002784 <__sflush_r+0xb8>
 8002734:	2200      	movs	r2, #0
 8002736:	6062      	str	r2, [r4, #4]
 8002738:	04d9      	lsls	r1, r3, #19
 800273a:	6922      	ldr	r2, [r4, #16]
 800273c:	6022      	str	r2, [r4, #0]
 800273e:	d504      	bpl.n	800274a <__sflush_r+0x7e>
 8002740:	1c42      	adds	r2, r0, #1
 8002742:	d101      	bne.n	8002748 <__sflush_r+0x7c>
 8002744:	682b      	ldr	r3, [r5, #0]
 8002746:	b903      	cbnz	r3, 800274a <__sflush_r+0x7e>
 8002748:	6560      	str	r0, [r4, #84]	; 0x54
 800274a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800274c:	602f      	str	r7, [r5, #0]
 800274e:	2900      	cmp	r1, #0
 8002750:	d0c9      	beq.n	80026e6 <__sflush_r+0x1a>
 8002752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002756:	4299      	cmp	r1, r3
 8002758:	d002      	beq.n	8002760 <__sflush_r+0x94>
 800275a:	4628      	mov	r0, r5
 800275c:	f7ff feb6 	bl	80024cc <_free_r>
 8002760:	2000      	movs	r0, #0
 8002762:	6360      	str	r0, [r4, #52]	; 0x34
 8002764:	e7c0      	b.n	80026e8 <__sflush_r+0x1c>
 8002766:	2301      	movs	r3, #1
 8002768:	4628      	mov	r0, r5
 800276a:	47b0      	blx	r6
 800276c:	1c41      	adds	r1, r0, #1
 800276e:	d1c8      	bne.n	8002702 <__sflush_r+0x36>
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0c5      	beq.n	8002702 <__sflush_r+0x36>
 8002776:	2b1d      	cmp	r3, #29
 8002778:	d001      	beq.n	800277e <__sflush_r+0xb2>
 800277a:	2b16      	cmp	r3, #22
 800277c:	d101      	bne.n	8002782 <__sflush_r+0xb6>
 800277e:	602f      	str	r7, [r5, #0]
 8002780:	e7b1      	b.n	80026e6 <__sflush_r+0x1a>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002788:	81a3      	strh	r3, [r4, #12]
 800278a:	e7ad      	b.n	80026e8 <__sflush_r+0x1c>
 800278c:	690f      	ldr	r7, [r1, #16]
 800278e:	2f00      	cmp	r7, #0
 8002790:	d0a9      	beq.n	80026e6 <__sflush_r+0x1a>
 8002792:	0793      	lsls	r3, r2, #30
 8002794:	680e      	ldr	r6, [r1, #0]
 8002796:	bf08      	it	eq
 8002798:	694b      	ldreq	r3, [r1, #20]
 800279a:	600f      	str	r7, [r1, #0]
 800279c:	bf18      	it	ne
 800279e:	2300      	movne	r3, #0
 80027a0:	eba6 0807 	sub.w	r8, r6, r7
 80027a4:	608b      	str	r3, [r1, #8]
 80027a6:	f1b8 0f00 	cmp.w	r8, #0
 80027aa:	dd9c      	ble.n	80026e6 <__sflush_r+0x1a>
 80027ac:	6a21      	ldr	r1, [r4, #32]
 80027ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027b0:	4643      	mov	r3, r8
 80027b2:	463a      	mov	r2, r7
 80027b4:	4628      	mov	r0, r5
 80027b6:	47b0      	blx	r6
 80027b8:	2800      	cmp	r0, #0
 80027ba:	dc06      	bgt.n	80027ca <__sflush_r+0xfe>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c2:	81a3      	strh	r3, [r4, #12]
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	e78e      	b.n	80026e8 <__sflush_r+0x1c>
 80027ca:	4407      	add	r7, r0
 80027cc:	eba8 0800 	sub.w	r8, r8, r0
 80027d0:	e7e9      	b.n	80027a6 <__sflush_r+0xda>
 80027d2:	bf00      	nop
 80027d4:	dfbffffe 	.word	0xdfbffffe

080027d8 <_fflush_r>:
 80027d8:	b538      	push	{r3, r4, r5, lr}
 80027da:	690b      	ldr	r3, [r1, #16]
 80027dc:	4605      	mov	r5, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	b913      	cbnz	r3, 80027e8 <_fflush_r+0x10>
 80027e2:	2500      	movs	r5, #0
 80027e4:	4628      	mov	r0, r5
 80027e6:	bd38      	pop	{r3, r4, r5, pc}
 80027e8:	b118      	cbz	r0, 80027f2 <_fflush_r+0x1a>
 80027ea:	6a03      	ldr	r3, [r0, #32]
 80027ec:	b90b      	cbnz	r3, 80027f2 <_fflush_r+0x1a>
 80027ee:	f7ff fd5b 	bl	80022a8 <__sinit>
 80027f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f3      	beq.n	80027e2 <_fflush_r+0xa>
 80027fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027fc:	07d0      	lsls	r0, r2, #31
 80027fe:	d404      	bmi.n	800280a <_fflush_r+0x32>
 8002800:	0599      	lsls	r1, r3, #22
 8002802:	d402      	bmi.n	800280a <_fflush_r+0x32>
 8002804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002806:	f7ff fe41 	bl	800248c <__retarget_lock_acquire_recursive>
 800280a:	4628      	mov	r0, r5
 800280c:	4621      	mov	r1, r4
 800280e:	f7ff ff5d 	bl	80026cc <__sflush_r>
 8002812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002814:	07da      	lsls	r2, r3, #31
 8002816:	4605      	mov	r5, r0
 8002818:	d4e4      	bmi.n	80027e4 <_fflush_r+0xc>
 800281a:	89a3      	ldrh	r3, [r4, #12]
 800281c:	059b      	lsls	r3, r3, #22
 800281e:	d4e1      	bmi.n	80027e4 <_fflush_r+0xc>
 8002820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002822:	f7ff fe34 	bl	800248e <__retarget_lock_release_recursive>
 8002826:	e7dd      	b.n	80027e4 <_fflush_r+0xc>

08002828 <fiprintf>:
 8002828:	b40e      	push	{r1, r2, r3}
 800282a:	b503      	push	{r0, r1, lr}
 800282c:	4601      	mov	r1, r0
 800282e:	ab03      	add	r3, sp, #12
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <fiprintf+0x20>)
 8002832:	f853 2b04 	ldr.w	r2, [r3], #4
 8002836:	6800      	ldr	r0, [r0, #0]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	f000 f847 	bl	80028cc <_vfiprintf_r>
 800283e:	b002      	add	sp, #8
 8002840:	f85d eb04 	ldr.w	lr, [sp], #4
 8002844:	b003      	add	sp, #12
 8002846:	4770      	bx	lr
 8002848:	20000064 	.word	0x20000064

0800284c <_sbrk_r>:
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	4d06      	ldr	r5, [pc, #24]	; (8002868 <_sbrk_r+0x1c>)
 8002850:	2300      	movs	r3, #0
 8002852:	4604      	mov	r4, r0
 8002854:	4608      	mov	r0, r1
 8002856:	602b      	str	r3, [r5, #0]
 8002858:	f7fe fa78 	bl	8000d4c <_sbrk>
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	d102      	bne.n	8002866 <_sbrk_r+0x1a>
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	b103      	cbz	r3, 8002866 <_sbrk_r+0x1a>
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	20000200 	.word	0x20000200

0800286c <abort>:
 800286c:	b508      	push	{r3, lr}
 800286e:	2006      	movs	r0, #6
 8002870:	f000 fb94 	bl	8002f9c <raise>
 8002874:	2001      	movs	r0, #1
 8002876:	f7fe f9f1 	bl	8000c5c <_exit>

0800287a <__sfputc_r>:
 800287a:	6893      	ldr	r3, [r2, #8]
 800287c:	3b01      	subs	r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	b410      	push	{r4}
 8002882:	6093      	str	r3, [r2, #8]
 8002884:	da08      	bge.n	8002898 <__sfputc_r+0x1e>
 8002886:	6994      	ldr	r4, [r2, #24]
 8002888:	42a3      	cmp	r3, r4
 800288a:	db01      	blt.n	8002890 <__sfputc_r+0x16>
 800288c:	290a      	cmp	r1, #10
 800288e:	d103      	bne.n	8002898 <__sfputc_r+0x1e>
 8002890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002894:	f000 bac4 	b.w	8002e20 <__swbuf_r>
 8002898:	6813      	ldr	r3, [r2, #0]
 800289a:	1c58      	adds	r0, r3, #1
 800289c:	6010      	str	r0, [r2, #0]
 800289e:	7019      	strb	r1, [r3, #0]
 80028a0:	4608      	mov	r0, r1
 80028a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <__sfputs_r>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	4606      	mov	r6, r0
 80028ac:	460f      	mov	r7, r1
 80028ae:	4614      	mov	r4, r2
 80028b0:	18d5      	adds	r5, r2, r3
 80028b2:	42ac      	cmp	r4, r5
 80028b4:	d101      	bne.n	80028ba <__sfputs_r+0x12>
 80028b6:	2000      	movs	r0, #0
 80028b8:	e007      	b.n	80028ca <__sfputs_r+0x22>
 80028ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028be:	463a      	mov	r2, r7
 80028c0:	4630      	mov	r0, r6
 80028c2:	f7ff ffda 	bl	800287a <__sfputc_r>
 80028c6:	1c43      	adds	r3, r0, #1
 80028c8:	d1f3      	bne.n	80028b2 <__sfputs_r+0xa>
 80028ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028cc <_vfiprintf_r>:
 80028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d0:	460d      	mov	r5, r1
 80028d2:	b09d      	sub	sp, #116	; 0x74
 80028d4:	4614      	mov	r4, r2
 80028d6:	4698      	mov	r8, r3
 80028d8:	4606      	mov	r6, r0
 80028da:	b118      	cbz	r0, 80028e4 <_vfiprintf_r+0x18>
 80028dc:	6a03      	ldr	r3, [r0, #32]
 80028de:	b90b      	cbnz	r3, 80028e4 <_vfiprintf_r+0x18>
 80028e0:	f7ff fce2 	bl	80022a8 <__sinit>
 80028e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028e6:	07d9      	lsls	r1, r3, #31
 80028e8:	d405      	bmi.n	80028f6 <_vfiprintf_r+0x2a>
 80028ea:	89ab      	ldrh	r3, [r5, #12]
 80028ec:	059a      	lsls	r2, r3, #22
 80028ee:	d402      	bmi.n	80028f6 <_vfiprintf_r+0x2a>
 80028f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028f2:	f7ff fdcb 	bl	800248c <__retarget_lock_acquire_recursive>
 80028f6:	89ab      	ldrh	r3, [r5, #12]
 80028f8:	071b      	lsls	r3, r3, #28
 80028fa:	d501      	bpl.n	8002900 <_vfiprintf_r+0x34>
 80028fc:	692b      	ldr	r3, [r5, #16]
 80028fe:	b99b      	cbnz	r3, 8002928 <_vfiprintf_r+0x5c>
 8002900:	4629      	mov	r1, r5
 8002902:	4630      	mov	r0, r6
 8002904:	f000 faca 	bl	8002e9c <__swsetup_r>
 8002908:	b170      	cbz	r0, 8002928 <_vfiprintf_r+0x5c>
 800290a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800290c:	07dc      	lsls	r4, r3, #31
 800290e:	d504      	bpl.n	800291a <_vfiprintf_r+0x4e>
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	b01d      	add	sp, #116	; 0x74
 8002916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291a:	89ab      	ldrh	r3, [r5, #12]
 800291c:	0598      	lsls	r0, r3, #22
 800291e:	d4f7      	bmi.n	8002910 <_vfiprintf_r+0x44>
 8002920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002922:	f7ff fdb4 	bl	800248e <__retarget_lock_release_recursive>
 8002926:	e7f3      	b.n	8002910 <_vfiprintf_r+0x44>
 8002928:	2300      	movs	r3, #0
 800292a:	9309      	str	r3, [sp, #36]	; 0x24
 800292c:	2320      	movs	r3, #32
 800292e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002932:	f8cd 800c 	str.w	r8, [sp, #12]
 8002936:	2330      	movs	r3, #48	; 0x30
 8002938:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002aec <_vfiprintf_r+0x220>
 800293c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002940:	f04f 0901 	mov.w	r9, #1
 8002944:	4623      	mov	r3, r4
 8002946:	469a      	mov	sl, r3
 8002948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800294c:	b10a      	cbz	r2, 8002952 <_vfiprintf_r+0x86>
 800294e:	2a25      	cmp	r2, #37	; 0x25
 8002950:	d1f9      	bne.n	8002946 <_vfiprintf_r+0x7a>
 8002952:	ebba 0b04 	subs.w	fp, sl, r4
 8002956:	d00b      	beq.n	8002970 <_vfiprintf_r+0xa4>
 8002958:	465b      	mov	r3, fp
 800295a:	4622      	mov	r2, r4
 800295c:	4629      	mov	r1, r5
 800295e:	4630      	mov	r0, r6
 8002960:	f7ff ffa2 	bl	80028a8 <__sfputs_r>
 8002964:	3001      	adds	r0, #1
 8002966:	f000 80a9 	beq.w	8002abc <_vfiprintf_r+0x1f0>
 800296a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800296c:	445a      	add	r2, fp
 800296e:	9209      	str	r2, [sp, #36]	; 0x24
 8002970:	f89a 3000 	ldrb.w	r3, [sl]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a1 	beq.w	8002abc <_vfiprintf_r+0x1f0>
 800297a:	2300      	movs	r3, #0
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002984:	f10a 0a01 	add.w	sl, sl, #1
 8002988:	9304      	str	r3, [sp, #16]
 800298a:	9307      	str	r3, [sp, #28]
 800298c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002990:	931a      	str	r3, [sp, #104]	; 0x68
 8002992:	4654      	mov	r4, sl
 8002994:	2205      	movs	r2, #5
 8002996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800299a:	4854      	ldr	r0, [pc, #336]	; (8002aec <_vfiprintf_r+0x220>)
 800299c:	f7fd fc50 	bl	8000240 <memchr>
 80029a0:	9a04      	ldr	r2, [sp, #16]
 80029a2:	b9d8      	cbnz	r0, 80029dc <_vfiprintf_r+0x110>
 80029a4:	06d1      	lsls	r1, r2, #27
 80029a6:	bf44      	itt	mi
 80029a8:	2320      	movmi	r3, #32
 80029aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029ae:	0713      	lsls	r3, r2, #28
 80029b0:	bf44      	itt	mi
 80029b2:	232b      	movmi	r3, #43	; 0x2b
 80029b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029b8:	f89a 3000 	ldrb.w	r3, [sl]
 80029bc:	2b2a      	cmp	r3, #42	; 0x2a
 80029be:	d015      	beq.n	80029ec <_vfiprintf_r+0x120>
 80029c0:	9a07      	ldr	r2, [sp, #28]
 80029c2:	4654      	mov	r4, sl
 80029c4:	2000      	movs	r0, #0
 80029c6:	f04f 0c0a 	mov.w	ip, #10
 80029ca:	4621      	mov	r1, r4
 80029cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029d0:	3b30      	subs	r3, #48	; 0x30
 80029d2:	2b09      	cmp	r3, #9
 80029d4:	d94d      	bls.n	8002a72 <_vfiprintf_r+0x1a6>
 80029d6:	b1b0      	cbz	r0, 8002a06 <_vfiprintf_r+0x13a>
 80029d8:	9207      	str	r2, [sp, #28]
 80029da:	e014      	b.n	8002a06 <_vfiprintf_r+0x13a>
 80029dc:	eba0 0308 	sub.w	r3, r0, r8
 80029e0:	fa09 f303 	lsl.w	r3, r9, r3
 80029e4:	4313      	orrs	r3, r2
 80029e6:	9304      	str	r3, [sp, #16]
 80029e8:	46a2      	mov	sl, r4
 80029ea:	e7d2      	b.n	8002992 <_vfiprintf_r+0xc6>
 80029ec:	9b03      	ldr	r3, [sp, #12]
 80029ee:	1d19      	adds	r1, r3, #4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	9103      	str	r1, [sp, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bfbb      	ittet	lt
 80029f8:	425b      	neglt	r3, r3
 80029fa:	f042 0202 	orrlt.w	r2, r2, #2
 80029fe:	9307      	strge	r3, [sp, #28]
 8002a00:	9307      	strlt	r3, [sp, #28]
 8002a02:	bfb8      	it	lt
 8002a04:	9204      	strlt	r2, [sp, #16]
 8002a06:	7823      	ldrb	r3, [r4, #0]
 8002a08:	2b2e      	cmp	r3, #46	; 0x2e
 8002a0a:	d10c      	bne.n	8002a26 <_vfiprintf_r+0x15a>
 8002a0c:	7863      	ldrb	r3, [r4, #1]
 8002a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a10:	d134      	bne.n	8002a7c <_vfiprintf_r+0x1b0>
 8002a12:	9b03      	ldr	r3, [sp, #12]
 8002a14:	1d1a      	adds	r2, r3, #4
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	9203      	str	r2, [sp, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bfb8      	it	lt
 8002a1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a22:	3402      	adds	r4, #2
 8002a24:	9305      	str	r3, [sp, #20]
 8002a26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002afc <_vfiprintf_r+0x230>
 8002a2a:	7821      	ldrb	r1, [r4, #0]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	4650      	mov	r0, sl
 8002a30:	f7fd fc06 	bl	8000240 <memchr>
 8002a34:	b138      	cbz	r0, 8002a46 <_vfiprintf_r+0x17a>
 8002a36:	9b04      	ldr	r3, [sp, #16]
 8002a38:	eba0 000a 	sub.w	r0, r0, sl
 8002a3c:	2240      	movs	r2, #64	; 0x40
 8002a3e:	4082      	lsls	r2, r0
 8002a40:	4313      	orrs	r3, r2
 8002a42:	3401      	adds	r4, #1
 8002a44:	9304      	str	r3, [sp, #16]
 8002a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a4a:	4829      	ldr	r0, [pc, #164]	; (8002af0 <_vfiprintf_r+0x224>)
 8002a4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a50:	2206      	movs	r2, #6
 8002a52:	f7fd fbf5 	bl	8000240 <memchr>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d03f      	beq.n	8002ada <_vfiprintf_r+0x20e>
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <_vfiprintf_r+0x228>)
 8002a5c:	bb1b      	cbnz	r3, 8002aa6 <_vfiprintf_r+0x1da>
 8002a5e:	9b03      	ldr	r3, [sp, #12]
 8002a60:	3307      	adds	r3, #7
 8002a62:	f023 0307 	bic.w	r3, r3, #7
 8002a66:	3308      	adds	r3, #8
 8002a68:	9303      	str	r3, [sp, #12]
 8002a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a6c:	443b      	add	r3, r7
 8002a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a70:	e768      	b.n	8002944 <_vfiprintf_r+0x78>
 8002a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a76:	460c      	mov	r4, r1
 8002a78:	2001      	movs	r0, #1
 8002a7a:	e7a6      	b.n	80029ca <_vfiprintf_r+0xfe>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	3401      	adds	r4, #1
 8002a80:	9305      	str	r3, [sp, #20]
 8002a82:	4619      	mov	r1, r3
 8002a84:	f04f 0c0a 	mov.w	ip, #10
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a8e:	3a30      	subs	r2, #48	; 0x30
 8002a90:	2a09      	cmp	r2, #9
 8002a92:	d903      	bls.n	8002a9c <_vfiprintf_r+0x1d0>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0c6      	beq.n	8002a26 <_vfiprintf_r+0x15a>
 8002a98:	9105      	str	r1, [sp, #20]
 8002a9a:	e7c4      	b.n	8002a26 <_vfiprintf_r+0x15a>
 8002a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e7f0      	b.n	8002a88 <_vfiprintf_r+0x1bc>
 8002aa6:	ab03      	add	r3, sp, #12
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	462a      	mov	r2, r5
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <_vfiprintf_r+0x22c>)
 8002aae:	a904      	add	r1, sp, #16
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f3af 8000 	nop.w
 8002ab6:	4607      	mov	r7, r0
 8002ab8:	1c78      	adds	r0, r7, #1
 8002aba:	d1d6      	bne.n	8002a6a <_vfiprintf_r+0x19e>
 8002abc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002abe:	07d9      	lsls	r1, r3, #31
 8002ac0:	d405      	bmi.n	8002ace <_vfiprintf_r+0x202>
 8002ac2:	89ab      	ldrh	r3, [r5, #12]
 8002ac4:	059a      	lsls	r2, r3, #22
 8002ac6:	d402      	bmi.n	8002ace <_vfiprintf_r+0x202>
 8002ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002aca:	f7ff fce0 	bl	800248e <__retarget_lock_release_recursive>
 8002ace:	89ab      	ldrh	r3, [r5, #12]
 8002ad0:	065b      	lsls	r3, r3, #25
 8002ad2:	f53f af1d 	bmi.w	8002910 <_vfiprintf_r+0x44>
 8002ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ad8:	e71c      	b.n	8002914 <_vfiprintf_r+0x48>
 8002ada:	ab03      	add	r3, sp, #12
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	462a      	mov	r2, r5
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <_vfiprintf_r+0x22c>)
 8002ae2:	a904      	add	r1, sp, #16
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	f000 f879 	bl	8002bdc <_printf_i>
 8002aea:	e7e4      	b.n	8002ab6 <_vfiprintf_r+0x1ea>
 8002aec:	080031af 	.word	0x080031af
 8002af0:	080031b9 	.word	0x080031b9
 8002af4:	00000000 	.word	0x00000000
 8002af8:	080028a9 	.word	0x080028a9
 8002afc:	080031b5 	.word	0x080031b5

08002b00 <_printf_common>:
 8002b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b04:	4616      	mov	r6, r2
 8002b06:	4699      	mov	r9, r3
 8002b08:	688a      	ldr	r2, [r1, #8]
 8002b0a:	690b      	ldr	r3, [r1, #16]
 8002b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b10:	4293      	cmp	r3, r2
 8002b12:	bfb8      	it	lt
 8002b14:	4613      	movlt	r3, r2
 8002b16:	6033      	str	r3, [r6, #0]
 8002b18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b1c:	4607      	mov	r7, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	b10a      	cbz	r2, 8002b26 <_printf_common+0x26>
 8002b22:	3301      	adds	r3, #1
 8002b24:	6033      	str	r3, [r6, #0]
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	0699      	lsls	r1, r3, #26
 8002b2a:	bf42      	ittt	mi
 8002b2c:	6833      	ldrmi	r3, [r6, #0]
 8002b2e:	3302      	addmi	r3, #2
 8002b30:	6033      	strmi	r3, [r6, #0]
 8002b32:	6825      	ldr	r5, [r4, #0]
 8002b34:	f015 0506 	ands.w	r5, r5, #6
 8002b38:	d106      	bne.n	8002b48 <_printf_common+0x48>
 8002b3a:	f104 0a19 	add.w	sl, r4, #25
 8002b3e:	68e3      	ldr	r3, [r4, #12]
 8002b40:	6832      	ldr	r2, [r6, #0]
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	42ab      	cmp	r3, r5
 8002b46:	dc26      	bgt.n	8002b96 <_printf_common+0x96>
 8002b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b4c:	1e13      	subs	r3, r2, #0
 8002b4e:	6822      	ldr	r2, [r4, #0]
 8002b50:	bf18      	it	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	0692      	lsls	r2, r2, #26
 8002b56:	d42b      	bmi.n	8002bb0 <_printf_common+0xb0>
 8002b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	4638      	mov	r0, r7
 8002b60:	47c0      	blx	r8
 8002b62:	3001      	adds	r0, #1
 8002b64:	d01e      	beq.n	8002ba4 <_printf_common+0xa4>
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	6922      	ldr	r2, [r4, #16]
 8002b6a:	f003 0306 	and.w	r3, r3, #6
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	bf02      	ittt	eq
 8002b72:	68e5      	ldreq	r5, [r4, #12]
 8002b74:	6833      	ldreq	r3, [r6, #0]
 8002b76:	1aed      	subeq	r5, r5, r3
 8002b78:	68a3      	ldr	r3, [r4, #8]
 8002b7a:	bf0c      	ite	eq
 8002b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b80:	2500      	movne	r5, #0
 8002b82:	4293      	cmp	r3, r2
 8002b84:	bfc4      	itt	gt
 8002b86:	1a9b      	subgt	r3, r3, r2
 8002b88:	18ed      	addgt	r5, r5, r3
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	341a      	adds	r4, #26
 8002b8e:	42b5      	cmp	r5, r6
 8002b90:	d11a      	bne.n	8002bc8 <_printf_common+0xc8>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e008      	b.n	8002ba8 <_printf_common+0xa8>
 8002b96:	2301      	movs	r3, #1
 8002b98:	4652      	mov	r2, sl
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	47c0      	blx	r8
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d103      	bne.n	8002bac <_printf_common+0xac>
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bac:	3501      	adds	r5, #1
 8002bae:	e7c6      	b.n	8002b3e <_printf_common+0x3e>
 8002bb0:	18e1      	adds	r1, r4, r3
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	2030      	movs	r0, #48	; 0x30
 8002bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bba:	4422      	add	r2, r4
 8002bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	e7c7      	b.n	8002b58 <_printf_common+0x58>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	4622      	mov	r2, r4
 8002bcc:	4649      	mov	r1, r9
 8002bce:	4638      	mov	r0, r7
 8002bd0:	47c0      	blx	r8
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	d0e6      	beq.n	8002ba4 <_printf_common+0xa4>
 8002bd6:	3601      	adds	r6, #1
 8002bd8:	e7d9      	b.n	8002b8e <_printf_common+0x8e>
	...

08002bdc <_printf_i>:
 8002bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002be0:	7e0f      	ldrb	r7, [r1, #24]
 8002be2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002be4:	2f78      	cmp	r7, #120	; 0x78
 8002be6:	4691      	mov	r9, r2
 8002be8:	4680      	mov	r8, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	469a      	mov	sl, r3
 8002bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bf2:	d807      	bhi.n	8002c04 <_printf_i+0x28>
 8002bf4:	2f62      	cmp	r7, #98	; 0x62
 8002bf6:	d80a      	bhi.n	8002c0e <_printf_i+0x32>
 8002bf8:	2f00      	cmp	r7, #0
 8002bfa:	f000 80d4 	beq.w	8002da6 <_printf_i+0x1ca>
 8002bfe:	2f58      	cmp	r7, #88	; 0x58
 8002c00:	f000 80c0 	beq.w	8002d84 <_printf_i+0x1a8>
 8002c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c0c:	e03a      	b.n	8002c84 <_printf_i+0xa8>
 8002c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c12:	2b15      	cmp	r3, #21
 8002c14:	d8f6      	bhi.n	8002c04 <_printf_i+0x28>
 8002c16:	a101      	add	r1, pc, #4	; (adr r1, 8002c1c <_printf_i+0x40>)
 8002c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c1c:	08002c75 	.word	0x08002c75
 8002c20:	08002c89 	.word	0x08002c89
 8002c24:	08002c05 	.word	0x08002c05
 8002c28:	08002c05 	.word	0x08002c05
 8002c2c:	08002c05 	.word	0x08002c05
 8002c30:	08002c05 	.word	0x08002c05
 8002c34:	08002c89 	.word	0x08002c89
 8002c38:	08002c05 	.word	0x08002c05
 8002c3c:	08002c05 	.word	0x08002c05
 8002c40:	08002c05 	.word	0x08002c05
 8002c44:	08002c05 	.word	0x08002c05
 8002c48:	08002d8d 	.word	0x08002d8d
 8002c4c:	08002cb5 	.word	0x08002cb5
 8002c50:	08002d47 	.word	0x08002d47
 8002c54:	08002c05 	.word	0x08002c05
 8002c58:	08002c05 	.word	0x08002c05
 8002c5c:	08002daf 	.word	0x08002daf
 8002c60:	08002c05 	.word	0x08002c05
 8002c64:	08002cb5 	.word	0x08002cb5
 8002c68:	08002c05 	.word	0x08002c05
 8002c6c:	08002c05 	.word	0x08002c05
 8002c70:	08002d4f 	.word	0x08002d4f
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	602a      	str	r2, [r5, #0]
 8002c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c84:	2301      	movs	r3, #1
 8002c86:	e09f      	b.n	8002dc8 <_printf_i+0x1ec>
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	682b      	ldr	r3, [r5, #0]
 8002c8c:	0607      	lsls	r7, r0, #24
 8002c8e:	f103 0104 	add.w	r1, r3, #4
 8002c92:	6029      	str	r1, [r5, #0]
 8002c94:	d501      	bpl.n	8002c9a <_printf_i+0xbe>
 8002c96:	681e      	ldr	r6, [r3, #0]
 8002c98:	e003      	b.n	8002ca2 <_printf_i+0xc6>
 8002c9a:	0646      	lsls	r6, r0, #25
 8002c9c:	d5fb      	bpl.n	8002c96 <_printf_i+0xba>
 8002c9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002ca2:	2e00      	cmp	r6, #0
 8002ca4:	da03      	bge.n	8002cae <_printf_i+0xd2>
 8002ca6:	232d      	movs	r3, #45	; 0x2d
 8002ca8:	4276      	negs	r6, r6
 8002caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cae:	485a      	ldr	r0, [pc, #360]	; (8002e18 <_printf_i+0x23c>)
 8002cb0:	230a      	movs	r3, #10
 8002cb2:	e012      	b.n	8002cda <_printf_i+0xfe>
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	6820      	ldr	r0, [r4, #0]
 8002cb8:	1d19      	adds	r1, r3, #4
 8002cba:	6029      	str	r1, [r5, #0]
 8002cbc:	0605      	lsls	r5, r0, #24
 8002cbe:	d501      	bpl.n	8002cc4 <_printf_i+0xe8>
 8002cc0:	681e      	ldr	r6, [r3, #0]
 8002cc2:	e002      	b.n	8002cca <_printf_i+0xee>
 8002cc4:	0641      	lsls	r1, r0, #25
 8002cc6:	d5fb      	bpl.n	8002cc0 <_printf_i+0xe4>
 8002cc8:	881e      	ldrh	r6, [r3, #0]
 8002cca:	4853      	ldr	r0, [pc, #332]	; (8002e18 <_printf_i+0x23c>)
 8002ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8002cce:	bf0c      	ite	eq
 8002cd0:	2308      	moveq	r3, #8
 8002cd2:	230a      	movne	r3, #10
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cda:	6865      	ldr	r5, [r4, #4]
 8002cdc:	60a5      	str	r5, [r4, #8]
 8002cde:	2d00      	cmp	r5, #0
 8002ce0:	bfa2      	ittt	ge
 8002ce2:	6821      	ldrge	r1, [r4, #0]
 8002ce4:	f021 0104 	bicge.w	r1, r1, #4
 8002ce8:	6021      	strge	r1, [r4, #0]
 8002cea:	b90e      	cbnz	r6, 8002cf0 <_printf_i+0x114>
 8002cec:	2d00      	cmp	r5, #0
 8002cee:	d04b      	beq.n	8002d88 <_printf_i+0x1ac>
 8002cf0:	4615      	mov	r5, r2
 8002cf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cf6:	fb03 6711 	mls	r7, r3, r1, r6
 8002cfa:	5dc7      	ldrb	r7, [r0, r7]
 8002cfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d00:	4637      	mov	r7, r6
 8002d02:	42bb      	cmp	r3, r7
 8002d04:	460e      	mov	r6, r1
 8002d06:	d9f4      	bls.n	8002cf2 <_printf_i+0x116>
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d10b      	bne.n	8002d24 <_printf_i+0x148>
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	07de      	lsls	r6, r3, #31
 8002d10:	d508      	bpl.n	8002d24 <_printf_i+0x148>
 8002d12:	6923      	ldr	r3, [r4, #16]
 8002d14:	6861      	ldr	r1, [r4, #4]
 8002d16:	4299      	cmp	r1, r3
 8002d18:	bfde      	ittt	le
 8002d1a:	2330      	movle	r3, #48	; 0x30
 8002d1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d24:	1b52      	subs	r2, r2, r5
 8002d26:	6122      	str	r2, [r4, #16]
 8002d28:	f8cd a000 	str.w	sl, [sp]
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	aa03      	add	r2, sp, #12
 8002d30:	4621      	mov	r1, r4
 8002d32:	4640      	mov	r0, r8
 8002d34:	f7ff fee4 	bl	8002b00 <_printf_common>
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d14a      	bne.n	8002dd2 <_printf_i+0x1f6>
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	b004      	add	sp, #16
 8002d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	f043 0320 	orr.w	r3, r3, #32
 8002d4c:	6023      	str	r3, [r4, #0]
 8002d4e:	4833      	ldr	r0, [pc, #204]	; (8002e1c <_printf_i+0x240>)
 8002d50:	2778      	movs	r7, #120	; 0x78
 8002d52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	6829      	ldr	r1, [r5, #0]
 8002d5a:	061f      	lsls	r7, r3, #24
 8002d5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d60:	d402      	bmi.n	8002d68 <_printf_i+0x18c>
 8002d62:	065f      	lsls	r7, r3, #25
 8002d64:	bf48      	it	mi
 8002d66:	b2b6      	uxthmi	r6, r6
 8002d68:	07df      	lsls	r7, r3, #31
 8002d6a:	bf48      	it	mi
 8002d6c:	f043 0320 	orrmi.w	r3, r3, #32
 8002d70:	6029      	str	r1, [r5, #0]
 8002d72:	bf48      	it	mi
 8002d74:	6023      	strmi	r3, [r4, #0]
 8002d76:	b91e      	cbnz	r6, 8002d80 <_printf_i+0x1a4>
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	f023 0320 	bic.w	r3, r3, #32
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	2310      	movs	r3, #16
 8002d82:	e7a7      	b.n	8002cd4 <_printf_i+0xf8>
 8002d84:	4824      	ldr	r0, [pc, #144]	; (8002e18 <_printf_i+0x23c>)
 8002d86:	e7e4      	b.n	8002d52 <_printf_i+0x176>
 8002d88:	4615      	mov	r5, r2
 8002d8a:	e7bd      	b.n	8002d08 <_printf_i+0x12c>
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	6826      	ldr	r6, [r4, #0]
 8002d90:	6961      	ldr	r1, [r4, #20]
 8002d92:	1d18      	adds	r0, r3, #4
 8002d94:	6028      	str	r0, [r5, #0]
 8002d96:	0635      	lsls	r5, r6, #24
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	d501      	bpl.n	8002da0 <_printf_i+0x1c4>
 8002d9c:	6019      	str	r1, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <_printf_i+0x1ca>
 8002da0:	0670      	lsls	r0, r6, #25
 8002da2:	d5fb      	bpl.n	8002d9c <_printf_i+0x1c0>
 8002da4:	8019      	strh	r1, [r3, #0]
 8002da6:	2300      	movs	r3, #0
 8002da8:	6123      	str	r3, [r4, #16]
 8002daa:	4615      	mov	r5, r2
 8002dac:	e7bc      	b.n	8002d28 <_printf_i+0x14c>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	602a      	str	r2, [r5, #0]
 8002db4:	681d      	ldr	r5, [r3, #0]
 8002db6:	6862      	ldr	r2, [r4, #4]
 8002db8:	2100      	movs	r1, #0
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f7fd fa40 	bl	8000240 <memchr>
 8002dc0:	b108      	cbz	r0, 8002dc6 <_printf_i+0x1ea>
 8002dc2:	1b40      	subs	r0, r0, r5
 8002dc4:	6060      	str	r0, [r4, #4]
 8002dc6:	6863      	ldr	r3, [r4, #4]
 8002dc8:	6123      	str	r3, [r4, #16]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dd0:	e7aa      	b.n	8002d28 <_printf_i+0x14c>
 8002dd2:	6923      	ldr	r3, [r4, #16]
 8002dd4:	462a      	mov	r2, r5
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	4640      	mov	r0, r8
 8002dda:	47d0      	blx	sl
 8002ddc:	3001      	adds	r0, #1
 8002dde:	d0ad      	beq.n	8002d3c <_printf_i+0x160>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	079b      	lsls	r3, r3, #30
 8002de4:	d413      	bmi.n	8002e0e <_printf_i+0x232>
 8002de6:	68e0      	ldr	r0, [r4, #12]
 8002de8:	9b03      	ldr	r3, [sp, #12]
 8002dea:	4298      	cmp	r0, r3
 8002dec:	bfb8      	it	lt
 8002dee:	4618      	movlt	r0, r3
 8002df0:	e7a6      	b.n	8002d40 <_printf_i+0x164>
 8002df2:	2301      	movs	r3, #1
 8002df4:	4632      	mov	r2, r6
 8002df6:	4649      	mov	r1, r9
 8002df8:	4640      	mov	r0, r8
 8002dfa:	47d0      	blx	sl
 8002dfc:	3001      	adds	r0, #1
 8002dfe:	d09d      	beq.n	8002d3c <_printf_i+0x160>
 8002e00:	3501      	adds	r5, #1
 8002e02:	68e3      	ldr	r3, [r4, #12]
 8002e04:	9903      	ldr	r1, [sp, #12]
 8002e06:	1a5b      	subs	r3, r3, r1
 8002e08:	42ab      	cmp	r3, r5
 8002e0a:	dcf2      	bgt.n	8002df2 <_printf_i+0x216>
 8002e0c:	e7eb      	b.n	8002de6 <_printf_i+0x20a>
 8002e0e:	2500      	movs	r5, #0
 8002e10:	f104 0619 	add.w	r6, r4, #25
 8002e14:	e7f5      	b.n	8002e02 <_printf_i+0x226>
 8002e16:	bf00      	nop
 8002e18:	080031c0 	.word	0x080031c0
 8002e1c:	080031d1 	.word	0x080031d1

08002e20 <__swbuf_r>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	460e      	mov	r6, r1
 8002e24:	4614      	mov	r4, r2
 8002e26:	4605      	mov	r5, r0
 8002e28:	b118      	cbz	r0, 8002e32 <__swbuf_r+0x12>
 8002e2a:	6a03      	ldr	r3, [r0, #32]
 8002e2c:	b90b      	cbnz	r3, 8002e32 <__swbuf_r+0x12>
 8002e2e:	f7ff fa3b 	bl	80022a8 <__sinit>
 8002e32:	69a3      	ldr	r3, [r4, #24]
 8002e34:	60a3      	str	r3, [r4, #8]
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	071a      	lsls	r2, r3, #28
 8002e3a:	d525      	bpl.n	8002e88 <__swbuf_r+0x68>
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	b31b      	cbz	r3, 8002e88 <__swbuf_r+0x68>
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	6922      	ldr	r2, [r4, #16]
 8002e44:	1a98      	subs	r0, r3, r2
 8002e46:	6963      	ldr	r3, [r4, #20]
 8002e48:	b2f6      	uxtb	r6, r6
 8002e4a:	4283      	cmp	r3, r0
 8002e4c:	4637      	mov	r7, r6
 8002e4e:	dc04      	bgt.n	8002e5a <__swbuf_r+0x3a>
 8002e50:	4621      	mov	r1, r4
 8002e52:	4628      	mov	r0, r5
 8002e54:	f7ff fcc0 	bl	80027d8 <_fflush_r>
 8002e58:	b9e0      	cbnz	r0, 8002e94 <__swbuf_r+0x74>
 8002e5a:	68a3      	ldr	r3, [r4, #8]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	60a3      	str	r3, [r4, #8]
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	6022      	str	r2, [r4, #0]
 8002e66:	701e      	strb	r6, [r3, #0]
 8002e68:	6962      	ldr	r2, [r4, #20]
 8002e6a:	1c43      	adds	r3, r0, #1
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d004      	beq.n	8002e7a <__swbuf_r+0x5a>
 8002e70:	89a3      	ldrh	r3, [r4, #12]
 8002e72:	07db      	lsls	r3, r3, #31
 8002e74:	d506      	bpl.n	8002e84 <__swbuf_r+0x64>
 8002e76:	2e0a      	cmp	r6, #10
 8002e78:	d104      	bne.n	8002e84 <__swbuf_r+0x64>
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f7ff fcab 	bl	80027d8 <_fflush_r>
 8002e82:	b938      	cbnz	r0, 8002e94 <__swbuf_r+0x74>
 8002e84:	4638      	mov	r0, r7
 8002e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e88:	4621      	mov	r1, r4
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	f000 f806 	bl	8002e9c <__swsetup_r>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d0d5      	beq.n	8002e40 <__swbuf_r+0x20>
 8002e94:	f04f 37ff 	mov.w	r7, #4294967295
 8002e98:	e7f4      	b.n	8002e84 <__swbuf_r+0x64>
	...

08002e9c <__swsetup_r>:
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <__swsetup_r+0xac>)
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	b118      	cbz	r0, 8002eb0 <__swsetup_r+0x14>
 8002ea8:	6a03      	ldr	r3, [r0, #32]
 8002eaa:	b90b      	cbnz	r3, 8002eb0 <__swsetup_r+0x14>
 8002eac:	f7ff f9fc 	bl	80022a8 <__sinit>
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eb6:	0718      	lsls	r0, r3, #28
 8002eb8:	d422      	bmi.n	8002f00 <__swsetup_r+0x64>
 8002eba:	06d9      	lsls	r1, r3, #27
 8002ebc:	d407      	bmi.n	8002ece <__swsetup_r+0x32>
 8002ebe:	2309      	movs	r3, #9
 8002ec0:	602b      	str	r3, [r5, #0]
 8002ec2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ec6:	81a3      	strh	r3, [r4, #12]
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	e034      	b.n	8002f38 <__swsetup_r+0x9c>
 8002ece:	0758      	lsls	r0, r3, #29
 8002ed0:	d512      	bpl.n	8002ef8 <__swsetup_r+0x5c>
 8002ed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ed4:	b141      	cbz	r1, 8002ee8 <__swsetup_r+0x4c>
 8002ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eda:	4299      	cmp	r1, r3
 8002edc:	d002      	beq.n	8002ee4 <__swsetup_r+0x48>
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f7ff faf4 	bl	80024cc <_free_r>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	6363      	str	r3, [r4, #52]	; 0x34
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002eee:	81a3      	strh	r3, [r4, #12]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	6063      	str	r3, [r4, #4]
 8002ef4:	6923      	ldr	r3, [r4, #16]
 8002ef6:	6023      	str	r3, [r4, #0]
 8002ef8:	89a3      	ldrh	r3, [r4, #12]
 8002efa:	f043 0308 	orr.w	r3, r3, #8
 8002efe:	81a3      	strh	r3, [r4, #12]
 8002f00:	6923      	ldr	r3, [r4, #16]
 8002f02:	b94b      	cbnz	r3, 8002f18 <__swsetup_r+0x7c>
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0e:	d003      	beq.n	8002f18 <__swsetup_r+0x7c>
 8002f10:	4621      	mov	r1, r4
 8002f12:	4628      	mov	r0, r5
 8002f14:	f000 f884 	bl	8003020 <__smakebuf_r>
 8002f18:	89a0      	ldrh	r0, [r4, #12]
 8002f1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f1e:	f010 0301 	ands.w	r3, r0, #1
 8002f22:	d00a      	beq.n	8002f3a <__swsetup_r+0x9e>
 8002f24:	2300      	movs	r3, #0
 8002f26:	60a3      	str	r3, [r4, #8]
 8002f28:	6963      	ldr	r3, [r4, #20]
 8002f2a:	425b      	negs	r3, r3
 8002f2c:	61a3      	str	r3, [r4, #24]
 8002f2e:	6923      	ldr	r3, [r4, #16]
 8002f30:	b943      	cbnz	r3, 8002f44 <__swsetup_r+0xa8>
 8002f32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f36:	d1c4      	bne.n	8002ec2 <__swsetup_r+0x26>
 8002f38:	bd38      	pop	{r3, r4, r5, pc}
 8002f3a:	0781      	lsls	r1, r0, #30
 8002f3c:	bf58      	it	pl
 8002f3e:	6963      	ldrpl	r3, [r4, #20]
 8002f40:	60a3      	str	r3, [r4, #8]
 8002f42:	e7f4      	b.n	8002f2e <__swsetup_r+0x92>
 8002f44:	2000      	movs	r0, #0
 8002f46:	e7f7      	b.n	8002f38 <__swsetup_r+0x9c>
 8002f48:	20000064 	.word	0x20000064

08002f4c <_raise_r>:
 8002f4c:	291f      	cmp	r1, #31
 8002f4e:	b538      	push	{r3, r4, r5, lr}
 8002f50:	4604      	mov	r4, r0
 8002f52:	460d      	mov	r5, r1
 8002f54:	d904      	bls.n	8002f60 <_raise_r+0x14>
 8002f56:	2316      	movs	r3, #22
 8002f58:	6003      	str	r3, [r0, #0]
 8002f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002f62:	b112      	cbz	r2, 8002f6a <_raise_r+0x1e>
 8002f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002f68:	b94b      	cbnz	r3, 8002f7e <_raise_r+0x32>
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f000 f830 	bl	8002fd0 <_getpid_r>
 8002f70:	462a      	mov	r2, r5
 8002f72:	4601      	mov	r1, r0
 8002f74:	4620      	mov	r0, r4
 8002f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f7a:	f000 b817 	b.w	8002fac <_kill_r>
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d00a      	beq.n	8002f98 <_raise_r+0x4c>
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	d103      	bne.n	8002f8e <_raise_r+0x42>
 8002f86:	2316      	movs	r3, #22
 8002f88:	6003      	str	r3, [r0, #0]
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	e7e7      	b.n	8002f5e <_raise_r+0x12>
 8002f8e:	2400      	movs	r4, #0
 8002f90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002f94:	4628      	mov	r0, r5
 8002f96:	4798      	blx	r3
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e7e0      	b.n	8002f5e <_raise_r+0x12>

08002f9c <raise>:
 8002f9c:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <raise+0xc>)
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	f7ff bfd3 	b.w	8002f4c <_raise_r>
 8002fa6:	bf00      	nop
 8002fa8:	20000064 	.word	0x20000064

08002fac <_kill_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4d07      	ldr	r5, [pc, #28]	; (8002fcc <_kill_r+0x20>)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	f7fd fe3f 	bl	8000c3c <_kill>
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	d102      	bne.n	8002fc8 <_kill_r+0x1c>
 8002fc2:	682b      	ldr	r3, [r5, #0]
 8002fc4:	b103      	cbz	r3, 8002fc8 <_kill_r+0x1c>
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	bd38      	pop	{r3, r4, r5, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000200 	.word	0x20000200

08002fd0 <_getpid_r>:
 8002fd0:	f7fd be2c 	b.w	8000c2c <_getpid>

08002fd4 <__swhatbuf_r>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	b096      	sub	sp, #88	; 0x58
 8002fe0:	4615      	mov	r5, r2
 8002fe2:	461e      	mov	r6, r3
 8002fe4:	da0d      	bge.n	8003002 <__swhatbuf_r+0x2e>
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	bf0c      	ite	eq
 8002ff2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002ff6:	2340      	movne	r3, #64	; 0x40
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	6031      	str	r1, [r6, #0]
 8002ffc:	602b      	str	r3, [r5, #0]
 8002ffe:	b016      	add	sp, #88	; 0x58
 8003000:	bd70      	pop	{r4, r5, r6, pc}
 8003002:	466a      	mov	r2, sp
 8003004:	f000 f848 	bl	8003098 <_fstat_r>
 8003008:	2800      	cmp	r0, #0
 800300a:	dbec      	blt.n	8002fe6 <__swhatbuf_r+0x12>
 800300c:	9901      	ldr	r1, [sp, #4]
 800300e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003012:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003016:	4259      	negs	r1, r3
 8003018:	4159      	adcs	r1, r3
 800301a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301e:	e7eb      	b.n	8002ff8 <__swhatbuf_r+0x24>

08003020 <__smakebuf_r>:
 8003020:	898b      	ldrh	r3, [r1, #12]
 8003022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003024:	079d      	lsls	r5, r3, #30
 8003026:	4606      	mov	r6, r0
 8003028:	460c      	mov	r4, r1
 800302a:	d507      	bpl.n	800303c <__smakebuf_r+0x1c>
 800302c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	6123      	str	r3, [r4, #16]
 8003034:	2301      	movs	r3, #1
 8003036:	6163      	str	r3, [r4, #20]
 8003038:	b002      	add	sp, #8
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	ab01      	add	r3, sp, #4
 800303e:	466a      	mov	r2, sp
 8003040:	f7ff ffc8 	bl	8002fd4 <__swhatbuf_r>
 8003044:	9900      	ldr	r1, [sp, #0]
 8003046:	4605      	mov	r5, r0
 8003048:	4630      	mov	r0, r6
 800304a:	f7ff fab3 	bl	80025b4 <_malloc_r>
 800304e:	b948      	cbnz	r0, 8003064 <__smakebuf_r+0x44>
 8003050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003054:	059a      	lsls	r2, r3, #22
 8003056:	d4ef      	bmi.n	8003038 <__smakebuf_r+0x18>
 8003058:	f023 0303 	bic.w	r3, r3, #3
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	e7e3      	b.n	800302c <__smakebuf_r+0xc>
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	6020      	str	r0, [r4, #0]
 8003068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	9b00      	ldr	r3, [sp, #0]
 8003070:	6163      	str	r3, [r4, #20]
 8003072:	9b01      	ldr	r3, [sp, #4]
 8003074:	6120      	str	r0, [r4, #16]
 8003076:	b15b      	cbz	r3, 8003090 <__smakebuf_r+0x70>
 8003078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800307c:	4630      	mov	r0, r6
 800307e:	f000 f81d 	bl	80030bc <_isatty_r>
 8003082:	b128      	cbz	r0, 8003090 <__smakebuf_r+0x70>
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	81a3      	strh	r3, [r4, #12]
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	431d      	orrs	r5, r3
 8003094:	81a5      	strh	r5, [r4, #12]
 8003096:	e7cf      	b.n	8003038 <__smakebuf_r+0x18>

08003098 <_fstat_r>:
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	4d07      	ldr	r5, [pc, #28]	; (80030b8 <_fstat_r+0x20>)
 800309c:	2300      	movs	r3, #0
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	f7fd fe28 	bl	8000cfa <_fstat>
 80030aa:	1c43      	adds	r3, r0, #1
 80030ac:	d102      	bne.n	80030b4 <_fstat_r+0x1c>
 80030ae:	682b      	ldr	r3, [r5, #0]
 80030b0:	b103      	cbz	r3, 80030b4 <_fstat_r+0x1c>
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	bd38      	pop	{r3, r4, r5, pc}
 80030b6:	bf00      	nop
 80030b8:	20000200 	.word	0x20000200

080030bc <_isatty_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	4d06      	ldr	r5, [pc, #24]	; (80030d8 <_isatty_r+0x1c>)
 80030c0:	2300      	movs	r3, #0
 80030c2:	4604      	mov	r4, r0
 80030c4:	4608      	mov	r0, r1
 80030c6:	602b      	str	r3, [r5, #0]
 80030c8:	f7fd fe27 	bl	8000d1a <_isatty>
 80030cc:	1c43      	adds	r3, r0, #1
 80030ce:	d102      	bne.n	80030d6 <_isatty_r+0x1a>
 80030d0:	682b      	ldr	r3, [r5, #0]
 80030d2:	b103      	cbz	r3, 80030d6 <_isatty_r+0x1a>
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
 80030d8:	20000200 	.word	0x20000200

080030dc <_init>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr

080030e8 <_fini>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr
