
020_SDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003158  08003158  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000068  080031c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080031c8  00020210  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007310  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001865  00000000  00000000  000273e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00028c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053e  00000000  00000000  00029380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d193  00000000  00000000  000298be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000834c  00000000  00000000  00056a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010df71  00000000  00000000  0005ed9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024b8  00000000  00000000  0016cd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0016f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08003048 	.word	0x08003048

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08003048 	.word	0x08003048

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c8      	sub	sp, #288	; 0x120
 80005e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e2:	f000 fc18 	bl	8000e16 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e6:	f000 f8b3 	bl	8000750 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ea:	f000 f9b7 	bl	800095c <MX_GPIO_Init>
	MX_FMC_Init();
 80005ee:	f000 f91d 	bl	800082c <MX_FMC_Init>

	// adres start 0xC0000000 - adres stop 0xc0ffffff - 128Mb, 16MB, 8M half Word, 4M Word
#define SDRAM_BANK_ADDR ((uint32_t)0xC0000000)

	// czyszczenie całej pamięci SDRAM
	volatile uint32_t clearTimeSDRAM = HAL_GetTick();
 80005f2:	f000 fc61 	bl	8000eb8 <HAL_GetTick>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	for (int i = 0; i < 0x1000000; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000602:	e00a      	b.n	800061a <main+0x3e>
		*(__IO uint8_t*) (SDRAM_BANK_ADDR + (1 * i)) = 0xc8;
 8000604:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000608:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800060c:	22c8      	movs	r2, #200	; 0xc8
 800060e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 0x1000000; i++)
 8000610:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000614:	3301      	adds	r3, #1
 8000616:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800061a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800061e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000622:	dbef      	blt.n	8000604 <main+0x28>
	clearTimeSDRAM = HAL_GetTick() - clearTimeSDRAM;
 8000624:	f000 fc48 	bl	8000eb8 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	__NOP();
 8000634:	bf00      	nop

	// uzupełnianie pamięci ram
	uint8_t tab[0x100] = { 0 };
 8000636:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800063a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	3304      	adds	r3, #4
 8000644:	22fc      	movs	r2, #252	; 0xfc
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fe5c 	bl	8002306 <memset>
	volatile uint32_t timeRAM = HAL_GetTick();
 800064e:	f000 fc33 	bl	8000eb8 <HAL_GetTick>
 8000652:	4602      	mov	r2, r0
 8000654:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000658:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800065c:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 0x10000; j++)
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000664:	e01d      	b.n	80006a2 <main+0xc6>
		for (int i = 0; i < 0x100; i++) {
 8000666:	2300      	movs	r3, #0
 8000668:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800066c:	e010      	b.n	8000690 <main+0xb4>
			tab[i] = i;
 800066e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000672:	b2d9      	uxtb	r1, r3
 8000674:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000678:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800067c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000680:	4413      	add	r3, r2
 8000682:	460a      	mov	r2, r1
 8000684:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 0x100; i++) {
 8000686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800068a:	3301      	adds	r3, #1
 800068c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000694:	2bff      	cmp	r3, #255	; 0xff
 8000696:	ddea      	ble.n	800066e <main+0x92>
	for (int j = 0; j < 0x10000; j++)
 8000698:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800069c:	3301      	adds	r3, #1
 800069e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80006a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80006a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006aa:	dbdc      	blt.n	8000666 <main+0x8a>
		}
	timeRAM = HAL_GetTick() - timeRAM;
 80006ac:	f000 fc04 	bl	8000eb8 <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1ad2      	subs	r2, r2, r3
 80006be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80006c6:	601a      	str	r2, [r3, #0]
	__NOP();
 80006c8:	bf00      	nop

	// uzupełnianie SDRAM
	volatile uint32_t timeSDRAM = HAL_GetTick();
 80006ca:	f000 fbf5 	bl	8000eb8 <HAL_GetTick>
 80006ce:	4602      	mov	r2, r0
 80006d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80006d8:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 0x10000; j++)
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80006e0:	e019      	b.n	8000716 <main+0x13a>
		for (int i = 0; i < 0x100; i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80006e8:	e00c      	b.n	8000704 <main+0x128>
			*(__IO uint8_t*) (SDRAM_BANK_ADDR + (1 * i)) = i; //bajt
 80006ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80006ee:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80006f2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 0x100; i++) {
 80006fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80006fe:	3301      	adds	r3, #1
 8000700:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000708:	2bff      	cmp	r3, #255	; 0xff
 800070a:	ddee      	ble.n	80006ea <main+0x10e>
	for (int j = 0; j < 0x10000; j++)
 800070c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000710:	3301      	adds	r3, #1
 8000712:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800071a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800071e:	dbe0      	blt.n	80006e2 <main+0x106>
			//	*(__IO uint16_t*) (SDRAM_BANK_ADDR + (2 * i)) = i; //pół słowo
			//	*(__IO uint32_t*) (SDRAM_BANK_ADDR + (4 * i)) = i; // słowo
		}
	timeSDRAM = HAL_GetTick() - timeSDRAM;
 8000720:	f000 fbca 	bl	8000eb8 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800072a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1ad2      	subs	r2, r2, r3
 8000732:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000736:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800073a:	601a      	str	r2, [r3, #0]
	__NOP();
 800073c:	bf00      	nop

	srand(timeSDRAM);
 800073e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000742:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fcbb 	bl	80020c4 <srand>

	while (1) {
 800074e:	e7fe      	b.n	800074e <main+0x172>

08000750 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2234      	movs	r2, #52	; 0x34
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fdd1 	bl	8002306 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000774:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <SystemClock_Config+0xd4>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <SystemClock_Config+0xd4>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <SystemClock_Config+0xd4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <SystemClock_Config+0xd8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a25      	ldr	r2, [pc, #148]	; (8000828 <SystemClock_Config+0xd8>)
 8000792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <SystemClock_Config+0xd8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 12;
 80007b8:	230c      	movs	r3, #12
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 192;
 80007bc:	23c0      	movs	r3, #192	; 0xc0
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fe83 	bl	80014dc <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x90>
		Error_Handler();
 80007dc:	f000 f92a 	bl	8000a34 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80007e0:	f000 fe2c 	bl	800143c <HAL_PWREx_EnableOverDrive>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x9e>
		Error_Handler();
 80007ea:	f000 f923 	bl	8000a34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007ee:	230f      	movs	r3, #15
 80007f0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2106      	movs	r1, #6
 800080c:	4618      	mov	r0, r3
 800080e:	f001 f913 	bl	8001a38 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xcc>
		Error_Handler();
 8000818:	f000 f90c 	bl	8000a34 <Error_Handler>
	}
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	; 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000846:	4b43      	ldr	r3, [pc, #268]	; (8000954 <MX_FMC_Init+0x128>)
 8000848:	4a43      	ldr	r2, [pc, #268]	; (8000958 <MX_FMC_Init+0x12c>)
 800084a:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800084c:	4b41      	ldr	r3, [pc, #260]	; (8000954 <MX_FMC_Init+0x128>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000852:	4b40      	ldr	r3, [pc, #256]	; (8000954 <MX_FMC_Init+0x128>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000858:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <MX_FMC_Init+0x128>)
 800085a:	2204      	movs	r2, #4
 800085c:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800085e:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <MX_FMC_Init+0x128>)
 8000860:	2220      	movs	r2, #32
 8000862:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000864:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <MX_FMC_Init+0x128>)
 8000866:	2240      	movs	r2, #64	; 0x40
 8000868:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800086a:	4b3a      	ldr	r3, [pc, #232]	; (8000954 <MX_FMC_Init+0x128>)
 800086c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000870:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000872:	4b38      	ldr	r3, [pc, #224]	; (8000954 <MX_FMC_Init+0x128>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000878:	4b36      	ldr	r3, [pc, #216]	; (8000954 <MX_FMC_Init+0x128>)
 800087a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800087e:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000880:	4b34      	ldr	r3, [pc, #208]	; (8000954 <MX_FMC_Init+0x128>)
 8000882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000888:	4b32      	ldr	r3, [pc, #200]	; (8000954 <MX_FMC_Init+0x128>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	617b      	str	r3, [r7, #20]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000892:	2307      	movs	r3, #7
 8000894:	61bb      	str	r3, [r7, #24]
	SdramTiming.SelfRefreshTime = 4;
 8000896:	2304      	movs	r3, #4
 8000898:	61fb      	str	r3, [r7, #28]
	SdramTiming.RowCycleDelay = 6;
 800089a:	2306      	movs	r3, #6
 800089c:	623b      	str	r3, [r7, #32]
	SdramTiming.WriteRecoveryTime = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
	SdramTiming.RPDelay = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
	SdramTiming.RCDDelay = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4828      	ldr	r0, [pc, #160]	; (8000954 <MX_FMC_Init+0x128>)
 80008b2:	f001 fa73 	bl	8001d9c <HAL_SDRAM_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_FMC_Init+0x94>
		Error_Handler();
 80008bc:	f000 f8ba 	bl	8000a34 <Error_Handler>
#define SDRAM_MODEREG_OPERATING_MODE_STANDARD   	((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_PROGRAMMED	((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE    	((uint16_t)0x0200)
	// SDRAM Initialization Sequence
	FMC_SDRAM_CommandTypeDef cmd;
	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80008c4:	2310      	movs	r3, #16
 80008c6:	60bb      	str	r3, [r7, #8]
	cmd.AutoRefreshNumber = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF);
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d6:	4619      	mov	r1, r3
 80008d8:	481e      	ldr	r0, [pc, #120]	; (8000954 <MX_FMC_Init+0x128>)
 80008da:	f001 fa93 	bl	8001e04 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 faf6 	bl	8000ed0 <HAL_Delay>
	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 80008e4:	2302      	movs	r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80008e8:	2310      	movs	r3, #16
 80008ea:	60bb      	str	r3, [r7, #8]
	cmd.AutoRefreshNumber = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fa:	4619      	mov	r1, r3
 80008fc:	4815      	ldr	r0, [pc, #84]	; (8000954 <MX_FMC_Init+0x128>)
 80008fe:	f001 fa81 	bl	8001e04 <HAL_SDRAM_SendCommand>
	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000902:	2303      	movs	r3, #3
 8000904:	607b      	str	r3, [r7, #4]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000906:	2310      	movs	r3, #16
 8000908:	60bb      	str	r3, [r7, #8]
	cmd.AutoRefreshNumber = 8;
 800090a:	2308      	movs	r3, #8
 800090c:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF);
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	4619      	mov	r1, r3
 800091a:	480e      	ldr	r0, [pc, #56]	; (8000954 <MX_FMC_Init+0x128>)
 800091c:	f001 fa72 	bl	8001e04 <HAL_SDRAM_SendCommand>
	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000920:	2304      	movs	r3, #4
 8000922:	607b      	str	r3, [r7, #4]
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000924:	2310      	movs	r3, #16
 8000926:	60bb      	str	r3, [r7, #8]
	cmd.AutoRefreshNumber = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition =
 800092c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000930:	613b      	str	r3, [r7, #16]
	SDRAM_MODEREG_BURST_LENGTH_1 |
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_2 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_FMC_Init+0x128>)
 800093c:	f001 fa62 	bl	8001e04 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1543);
 8000940:	f240 6107 	movw	r1, #1543	; 0x607
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_FMC_Init+0x128>)
 8000946:	f001 fa92 	bl	8001e6e <HAL_SDRAM_ProgramRefreshRate>
	/* USER CODE END FMC_Init 2 */
}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	; 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000084 	.word	0x20000084
 8000958:	a0000140 	.word	0xa0000140

0800095c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000968:	f043 0310 	orr.w	r3, r3, #16
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	61fb      	str	r3, [r7, #28]
 8000978:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <MX_GPIO_Init+0xd4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a2c      	ldr	r2, [pc, #176]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a26      	ldr	r2, [pc, #152]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <MX_GPIO_Init+0xd4>)
 80009f8:	f043 0320 	orr.w	r3, r3, #32
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0320 	and.w	r3, r3, #32
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_GPIO_Init+0xd4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_MspInit+0x44>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_MspInit+0x44>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x44>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x44>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x44>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <HAL_FMC_MspInit+0x104>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d16f      	bne.n	8000b84 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <HAL_FMC_MspInit+0x104>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <HAL_FMC_MspInit+0x108>)
 8000aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aae:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <HAL_FMC_MspInit+0x108>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6393      	str	r3, [r2, #56]	; 0x38
 8000ab6:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <HAL_FMC_MspInit+0x108>)
 8000ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000ac2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ac6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	482d      	ldr	r0, [pc, #180]	; (8000b94 <HAL_FMC_MspInit+0x10c>)
 8000ade:	f000 fb01 	bl	80010e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000ae2:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ae6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af4:	230c      	movs	r3, #12
 8000af6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	4826      	ldr	r0, [pc, #152]	; (8000b98 <HAL_FMC_MspInit+0x110>)
 8000afe:	f000 faf1 	bl	80010e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000b02:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b14:	230c      	movs	r3, #12
 8000b16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481f      	ldr	r0, [pc, #124]	; (8000b9c <HAL_FMC_MspInit+0x114>)
 8000b1e:	f000 fae1 	bl	80010e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8000b22:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000b26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b34:	230c      	movs	r3, #12
 8000b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <HAL_FMC_MspInit+0x118>)
 8000b3e:	f000 fad1 	bl	80010e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b54:	230c      	movs	r3, #12
 8000b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <HAL_FMC_MspInit+0x11c>)
 8000b5e:	f000 fac1 	bl	80010e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8000b62:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000b66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b74:	230c      	movs	r3, #12
 8000b76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <HAL_FMC_MspInit+0x120>)
 8000b7e:	f000 fab1 	bl	80010e4 <HAL_GPIO_Init>
 8000b82:	e000      	b.n	8000b86 <HAL_FMC_MspInit+0xfe>
    return;
 8000b84:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000b8 	.word	0x200000b8
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40020c00 	.word	0x40020c00
 8000ba0:	40022000 	.word	0x40022000
 8000ba4:	40021400 	.word	0x40021400
 8000ba8:	40021c00 	.word	0x40021c00

08000bac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000bb4:	f7ff ff68 	bl	8000a88 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f940 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return 1;
 8000c18:	2301      	movs	r3, #1
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_kill>:

int _kill(int pid, int sig)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c2e:	f001 fbb9 	bl	80023a4 <__errno>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2216      	movs	r2, #22
 8000c36:	601a      	str	r2, [r3, #0]
  return -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_exit>:

void _exit (int status)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ffe7 	bl	8000c24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c56:	e7fe      	b.n	8000c56 <_exit+0x12>

08000c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e00a      	b.n	8000c80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6a:	f3af 8000 	nop.w
 8000c6e:	4601      	mov	r1, r0
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	60ba      	str	r2, [r7, #8]
 8000c76:	b2ca      	uxtb	r2, r1
 8000c78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf0      	blt.n	8000c6a <_read+0x12>
  }

  return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e009      	b.n	8000cb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf1      	blt.n	8000ca4 <_write+0x12>
  }
  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:

int _close(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:

int _isatty(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f001 fb1e 	bl	80023a4 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20080000 	.word	0x20080000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200000bc 	.word	0x200000bc
 8000d9c:	20000210 	.word	0x20000210

08000da0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dca:	490e      	ldr	r1, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de0:	4c0b      	ldr	r4, [pc, #44]	; (8000e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dee:	f7ff ffd7 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f001 fadd 	bl	80023b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fbf1 	bl	80005dc <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e08:	08003160 	.word	0x08003160
  ldr r2, =_sbss
 8000e0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e10:	20000210 	.word	0x20000210

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>

08000e16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 f92e 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e20:	200f      	movs	r0, #15
 8000e22:	f000 f805 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e26:	f7ff fe0b 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f93b 	bl	80010ca <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f911 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200000c0 	.word	0x200000c0

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200000c0 	.word	0x200000c0

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	05fa0000 	.word	0x05fa0000

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff47 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff5c 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffb0 	bl	8001038 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e175      	b.n	80013f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 8164 	bne.w	80013ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x56>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80be 	beq.w	80013ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b66      	ldr	r3, [pc, #408]	; (8001408 <HAL_GPIO_Init+0x324>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a65      	ldr	r2, [pc, #404]	; (8001408 <HAL_GPIO_Init+0x324>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_GPIO_Init+0x324>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001286:	4a61      	ldr	r2, [pc, #388]	; (800140c <HAL_GPIO_Init+0x328>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_GPIO_Init+0x32c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d037      	beq.n	8001322 <HAL_GPIO_Init+0x23e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_GPIO_Init+0x330>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d031      	beq.n	800131e <HAL_GPIO_Init+0x23a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a56      	ldr	r2, [pc, #344]	; (8001418 <HAL_GPIO_Init+0x334>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x236>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a55      	ldr	r2, [pc, #340]	; (800141c <HAL_GPIO_Init+0x338>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x232>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a54      	ldr	r2, [pc, #336]	; (8001420 <HAL_GPIO_Init+0x33c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x22e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a53      	ldr	r2, [pc, #332]	; (8001424 <HAL_GPIO_Init+0x340>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x22a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_GPIO_Init+0x344>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x226>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a51      	ldr	r2, [pc, #324]	; (800142c <HAL_GPIO_Init+0x348>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x222>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a50      	ldr	r2, [pc, #320]	; (8001430 <HAL_GPIO_Init+0x34c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x21e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4f      	ldr	r2, [pc, #316]	; (8001434 <HAL_GPIO_Init+0x350>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x21a>
 80012fa:	2309      	movs	r3, #9
 80012fc:	e012      	b.n	8001324 <HAL_GPIO_Init+0x240>
 80012fe:	230a      	movs	r3, #10
 8001300:	e010      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001302:	2308      	movs	r3, #8
 8001304:	e00e      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001306:	2307      	movs	r3, #7
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800130a:	2306      	movs	r3, #6
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x240>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x240>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x328>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_GPIO_Init+0x354>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a34      	ldr	r2, [pc, #208]	; (8001438 <HAL_GPIO_Init+0x354>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_GPIO_Init+0x354>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a29      	ldr	r2, [pc, #164]	; (8001438 <HAL_GPIO_Init+0x354>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <HAL_GPIO_Init+0x354>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_GPIO_Init+0x354>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_GPIO_Init+0x354>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_GPIO_Init+0x354>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f ae86 	bls.w	8001104 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40021c00 	.word	0x40021c00
 8001430:	40022000 	.word	0x40022000
 8001434:	40022400 	.word	0x40022400
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800146a:	f7ff fd25 	bl	8000eb8 <HAL_GetTick>
 800146e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001470:	e009      	b.n	8001486 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001472:	f7ff fd21 	bl	8000eb8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001480:	d901      	bls.n	8001486 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e022      	b.n	80014cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001492:	d1ee      	bne.n	8001472 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800149a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a0:	f7ff fd0a 	bl	8000eb8 <HAL_GetTick>
 80014a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014a6:	e009      	b.n	80014bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014a8:	f7ff fd06 	bl	8000eb8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b6:	d901      	bls.n	80014bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e007      	b.n	80014cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014c8:	d1ee      	bne.n	80014a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e29b      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8087 	beq.w	800160e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001500:	4b96      	ldr	r3, [pc, #600]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b04      	cmp	r3, #4
 800150a:	d00c      	beq.n	8001526 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150c:	4b93      	ldr	r3, [pc, #588]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d112      	bne.n	800153e <HAL_RCC_OscConfig+0x62>
 8001518:	4b90      	ldr	r3, [pc, #576]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001524:	d10b      	bne.n	800153e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001526:	4b8d      	ldr	r3, [pc, #564]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d06c      	beq.n	800160c <HAL_RCC_OscConfig+0x130>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d168      	bne.n	800160c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e275      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x7a>
 8001548:	4b84      	ldr	r3, [pc, #528]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a83      	ldr	r2, [pc, #524]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e02e      	b.n	80015b4 <HAL_RCC_OscConfig+0xd8>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x9c>
 800155e:	4b7f      	ldr	r3, [pc, #508]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a7e      	ldr	r2, [pc, #504]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b7c      	ldr	r3, [pc, #496]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7b      	ldr	r2, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e01d      	b.n	80015b4 <HAL_RCC_OscConfig+0xd8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0xc0>
 8001582:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a75      	ldr	r2, [pc, #468]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b73      	ldr	r3, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a72      	ldr	r2, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0xd8>
 800159c:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b6c      	ldr	r3, [pc, #432]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6b      	ldr	r2, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc7c 	bl	8000eb8 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fc78 	bl	8000eb8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e229      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b61      	ldr	r3, [pc, #388]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xe8>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc68 	bl	8000eb8 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fc64 	bl	8000eb8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e215      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x110>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d069      	beq.n	80016ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800161a:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b4d      	ldr	r3, [pc, #308]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d11c      	bne.n	800166c <HAL_RCC_OscConfig+0x190>
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d116      	bne.n	800166c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_RCC_OscConfig+0x17a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e1e9      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	493d      	ldr	r1, [pc, #244]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	e040      	b.n	80016ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d023      	beq.n	80016bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a38      	ldr	r2, [pc, #224]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fc1a 	bl	8000eb8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fc16 	bl	8000eb8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1c7      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4929      	ldr	r1, [pc, #164]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
 80016ba:	e018      	b.n	80016ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fbf6 	bl	8000eb8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff fbf2 	bl	8000eb8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1a3      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_RCC_OscConfig+0x280>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d038      	beq.n	800176c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d019      	beq.n	8001736 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7ff fbd3 	bl	8000eb8 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff fbcf 	bl	8000eb8 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e180      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800172a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x23a>
 8001734:	e01a      	b.n	800176c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_OscConfig+0x280>)
 8001738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fbb9 	bl	8000eb8 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fbb5 	bl	8000eb8 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d903      	bls.n	8001760 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e166      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
 800175c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ee      	bne.n	800174a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80a4 	beq.w	80018c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177a:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10d      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b89      	ldr	r3, [pc, #548]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a88      	ldr	r2, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b86      	ldr	r3, [pc, #536]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a2:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <HAL_RCC_OscConfig+0x4d4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017ae:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x4d4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a7f      	ldr	r2, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x4d4>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fb7d 	bl	8000eb8 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c2:	f7ff fb79 	bl	8000eb8 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b64      	cmp	r3, #100	; 0x64
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e12a      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d4:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x4d4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x31a>
 80017e8:	4b70      	ldr	r3, [pc, #448]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	4a6f      	ldr	r2, [pc, #444]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	; 0x70
 80017f4:	e02d      	b.n	8001852 <HAL_RCC_OscConfig+0x376>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x33c>
 80017fe:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a6a      	ldr	r2, [pc, #424]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a67      	ldr	r2, [pc, #412]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	e01c      	b.n	8001852 <HAL_RCC_OscConfig+0x376>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d10c      	bne.n	800183a <HAL_RCC_OscConfig+0x35e>
 8001820:	4b62      	ldr	r3, [pc, #392]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a61      	ldr	r2, [pc, #388]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
 800182c:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a5e      	ldr	r2, [pc, #376]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
 8001838:	e00b      	b.n	8001852 <HAL_RCC_OscConfig+0x376>
 800183a:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a5b      	ldr	r2, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	4a58      	ldr	r2, [pc, #352]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d015      	beq.n	8001886 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fb2d 	bl	8000eb8 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7ff fb29 	bl	8000eb8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0d8      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ee      	beq.n	8001862 <HAL_RCC_OscConfig+0x386>
 8001884:	e014      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff fb17 	bl	8000eb8 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff fb13 	bl	8000eb8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	; 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e0c2      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ee      	bne.n	800188e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d105      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80018bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80ae 	beq.w	8001a28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	4b37      	ldr	r3, [pc, #220]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d06d      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d14b      	bne.n	8001978 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a31      	ldr	r2, [pc, #196]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80018e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fae4 	bl	8000eb8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fae0 	bl	8000eb8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e091      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	041b      	lsls	r3, r3, #16
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	071b      	lsls	r3, r3, #28
 800193e:	491b      	ldr	r1, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800194a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fab2 	bl	8000eb8 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff faae 	bl	8000eb8 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e05f      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x47c>
 8001976:	e057      	b.n	8001a28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 800197e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fa98 	bl	8000eb8 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fa94 	bl	8000eb8 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e045      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x4b0>
 80019aa:	e03d      	b.n	8001a28 <HAL_RCC_OscConfig+0x54c>
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_RCC_OscConfig+0x558>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d030      	beq.n	8001a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d129      	bne.n	8001a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d122      	bne.n	8001a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d119      	bne.n	8001a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d10f      	bne.n	8001a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0d0      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d910      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 020f 	bic.w	r2, r3, #15
 8001a66:	4965      	ldr	r1, [pc, #404]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b8      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	494d      	ldr	r1, [pc, #308]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d040      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d115      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e07f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e073      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e06b      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4936      	ldr	r1, [pc, #216]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f9c4 	bl	8000eb8 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff f9c0 	bl	8000eb8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e053      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d210      	bcs.n	8001b8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 020f 	bic.w	r2, r3, #15
 8001b72:	4922      	ldr	r1, [pc, #136]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e032      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4916      	ldr	r1, [pc, #88]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	490e      	ldr	r1, [pc, #56]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bca:	f000 f821 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	490a      	ldr	r1, [pc, #40]	; (8001c04 <HAL_RCC_ClockConfig+0x1cc>)
 8001bdc:	5ccb      	ldrb	r3, [r1, r3]
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1d0>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1d4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f920 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00
 8001c00:	40023800 	.word	0x40023800
 8001c04:	08003060 	.word	0x08003060
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b090      	sub	sp, #64	; 0x40
 8001c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c28:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d00d      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x40>
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	f200 80a1 	bhi.w	8001d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x34>
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c42:	e09b      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c48:	e09b      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c4a:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c4e:	e098      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c50:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c5a:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d028      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	099b      	lsrs	r3, r3, #6
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	623b      	str	r3, [r7, #32]
 8001c70:	627a      	str	r2, [r7, #36]	; 0x24
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c7c:	fb03 f201 	mul.w	r2, r3, r1
 8001c80:	2300      	movs	r3, #0
 8001c82:	fb00 f303 	mul.w	r3, r0, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	4a43      	ldr	r2, [pc, #268]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c90:	460a      	mov	r2, r1
 8001c92:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c96:	4413      	add	r3, r2
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	61fa      	str	r2, [r7, #28]
 8001ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001caa:	f7fe fb19 	bl	80002e0 <__aeabi_uldivmod>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb6:	e053      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	617a      	str	r2, [r7, #20]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cca:	f04f 0b00 	mov.w	fp, #0
 8001cce:	4652      	mov	r2, sl
 8001cd0:	465b      	mov	r3, fp
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	0159      	lsls	r1, r3, #5
 8001cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce0:	0150      	lsls	r0, r2, #5
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8001cea:	eb63 090b 	sbc.w	r9, r3, fp
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d02:	ebb2 0408 	subs.w	r4, r2, r8
 8001d06:	eb63 0509 	sbc.w	r5, r3, r9
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	00eb      	lsls	r3, r5, #3
 8001d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d18:	00e2      	lsls	r2, r4, #3
 8001d1a:	4614      	mov	r4, r2
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	eb14 030a 	adds.w	r3, r4, sl
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	eb45 030b 	adc.w	r3, r5, fp
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d36:	4629      	mov	r1, r5
 8001d38:	028b      	lsls	r3, r1, #10
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d40:	4621      	mov	r1, r4
 8001d42:	028a      	lsls	r2, r1, #10
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	60fa      	str	r2, [r7, #12]
 8001d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d54:	f7fe fac4 	bl	80002e0 <__aeabi_uldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3740      	adds	r7, #64	; 0x40
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	017d7840 	.word	0x017d7840

08001d9c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e025      	b.n	8001dfc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d106      	bne.n	8001dca <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7fe fef1 	bl	8000bac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	f000 f86f 	bl	8001ec0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	461a      	mov	r2, r3
 8001dec:	6839      	ldr	r1, [r7, #0]
 8001dee:	f000 f8c3 	bl	8001f78 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e16:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d101      	bne.n	8001e22 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e021      	b.n	8001e66 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d002      	beq.n	8001e2e <HAL_SDRAM_SendCommand+0x2a>
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d118      	bne.n	8001e60 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f904 	bl	800204c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d104      	bne.n	8001e56 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2205      	movs	r2, #5
 8001e50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e54:	e006      	b.n	8001e64 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001e5e:	e001      	b.n	8001e64 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d101      	bne.n	8001e88 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
 8001e86:	e016      	b.n	8001eb6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d10f      	bne.n	8001eb4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6839      	ldr	r1, [r7, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f8f6 	bl	8002094 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d121      	bne.n	8001f16 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <FMC_SDRAM_Init+0xb4>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	6851      	ldr	r1, [r2, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	68d2      	ldr	r2, [r2, #12]
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	6912      	ldr	r2, [r2, #16]
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	6952      	ldr	r2, [r2, #20]
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6992      	ldr	r2, [r2, #24]
 8001efa:	4311      	orrs	r1, r2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	69d2      	ldr	r2, [r2, #28]
 8001f00:	4311      	orrs	r1, r2
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	6a12      	ldr	r2, [r2, #32]
 8001f06:	4311      	orrs	r1, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e026      	b.n	8001f64 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	69d9      	ldr	r1, [r3, #28]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4319      	orrs	r1, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <FMC_SDRAM_Init+0xb4>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	6851      	ldr	r1, [r2, #4]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	6892      	ldr	r2, [r2, #8]
 8001f44:	4311      	orrs	r1, r2
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	68d2      	ldr	r2, [r2, #12]
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	6912      	ldr	r2, [r2, #16]
 8001f50:	4311      	orrs	r1, r2
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	6952      	ldr	r2, [r2, #20]
 8001f56:	4311      	orrs	r1, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6992      	ldr	r2, [r2, #24]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	ffff8000 	.word	0xffff8000

08001f78 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d128      	bne.n	8001fdc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	1e59      	subs	r1, r3, #1
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	4319      	orrs	r1, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	4319      	orrs	r1, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	031b      	lsls	r3, r3, #12
 8001fb4:	4319      	orrs	r1, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	4319      	orrs	r1, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	051b      	lsls	r3, r3, #20
 8001fc8:	4319      	orrs	r1, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	e02d      	b.n	8002038 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <FMC_SDRAM_Timing_Init+0xd0>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	68d2      	ldr	r2, [r2, #12]
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	0311      	lsls	r1, r2, #12
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	6952      	ldr	r2, [r2, #20]
 8001ff0:	3a01      	subs	r2, #1
 8001ff2:	0512      	lsls	r2, r2, #20
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	1e59      	subs	r1, r3, #1
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	4319      	orrs	r1, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	3b01      	subs	r3, #1
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	4319      	orrs	r1, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	3b01      	subs	r3, #1
 8002024:	041b      	lsls	r3, r3, #16
 8002026:	4319      	orrs	r1, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	3b01      	subs	r3, #1
 800202e:	061b      	lsls	r3, r3, #24
 8002030:	430b      	orrs	r3, r1
 8002032:	431a      	orrs	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	ff0f0fff 	.word	0xff0f0fff

0800204c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <FMC_SDRAM_SendCommand+0x44>)
 800205e:	4013      	ands	r3, r2
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	6811      	ldr	r1, [r2, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	6852      	ldr	r2, [r2, #4]
 8002068:	4311      	orrs	r1, r2
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	6892      	ldr	r2, [r2, #8]
 800206e:	3a01      	subs	r2, #1
 8002070:	0152      	lsls	r2, r2, #5
 8002072:	4311      	orrs	r1, r2
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	68d2      	ldr	r2, [r2, #12]
 8002078:	0252      	lsls	r2, r2, #9
 800207a:	430a      	orrs	r2, r1
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	ffc00000 	.word	0xffc00000

08002094 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	0052      	lsls	r2, r2, #1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	ffffc001 	.word	0xffffc001

080020c4 <srand>:
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <srand+0x44>)
 80020c8:	681d      	ldr	r5, [r3, #0]
 80020ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020cc:	4604      	mov	r4, r0
 80020ce:	b9b3      	cbnz	r3, 80020fe <srand+0x3a>
 80020d0:	2018      	movs	r0, #24
 80020d2:	f000 f9fd 	bl	80024d0 <malloc>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6328      	str	r0, [r5, #48]	; 0x30
 80020da:	b920      	cbnz	r0, 80020e6 <srand+0x22>
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <srand+0x48>)
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <srand+0x4c>)
 80020e0:	2146      	movs	r1, #70	; 0x46
 80020e2:	f000 f98b 	bl	80023fc <__assert_func>
 80020e6:	490b      	ldr	r1, [pc, #44]	; (8002114 <srand+0x50>)
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <srand+0x54>)
 80020ea:	e9c0 1300 	strd	r1, r3, [r0]
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <srand+0x58>)
 80020f0:	6083      	str	r3, [r0, #8]
 80020f2:	230b      	movs	r3, #11
 80020f4:	8183      	strh	r3, [r0, #12]
 80020f6:	2100      	movs	r1, #0
 80020f8:	2001      	movs	r0, #1
 80020fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80020fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002100:	2200      	movs	r2, #0
 8002102:	611c      	str	r4, [r3, #16]
 8002104:	615a      	str	r2, [r3, #20]
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	20000064 	.word	0x20000064
 800210c:	08003070 	.word	0x08003070
 8002110:	08003087 	.word	0x08003087
 8002114:	abcd330e 	.word	0xabcd330e
 8002118:	e66d1234 	.word	0xe66d1234
 800211c:	0005deec 	.word	0x0005deec

08002120 <std>:
 8002120:	2300      	movs	r3, #0
 8002122:	b510      	push	{r4, lr}
 8002124:	4604      	mov	r4, r0
 8002126:	e9c0 3300 	strd	r3, r3, [r0]
 800212a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800212e:	6083      	str	r3, [r0, #8]
 8002130:	8181      	strh	r1, [r0, #12]
 8002132:	6643      	str	r3, [r0, #100]	; 0x64
 8002134:	81c2      	strh	r2, [r0, #14]
 8002136:	6183      	str	r3, [r0, #24]
 8002138:	4619      	mov	r1, r3
 800213a:	2208      	movs	r2, #8
 800213c:	305c      	adds	r0, #92	; 0x5c
 800213e:	f000 f8e2 	bl	8002306 <memset>
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <std+0x38>)
 8002144:	6263      	str	r3, [r4, #36]	; 0x24
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <std+0x3c>)
 8002148:	62a3      	str	r3, [r4, #40]	; 0x28
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <std+0x40>)
 800214c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <std+0x44>)
 8002150:	6224      	str	r4, [r4, #32]
 8002152:	6323      	str	r3, [r4, #48]	; 0x30
 8002154:	bd10      	pop	{r4, pc}
 8002156:	bf00      	nop
 8002158:	08002281 	.word	0x08002281
 800215c:	080022a3 	.word	0x080022a3
 8002160:	080022db 	.word	0x080022db
 8002164:	080022ff 	.word	0x080022ff

08002168 <stdio_exit_handler>:
 8002168:	4a02      	ldr	r2, [pc, #8]	; (8002174 <stdio_exit_handler+0xc>)
 800216a:	4903      	ldr	r1, [pc, #12]	; (8002178 <stdio_exit_handler+0x10>)
 800216c:	4803      	ldr	r0, [pc, #12]	; (800217c <stdio_exit_handler+0x14>)
 800216e:	f000 b869 	b.w	8002244 <_fwalk_sglue>
 8002172:	bf00      	nop
 8002174:	2000000c 	.word	0x2000000c
 8002178:	08002745 	.word	0x08002745
 800217c:	20000018 	.word	0x20000018

08002180 <cleanup_stdio>:
 8002180:	6841      	ldr	r1, [r0, #4]
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <cleanup_stdio+0x34>)
 8002184:	4299      	cmp	r1, r3
 8002186:	b510      	push	{r4, lr}
 8002188:	4604      	mov	r4, r0
 800218a:	d001      	beq.n	8002190 <cleanup_stdio+0x10>
 800218c:	f000 fada 	bl	8002744 <_fflush_r>
 8002190:	68a1      	ldr	r1, [r4, #8]
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <cleanup_stdio+0x38>)
 8002194:	4299      	cmp	r1, r3
 8002196:	d002      	beq.n	800219e <cleanup_stdio+0x1e>
 8002198:	4620      	mov	r0, r4
 800219a:	f000 fad3 	bl	8002744 <_fflush_r>
 800219e:	68e1      	ldr	r1, [r4, #12]
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <cleanup_stdio+0x3c>)
 80021a2:	4299      	cmp	r1, r3
 80021a4:	d004      	beq.n	80021b0 <cleanup_stdio+0x30>
 80021a6:	4620      	mov	r0, r4
 80021a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021ac:	f000 baca 	b.w	8002744 <_fflush_r>
 80021b0:	bd10      	pop	{r4, pc}
 80021b2:	bf00      	nop
 80021b4:	200000c4 	.word	0x200000c4
 80021b8:	2000012c 	.word	0x2000012c
 80021bc:	20000194 	.word	0x20000194

080021c0 <global_stdio_init.part.0>:
 80021c0:	b510      	push	{r4, lr}
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <global_stdio_init.part.0+0x30>)
 80021c4:	4c0b      	ldr	r4, [pc, #44]	; (80021f4 <global_stdio_init.part.0+0x34>)
 80021c6:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <global_stdio_init.part.0+0x38>)
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	4620      	mov	r0, r4
 80021cc:	2200      	movs	r2, #0
 80021ce:	2104      	movs	r1, #4
 80021d0:	f7ff ffa6 	bl	8002120 <std>
 80021d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80021d8:	2201      	movs	r2, #1
 80021da:	2109      	movs	r1, #9
 80021dc:	f7ff ffa0 	bl	8002120 <std>
 80021e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80021e4:	2202      	movs	r2, #2
 80021e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021ea:	2112      	movs	r1, #18
 80021ec:	f7ff bf98 	b.w	8002120 <std>
 80021f0:	200001fc 	.word	0x200001fc
 80021f4:	200000c4 	.word	0x200000c4
 80021f8:	08002169 	.word	0x08002169

080021fc <__sfp_lock_acquire>:
 80021fc:	4801      	ldr	r0, [pc, #4]	; (8002204 <__sfp_lock_acquire+0x8>)
 80021fe:	f000 b8fb 	b.w	80023f8 <__retarget_lock_acquire_recursive>
 8002202:	bf00      	nop
 8002204:	20000205 	.word	0x20000205

08002208 <__sfp_lock_release>:
 8002208:	4801      	ldr	r0, [pc, #4]	; (8002210 <__sfp_lock_release+0x8>)
 800220a:	f000 b8f6 	b.w	80023fa <__retarget_lock_release_recursive>
 800220e:	bf00      	nop
 8002210:	20000205 	.word	0x20000205

08002214 <__sinit>:
 8002214:	b510      	push	{r4, lr}
 8002216:	4604      	mov	r4, r0
 8002218:	f7ff fff0 	bl	80021fc <__sfp_lock_acquire>
 800221c:	6a23      	ldr	r3, [r4, #32]
 800221e:	b11b      	cbz	r3, 8002228 <__sinit+0x14>
 8002220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002224:	f7ff bff0 	b.w	8002208 <__sfp_lock_release>
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__sinit+0x28>)
 800222a:	6223      	str	r3, [r4, #32]
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__sinit+0x2c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f5      	bne.n	8002220 <__sinit+0xc>
 8002234:	f7ff ffc4 	bl	80021c0 <global_stdio_init.part.0>
 8002238:	e7f2      	b.n	8002220 <__sinit+0xc>
 800223a:	bf00      	nop
 800223c:	08002181 	.word	0x08002181
 8002240:	200001fc 	.word	0x200001fc

08002244 <_fwalk_sglue>:
 8002244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002248:	4607      	mov	r7, r0
 800224a:	4688      	mov	r8, r1
 800224c:	4614      	mov	r4, r2
 800224e:	2600      	movs	r6, #0
 8002250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002254:	f1b9 0901 	subs.w	r9, r9, #1
 8002258:	d505      	bpl.n	8002266 <_fwalk_sglue+0x22>
 800225a:	6824      	ldr	r4, [r4, #0]
 800225c:	2c00      	cmp	r4, #0
 800225e:	d1f7      	bne.n	8002250 <_fwalk_sglue+0xc>
 8002260:	4630      	mov	r0, r6
 8002262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002266:	89ab      	ldrh	r3, [r5, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d907      	bls.n	800227c <_fwalk_sglue+0x38>
 800226c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002270:	3301      	adds	r3, #1
 8002272:	d003      	beq.n	800227c <_fwalk_sglue+0x38>
 8002274:	4629      	mov	r1, r5
 8002276:	4638      	mov	r0, r7
 8002278:	47c0      	blx	r8
 800227a:	4306      	orrs	r6, r0
 800227c:	3568      	adds	r5, #104	; 0x68
 800227e:	e7e9      	b.n	8002254 <_fwalk_sglue+0x10>

08002280 <__sread>:
 8002280:	b510      	push	{r4, lr}
 8002282:	460c      	mov	r4, r1
 8002284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002288:	f000 f868 	bl	800235c <_read_r>
 800228c:	2800      	cmp	r0, #0
 800228e:	bfab      	itete	ge
 8002290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002292:	89a3      	ldrhlt	r3, [r4, #12]
 8002294:	181b      	addge	r3, r3, r0
 8002296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800229a:	bfac      	ite	ge
 800229c:	6563      	strge	r3, [r4, #84]	; 0x54
 800229e:	81a3      	strhlt	r3, [r4, #12]
 80022a0:	bd10      	pop	{r4, pc}

080022a2 <__swrite>:
 80022a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a6:	461f      	mov	r7, r3
 80022a8:	898b      	ldrh	r3, [r1, #12]
 80022aa:	05db      	lsls	r3, r3, #23
 80022ac:	4605      	mov	r5, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	4616      	mov	r6, r2
 80022b2:	d505      	bpl.n	80022c0 <__swrite+0x1e>
 80022b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b8:	2302      	movs	r3, #2
 80022ba:	2200      	movs	r2, #0
 80022bc:	f000 f83c 	bl	8002338 <_lseek_r>
 80022c0:	89a3      	ldrh	r3, [r4, #12]
 80022c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022ca:	81a3      	strh	r3, [r4, #12]
 80022cc:	4632      	mov	r2, r6
 80022ce:	463b      	mov	r3, r7
 80022d0:	4628      	mov	r0, r5
 80022d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022d6:	f000 b853 	b.w	8002380 <_write_r>

080022da <__sseek>:
 80022da:	b510      	push	{r4, lr}
 80022dc:	460c      	mov	r4, r1
 80022de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e2:	f000 f829 	bl	8002338 <_lseek_r>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	bf15      	itete	ne
 80022ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80022ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022f6:	81a3      	strheq	r3, [r4, #12]
 80022f8:	bf18      	it	ne
 80022fa:	81a3      	strhne	r3, [r4, #12]
 80022fc:	bd10      	pop	{r4, pc}

080022fe <__sclose>:
 80022fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002302:	f000 b809 	b.w	8002318 <_close_r>

08002306 <memset>:
 8002306:	4402      	add	r2, r0
 8002308:	4603      	mov	r3, r0
 800230a:	4293      	cmp	r3, r2
 800230c:	d100      	bne.n	8002310 <memset+0xa>
 800230e:	4770      	bx	lr
 8002310:	f803 1b01 	strb.w	r1, [r3], #1
 8002314:	e7f9      	b.n	800230a <memset+0x4>
	...

08002318 <_close_r>:
 8002318:	b538      	push	{r3, r4, r5, lr}
 800231a:	4d06      	ldr	r5, [pc, #24]	; (8002334 <_close_r+0x1c>)
 800231c:	2300      	movs	r3, #0
 800231e:	4604      	mov	r4, r0
 8002320:	4608      	mov	r0, r1
 8002322:	602b      	str	r3, [r5, #0]
 8002324:	f7fe fcd1 	bl	8000cca <_close>
 8002328:	1c43      	adds	r3, r0, #1
 800232a:	d102      	bne.n	8002332 <_close_r+0x1a>
 800232c:	682b      	ldr	r3, [r5, #0]
 800232e:	b103      	cbz	r3, 8002332 <_close_r+0x1a>
 8002330:	6023      	str	r3, [r4, #0]
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	20000200 	.word	0x20000200

08002338 <_lseek_r>:
 8002338:	b538      	push	{r3, r4, r5, lr}
 800233a:	4d07      	ldr	r5, [pc, #28]	; (8002358 <_lseek_r+0x20>)
 800233c:	4604      	mov	r4, r0
 800233e:	4608      	mov	r0, r1
 8002340:	4611      	mov	r1, r2
 8002342:	2200      	movs	r2, #0
 8002344:	602a      	str	r2, [r5, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	f7fe fce6 	bl	8000d18 <_lseek>
 800234c:	1c43      	adds	r3, r0, #1
 800234e:	d102      	bne.n	8002356 <_lseek_r+0x1e>
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	b103      	cbz	r3, 8002356 <_lseek_r+0x1e>
 8002354:	6023      	str	r3, [r4, #0]
 8002356:	bd38      	pop	{r3, r4, r5, pc}
 8002358:	20000200 	.word	0x20000200

0800235c <_read_r>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4d07      	ldr	r5, [pc, #28]	; (800237c <_read_r+0x20>)
 8002360:	4604      	mov	r4, r0
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	2200      	movs	r2, #0
 8002368:	602a      	str	r2, [r5, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	f7fe fc74 	bl	8000c58 <_read>
 8002370:	1c43      	adds	r3, r0, #1
 8002372:	d102      	bne.n	800237a <_read_r+0x1e>
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	b103      	cbz	r3, 800237a <_read_r+0x1e>
 8002378:	6023      	str	r3, [r4, #0]
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	20000200 	.word	0x20000200

08002380 <_write_r>:
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4d07      	ldr	r5, [pc, #28]	; (80023a0 <_write_r+0x20>)
 8002384:	4604      	mov	r4, r0
 8002386:	4608      	mov	r0, r1
 8002388:	4611      	mov	r1, r2
 800238a:	2200      	movs	r2, #0
 800238c:	602a      	str	r2, [r5, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	f7fe fc7f 	bl	8000c92 <_write>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d102      	bne.n	800239e <_write_r+0x1e>
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	b103      	cbz	r3, 800239e <_write_r+0x1e>
 800239c:	6023      	str	r3, [r4, #0]
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	20000200 	.word	0x20000200

080023a4 <__errno>:
 80023a4:	4b01      	ldr	r3, [pc, #4]	; (80023ac <__errno+0x8>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000064 	.word	0x20000064

080023b0 <__libc_init_array>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4d0d      	ldr	r5, [pc, #52]	; (80023e8 <__libc_init_array+0x38>)
 80023b4:	4c0d      	ldr	r4, [pc, #52]	; (80023ec <__libc_init_array+0x3c>)
 80023b6:	1b64      	subs	r4, r4, r5
 80023b8:	10a4      	asrs	r4, r4, #2
 80023ba:	2600      	movs	r6, #0
 80023bc:	42a6      	cmp	r6, r4
 80023be:	d109      	bne.n	80023d4 <__libc_init_array+0x24>
 80023c0:	4d0b      	ldr	r5, [pc, #44]	; (80023f0 <__libc_init_array+0x40>)
 80023c2:	4c0c      	ldr	r4, [pc, #48]	; (80023f4 <__libc_init_array+0x44>)
 80023c4:	f000 fe40 	bl	8003048 <_init>
 80023c8:	1b64      	subs	r4, r4, r5
 80023ca:	10a4      	asrs	r4, r4, #2
 80023cc:	2600      	movs	r6, #0
 80023ce:	42a6      	cmp	r6, r4
 80023d0:	d105      	bne.n	80023de <__libc_init_array+0x2e>
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d8:	4798      	blx	r3
 80023da:	3601      	adds	r6, #1
 80023dc:	e7ee      	b.n	80023bc <__libc_init_array+0xc>
 80023de:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e2:	4798      	blx	r3
 80023e4:	3601      	adds	r6, #1
 80023e6:	e7f2      	b.n	80023ce <__libc_init_array+0x1e>
 80023e8:	08003158 	.word	0x08003158
 80023ec:	08003158 	.word	0x08003158
 80023f0:	08003158 	.word	0x08003158
 80023f4:	0800315c 	.word	0x0800315c

080023f8 <__retarget_lock_acquire_recursive>:
 80023f8:	4770      	bx	lr

080023fa <__retarget_lock_release_recursive>:
 80023fa:	4770      	bx	lr

080023fc <__assert_func>:
 80023fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023fe:	4614      	mov	r4, r2
 8002400:	461a      	mov	r2, r3
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <__assert_func+0x2c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4605      	mov	r5, r0
 8002408:	68d8      	ldr	r0, [r3, #12]
 800240a:	b14c      	cbz	r4, 8002420 <__assert_func+0x24>
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <__assert_func+0x30>)
 800240e:	9100      	str	r1, [sp, #0]
 8002410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002414:	4906      	ldr	r1, [pc, #24]	; (8002430 <__assert_func+0x34>)
 8002416:	462b      	mov	r3, r5
 8002418:	f000 f9bc 	bl	8002794 <fiprintf>
 800241c:	f000 f9dc 	bl	80027d8 <abort>
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__assert_func+0x38>)
 8002422:	461c      	mov	r4, r3
 8002424:	e7f3      	b.n	800240e <__assert_func+0x12>
 8002426:	bf00      	nop
 8002428:	20000064 	.word	0x20000064
 800242c:	080030df 	.word	0x080030df
 8002430:	080030ec 	.word	0x080030ec
 8002434:	0800311a 	.word	0x0800311a

08002438 <_free_r>:
 8002438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800243a:	2900      	cmp	r1, #0
 800243c:	d044      	beq.n	80024c8 <_free_r+0x90>
 800243e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002442:	9001      	str	r0, [sp, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f1a1 0404 	sub.w	r4, r1, #4
 800244a:	bfb8      	it	lt
 800244c:	18e4      	addlt	r4, r4, r3
 800244e:	f000 f8e7 	bl	8002620 <__malloc_lock>
 8002452:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <_free_r+0x94>)
 8002454:	9801      	ldr	r0, [sp, #4]
 8002456:	6813      	ldr	r3, [r2, #0]
 8002458:	b933      	cbnz	r3, 8002468 <_free_r+0x30>
 800245a:	6063      	str	r3, [r4, #4]
 800245c:	6014      	str	r4, [r2, #0]
 800245e:	b003      	add	sp, #12
 8002460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002464:	f000 b8e2 	b.w	800262c <__malloc_unlock>
 8002468:	42a3      	cmp	r3, r4
 800246a:	d908      	bls.n	800247e <_free_r+0x46>
 800246c:	6825      	ldr	r5, [r4, #0]
 800246e:	1961      	adds	r1, r4, r5
 8002470:	428b      	cmp	r3, r1
 8002472:	bf01      	itttt	eq
 8002474:	6819      	ldreq	r1, [r3, #0]
 8002476:	685b      	ldreq	r3, [r3, #4]
 8002478:	1949      	addeq	r1, r1, r5
 800247a:	6021      	streq	r1, [r4, #0]
 800247c:	e7ed      	b.n	800245a <_free_r+0x22>
 800247e:	461a      	mov	r2, r3
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	b10b      	cbz	r3, 8002488 <_free_r+0x50>
 8002484:	42a3      	cmp	r3, r4
 8002486:	d9fa      	bls.n	800247e <_free_r+0x46>
 8002488:	6811      	ldr	r1, [r2, #0]
 800248a:	1855      	adds	r5, r2, r1
 800248c:	42a5      	cmp	r5, r4
 800248e:	d10b      	bne.n	80024a8 <_free_r+0x70>
 8002490:	6824      	ldr	r4, [r4, #0]
 8002492:	4421      	add	r1, r4
 8002494:	1854      	adds	r4, r2, r1
 8002496:	42a3      	cmp	r3, r4
 8002498:	6011      	str	r1, [r2, #0]
 800249a:	d1e0      	bne.n	800245e <_free_r+0x26>
 800249c:	681c      	ldr	r4, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	6053      	str	r3, [r2, #4]
 80024a2:	440c      	add	r4, r1
 80024a4:	6014      	str	r4, [r2, #0]
 80024a6:	e7da      	b.n	800245e <_free_r+0x26>
 80024a8:	d902      	bls.n	80024b0 <_free_r+0x78>
 80024aa:	230c      	movs	r3, #12
 80024ac:	6003      	str	r3, [r0, #0]
 80024ae:	e7d6      	b.n	800245e <_free_r+0x26>
 80024b0:	6825      	ldr	r5, [r4, #0]
 80024b2:	1961      	adds	r1, r4, r5
 80024b4:	428b      	cmp	r3, r1
 80024b6:	bf04      	itt	eq
 80024b8:	6819      	ldreq	r1, [r3, #0]
 80024ba:	685b      	ldreq	r3, [r3, #4]
 80024bc:	6063      	str	r3, [r4, #4]
 80024be:	bf04      	itt	eq
 80024c0:	1949      	addeq	r1, r1, r5
 80024c2:	6021      	streq	r1, [r4, #0]
 80024c4:	6054      	str	r4, [r2, #4]
 80024c6:	e7ca      	b.n	800245e <_free_r+0x26>
 80024c8:	b003      	add	sp, #12
 80024ca:	bd30      	pop	{r4, r5, pc}
 80024cc:	20000208 	.word	0x20000208

080024d0 <malloc>:
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <malloc+0xc>)
 80024d2:	4601      	mov	r1, r0
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	f000 b823 	b.w	8002520 <_malloc_r>
 80024da:	bf00      	nop
 80024dc:	20000064 	.word	0x20000064

080024e0 <sbrk_aligned>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4e0e      	ldr	r6, [pc, #56]	; (800251c <sbrk_aligned+0x3c>)
 80024e4:	460c      	mov	r4, r1
 80024e6:	6831      	ldr	r1, [r6, #0]
 80024e8:	4605      	mov	r5, r0
 80024ea:	b911      	cbnz	r1, 80024f2 <sbrk_aligned+0x12>
 80024ec:	f000 f964 	bl	80027b8 <_sbrk_r>
 80024f0:	6030      	str	r0, [r6, #0]
 80024f2:	4621      	mov	r1, r4
 80024f4:	4628      	mov	r0, r5
 80024f6:	f000 f95f 	bl	80027b8 <_sbrk_r>
 80024fa:	1c43      	adds	r3, r0, #1
 80024fc:	d00a      	beq.n	8002514 <sbrk_aligned+0x34>
 80024fe:	1cc4      	adds	r4, r0, #3
 8002500:	f024 0403 	bic.w	r4, r4, #3
 8002504:	42a0      	cmp	r0, r4
 8002506:	d007      	beq.n	8002518 <sbrk_aligned+0x38>
 8002508:	1a21      	subs	r1, r4, r0
 800250a:	4628      	mov	r0, r5
 800250c:	f000 f954 	bl	80027b8 <_sbrk_r>
 8002510:	3001      	adds	r0, #1
 8002512:	d101      	bne.n	8002518 <sbrk_aligned+0x38>
 8002514:	f04f 34ff 	mov.w	r4, #4294967295
 8002518:	4620      	mov	r0, r4
 800251a:	bd70      	pop	{r4, r5, r6, pc}
 800251c:	2000020c 	.word	0x2000020c

08002520 <_malloc_r>:
 8002520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002524:	1ccd      	adds	r5, r1, #3
 8002526:	f025 0503 	bic.w	r5, r5, #3
 800252a:	3508      	adds	r5, #8
 800252c:	2d0c      	cmp	r5, #12
 800252e:	bf38      	it	cc
 8002530:	250c      	movcc	r5, #12
 8002532:	2d00      	cmp	r5, #0
 8002534:	4607      	mov	r7, r0
 8002536:	db01      	blt.n	800253c <_malloc_r+0x1c>
 8002538:	42a9      	cmp	r1, r5
 800253a:	d905      	bls.n	8002548 <_malloc_r+0x28>
 800253c:	230c      	movs	r3, #12
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	2600      	movs	r6, #0
 8002542:	4630      	mov	r0, r6
 8002544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002548:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800261c <_malloc_r+0xfc>
 800254c:	f000 f868 	bl	8002620 <__malloc_lock>
 8002550:	f8d8 3000 	ldr.w	r3, [r8]
 8002554:	461c      	mov	r4, r3
 8002556:	bb5c      	cbnz	r4, 80025b0 <_malloc_r+0x90>
 8002558:	4629      	mov	r1, r5
 800255a:	4638      	mov	r0, r7
 800255c:	f7ff ffc0 	bl	80024e0 <sbrk_aligned>
 8002560:	1c43      	adds	r3, r0, #1
 8002562:	4604      	mov	r4, r0
 8002564:	d155      	bne.n	8002612 <_malloc_r+0xf2>
 8002566:	f8d8 4000 	ldr.w	r4, [r8]
 800256a:	4626      	mov	r6, r4
 800256c:	2e00      	cmp	r6, #0
 800256e:	d145      	bne.n	80025fc <_malloc_r+0xdc>
 8002570:	2c00      	cmp	r4, #0
 8002572:	d048      	beq.n	8002606 <_malloc_r+0xe6>
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	4631      	mov	r1, r6
 8002578:	4638      	mov	r0, r7
 800257a:	eb04 0903 	add.w	r9, r4, r3
 800257e:	f000 f91b 	bl	80027b8 <_sbrk_r>
 8002582:	4581      	cmp	r9, r0
 8002584:	d13f      	bne.n	8002606 <_malloc_r+0xe6>
 8002586:	6821      	ldr	r1, [r4, #0]
 8002588:	1a6d      	subs	r5, r5, r1
 800258a:	4629      	mov	r1, r5
 800258c:	4638      	mov	r0, r7
 800258e:	f7ff ffa7 	bl	80024e0 <sbrk_aligned>
 8002592:	3001      	adds	r0, #1
 8002594:	d037      	beq.n	8002606 <_malloc_r+0xe6>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	442b      	add	r3, r5
 800259a:	6023      	str	r3, [r4, #0]
 800259c:	f8d8 3000 	ldr.w	r3, [r8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d038      	beq.n	8002616 <_malloc_r+0xf6>
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	42a2      	cmp	r2, r4
 80025a8:	d12b      	bne.n	8002602 <_malloc_r+0xe2>
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	e00f      	b.n	80025d0 <_malloc_r+0xb0>
 80025b0:	6822      	ldr	r2, [r4, #0]
 80025b2:	1b52      	subs	r2, r2, r5
 80025b4:	d41f      	bmi.n	80025f6 <_malloc_r+0xd6>
 80025b6:	2a0b      	cmp	r2, #11
 80025b8:	d917      	bls.n	80025ea <_malloc_r+0xca>
 80025ba:	1961      	adds	r1, r4, r5
 80025bc:	42a3      	cmp	r3, r4
 80025be:	6025      	str	r5, [r4, #0]
 80025c0:	bf18      	it	ne
 80025c2:	6059      	strne	r1, [r3, #4]
 80025c4:	6863      	ldr	r3, [r4, #4]
 80025c6:	bf08      	it	eq
 80025c8:	f8c8 1000 	streq.w	r1, [r8]
 80025cc:	5162      	str	r2, [r4, r5]
 80025ce:	604b      	str	r3, [r1, #4]
 80025d0:	4638      	mov	r0, r7
 80025d2:	f104 060b 	add.w	r6, r4, #11
 80025d6:	f000 f829 	bl	800262c <__malloc_unlock>
 80025da:	f026 0607 	bic.w	r6, r6, #7
 80025de:	1d23      	adds	r3, r4, #4
 80025e0:	1af2      	subs	r2, r6, r3
 80025e2:	d0ae      	beq.n	8002542 <_malloc_r+0x22>
 80025e4:	1b9b      	subs	r3, r3, r6
 80025e6:	50a3      	str	r3, [r4, r2]
 80025e8:	e7ab      	b.n	8002542 <_malloc_r+0x22>
 80025ea:	42a3      	cmp	r3, r4
 80025ec:	6862      	ldr	r2, [r4, #4]
 80025ee:	d1dd      	bne.n	80025ac <_malloc_r+0x8c>
 80025f0:	f8c8 2000 	str.w	r2, [r8]
 80025f4:	e7ec      	b.n	80025d0 <_malloc_r+0xb0>
 80025f6:	4623      	mov	r3, r4
 80025f8:	6864      	ldr	r4, [r4, #4]
 80025fa:	e7ac      	b.n	8002556 <_malloc_r+0x36>
 80025fc:	4634      	mov	r4, r6
 80025fe:	6876      	ldr	r6, [r6, #4]
 8002600:	e7b4      	b.n	800256c <_malloc_r+0x4c>
 8002602:	4613      	mov	r3, r2
 8002604:	e7cc      	b.n	80025a0 <_malloc_r+0x80>
 8002606:	230c      	movs	r3, #12
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	4638      	mov	r0, r7
 800260c:	f000 f80e 	bl	800262c <__malloc_unlock>
 8002610:	e797      	b.n	8002542 <_malloc_r+0x22>
 8002612:	6025      	str	r5, [r4, #0]
 8002614:	e7dc      	b.n	80025d0 <_malloc_r+0xb0>
 8002616:	605b      	str	r3, [r3, #4]
 8002618:	deff      	udf	#255	; 0xff
 800261a:	bf00      	nop
 800261c:	20000208 	.word	0x20000208

08002620 <__malloc_lock>:
 8002620:	4801      	ldr	r0, [pc, #4]	; (8002628 <__malloc_lock+0x8>)
 8002622:	f7ff bee9 	b.w	80023f8 <__retarget_lock_acquire_recursive>
 8002626:	bf00      	nop
 8002628:	20000204 	.word	0x20000204

0800262c <__malloc_unlock>:
 800262c:	4801      	ldr	r0, [pc, #4]	; (8002634 <__malloc_unlock+0x8>)
 800262e:	f7ff bee4 	b.w	80023fa <__retarget_lock_release_recursive>
 8002632:	bf00      	nop
 8002634:	20000204 	.word	0x20000204

08002638 <__sflush_r>:
 8002638:	898a      	ldrh	r2, [r1, #12]
 800263a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800263e:	4605      	mov	r5, r0
 8002640:	0710      	lsls	r0, r2, #28
 8002642:	460c      	mov	r4, r1
 8002644:	d458      	bmi.n	80026f8 <__sflush_r+0xc0>
 8002646:	684b      	ldr	r3, [r1, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	dc05      	bgt.n	8002658 <__sflush_r+0x20>
 800264c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	dc02      	bgt.n	8002658 <__sflush_r+0x20>
 8002652:	2000      	movs	r0, #0
 8002654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800265a:	2e00      	cmp	r6, #0
 800265c:	d0f9      	beq.n	8002652 <__sflush_r+0x1a>
 800265e:	2300      	movs	r3, #0
 8002660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002664:	682f      	ldr	r7, [r5, #0]
 8002666:	6a21      	ldr	r1, [r4, #32]
 8002668:	602b      	str	r3, [r5, #0]
 800266a:	d032      	beq.n	80026d2 <__sflush_r+0x9a>
 800266c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800266e:	89a3      	ldrh	r3, [r4, #12]
 8002670:	075a      	lsls	r2, r3, #29
 8002672:	d505      	bpl.n	8002680 <__sflush_r+0x48>
 8002674:	6863      	ldr	r3, [r4, #4]
 8002676:	1ac0      	subs	r0, r0, r3
 8002678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800267a:	b10b      	cbz	r3, 8002680 <__sflush_r+0x48>
 800267c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800267e:	1ac0      	subs	r0, r0, r3
 8002680:	2300      	movs	r3, #0
 8002682:	4602      	mov	r2, r0
 8002684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002686:	6a21      	ldr	r1, [r4, #32]
 8002688:	4628      	mov	r0, r5
 800268a:	47b0      	blx	r6
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	89a3      	ldrh	r3, [r4, #12]
 8002690:	d106      	bne.n	80026a0 <__sflush_r+0x68>
 8002692:	6829      	ldr	r1, [r5, #0]
 8002694:	291d      	cmp	r1, #29
 8002696:	d82b      	bhi.n	80026f0 <__sflush_r+0xb8>
 8002698:	4a29      	ldr	r2, [pc, #164]	; (8002740 <__sflush_r+0x108>)
 800269a:	410a      	asrs	r2, r1
 800269c:	07d6      	lsls	r6, r2, #31
 800269e:	d427      	bmi.n	80026f0 <__sflush_r+0xb8>
 80026a0:	2200      	movs	r2, #0
 80026a2:	6062      	str	r2, [r4, #4]
 80026a4:	04d9      	lsls	r1, r3, #19
 80026a6:	6922      	ldr	r2, [r4, #16]
 80026a8:	6022      	str	r2, [r4, #0]
 80026aa:	d504      	bpl.n	80026b6 <__sflush_r+0x7e>
 80026ac:	1c42      	adds	r2, r0, #1
 80026ae:	d101      	bne.n	80026b4 <__sflush_r+0x7c>
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	b903      	cbnz	r3, 80026b6 <__sflush_r+0x7e>
 80026b4:	6560      	str	r0, [r4, #84]	; 0x54
 80026b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026b8:	602f      	str	r7, [r5, #0]
 80026ba:	2900      	cmp	r1, #0
 80026bc:	d0c9      	beq.n	8002652 <__sflush_r+0x1a>
 80026be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026c2:	4299      	cmp	r1, r3
 80026c4:	d002      	beq.n	80026cc <__sflush_r+0x94>
 80026c6:	4628      	mov	r0, r5
 80026c8:	f7ff feb6 	bl	8002438 <_free_r>
 80026cc:	2000      	movs	r0, #0
 80026ce:	6360      	str	r0, [r4, #52]	; 0x34
 80026d0:	e7c0      	b.n	8002654 <__sflush_r+0x1c>
 80026d2:	2301      	movs	r3, #1
 80026d4:	4628      	mov	r0, r5
 80026d6:	47b0      	blx	r6
 80026d8:	1c41      	adds	r1, r0, #1
 80026da:	d1c8      	bne.n	800266e <__sflush_r+0x36>
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0c5      	beq.n	800266e <__sflush_r+0x36>
 80026e2:	2b1d      	cmp	r3, #29
 80026e4:	d001      	beq.n	80026ea <__sflush_r+0xb2>
 80026e6:	2b16      	cmp	r3, #22
 80026e8:	d101      	bne.n	80026ee <__sflush_r+0xb6>
 80026ea:	602f      	str	r7, [r5, #0]
 80026ec:	e7b1      	b.n	8002652 <__sflush_r+0x1a>
 80026ee:	89a3      	ldrh	r3, [r4, #12]
 80026f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f4:	81a3      	strh	r3, [r4, #12]
 80026f6:	e7ad      	b.n	8002654 <__sflush_r+0x1c>
 80026f8:	690f      	ldr	r7, [r1, #16]
 80026fa:	2f00      	cmp	r7, #0
 80026fc:	d0a9      	beq.n	8002652 <__sflush_r+0x1a>
 80026fe:	0793      	lsls	r3, r2, #30
 8002700:	680e      	ldr	r6, [r1, #0]
 8002702:	bf08      	it	eq
 8002704:	694b      	ldreq	r3, [r1, #20]
 8002706:	600f      	str	r7, [r1, #0]
 8002708:	bf18      	it	ne
 800270a:	2300      	movne	r3, #0
 800270c:	eba6 0807 	sub.w	r8, r6, r7
 8002710:	608b      	str	r3, [r1, #8]
 8002712:	f1b8 0f00 	cmp.w	r8, #0
 8002716:	dd9c      	ble.n	8002652 <__sflush_r+0x1a>
 8002718:	6a21      	ldr	r1, [r4, #32]
 800271a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800271c:	4643      	mov	r3, r8
 800271e:	463a      	mov	r2, r7
 8002720:	4628      	mov	r0, r5
 8002722:	47b0      	blx	r6
 8002724:	2800      	cmp	r0, #0
 8002726:	dc06      	bgt.n	8002736 <__sflush_r+0xfe>
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272e:	81a3      	strh	r3, [r4, #12]
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	e78e      	b.n	8002654 <__sflush_r+0x1c>
 8002736:	4407      	add	r7, r0
 8002738:	eba8 0800 	sub.w	r8, r8, r0
 800273c:	e7e9      	b.n	8002712 <__sflush_r+0xda>
 800273e:	bf00      	nop
 8002740:	dfbffffe 	.word	0xdfbffffe

08002744 <_fflush_r>:
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	690b      	ldr	r3, [r1, #16]
 8002748:	4605      	mov	r5, r0
 800274a:	460c      	mov	r4, r1
 800274c:	b913      	cbnz	r3, 8002754 <_fflush_r+0x10>
 800274e:	2500      	movs	r5, #0
 8002750:	4628      	mov	r0, r5
 8002752:	bd38      	pop	{r3, r4, r5, pc}
 8002754:	b118      	cbz	r0, 800275e <_fflush_r+0x1a>
 8002756:	6a03      	ldr	r3, [r0, #32]
 8002758:	b90b      	cbnz	r3, 800275e <_fflush_r+0x1a>
 800275a:	f7ff fd5b 	bl	8002214 <__sinit>
 800275e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f3      	beq.n	800274e <_fflush_r+0xa>
 8002766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002768:	07d0      	lsls	r0, r2, #31
 800276a:	d404      	bmi.n	8002776 <_fflush_r+0x32>
 800276c:	0599      	lsls	r1, r3, #22
 800276e:	d402      	bmi.n	8002776 <_fflush_r+0x32>
 8002770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002772:	f7ff fe41 	bl	80023f8 <__retarget_lock_acquire_recursive>
 8002776:	4628      	mov	r0, r5
 8002778:	4621      	mov	r1, r4
 800277a:	f7ff ff5d 	bl	8002638 <__sflush_r>
 800277e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002780:	07da      	lsls	r2, r3, #31
 8002782:	4605      	mov	r5, r0
 8002784:	d4e4      	bmi.n	8002750 <_fflush_r+0xc>
 8002786:	89a3      	ldrh	r3, [r4, #12]
 8002788:	059b      	lsls	r3, r3, #22
 800278a:	d4e1      	bmi.n	8002750 <_fflush_r+0xc>
 800278c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800278e:	f7ff fe34 	bl	80023fa <__retarget_lock_release_recursive>
 8002792:	e7dd      	b.n	8002750 <_fflush_r+0xc>

08002794 <fiprintf>:
 8002794:	b40e      	push	{r1, r2, r3}
 8002796:	b503      	push	{r0, r1, lr}
 8002798:	4601      	mov	r1, r0
 800279a:	ab03      	add	r3, sp, #12
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <fiprintf+0x20>)
 800279e:	f853 2b04 	ldr.w	r2, [r3], #4
 80027a2:	6800      	ldr	r0, [r0, #0]
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	f000 f847 	bl	8002838 <_vfiprintf_r>
 80027aa:	b002      	add	sp, #8
 80027ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80027b0:	b003      	add	sp, #12
 80027b2:	4770      	bx	lr
 80027b4:	20000064 	.word	0x20000064

080027b8 <_sbrk_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4d06      	ldr	r5, [pc, #24]	; (80027d4 <_sbrk_r+0x1c>)
 80027bc:	2300      	movs	r3, #0
 80027be:	4604      	mov	r4, r0
 80027c0:	4608      	mov	r0, r1
 80027c2:	602b      	str	r3, [r5, #0]
 80027c4:	f7fe fab6 	bl	8000d34 <_sbrk>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d102      	bne.n	80027d2 <_sbrk_r+0x1a>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	b103      	cbz	r3, 80027d2 <_sbrk_r+0x1a>
 80027d0:	6023      	str	r3, [r4, #0]
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	20000200 	.word	0x20000200

080027d8 <abort>:
 80027d8:	b508      	push	{r3, lr}
 80027da:	2006      	movs	r0, #6
 80027dc:	f000 fb94 	bl	8002f08 <raise>
 80027e0:	2001      	movs	r0, #1
 80027e2:	f7fe fa2f 	bl	8000c44 <_exit>

080027e6 <__sfputc_r>:
 80027e6:	6893      	ldr	r3, [r2, #8]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	b410      	push	{r4}
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	da08      	bge.n	8002804 <__sfputc_r+0x1e>
 80027f2:	6994      	ldr	r4, [r2, #24]
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	db01      	blt.n	80027fc <__sfputc_r+0x16>
 80027f8:	290a      	cmp	r1, #10
 80027fa:	d103      	bne.n	8002804 <__sfputc_r+0x1e>
 80027fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002800:	f000 bac4 	b.w	8002d8c <__swbuf_r>
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	1c58      	adds	r0, r3, #1
 8002808:	6010      	str	r0, [r2, #0]
 800280a:	7019      	strb	r1, [r3, #0]
 800280c:	4608      	mov	r0, r1
 800280e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002812:	4770      	bx	lr

08002814 <__sfputs_r>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	4606      	mov	r6, r0
 8002818:	460f      	mov	r7, r1
 800281a:	4614      	mov	r4, r2
 800281c:	18d5      	adds	r5, r2, r3
 800281e:	42ac      	cmp	r4, r5
 8002820:	d101      	bne.n	8002826 <__sfputs_r+0x12>
 8002822:	2000      	movs	r0, #0
 8002824:	e007      	b.n	8002836 <__sfputs_r+0x22>
 8002826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800282a:	463a      	mov	r2, r7
 800282c:	4630      	mov	r0, r6
 800282e:	f7ff ffda 	bl	80027e6 <__sfputc_r>
 8002832:	1c43      	adds	r3, r0, #1
 8002834:	d1f3      	bne.n	800281e <__sfputs_r+0xa>
 8002836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002838 <_vfiprintf_r>:
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	460d      	mov	r5, r1
 800283e:	b09d      	sub	sp, #116	; 0x74
 8002840:	4614      	mov	r4, r2
 8002842:	4698      	mov	r8, r3
 8002844:	4606      	mov	r6, r0
 8002846:	b118      	cbz	r0, 8002850 <_vfiprintf_r+0x18>
 8002848:	6a03      	ldr	r3, [r0, #32]
 800284a:	b90b      	cbnz	r3, 8002850 <_vfiprintf_r+0x18>
 800284c:	f7ff fce2 	bl	8002214 <__sinit>
 8002850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002852:	07d9      	lsls	r1, r3, #31
 8002854:	d405      	bmi.n	8002862 <_vfiprintf_r+0x2a>
 8002856:	89ab      	ldrh	r3, [r5, #12]
 8002858:	059a      	lsls	r2, r3, #22
 800285a:	d402      	bmi.n	8002862 <_vfiprintf_r+0x2a>
 800285c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800285e:	f7ff fdcb 	bl	80023f8 <__retarget_lock_acquire_recursive>
 8002862:	89ab      	ldrh	r3, [r5, #12]
 8002864:	071b      	lsls	r3, r3, #28
 8002866:	d501      	bpl.n	800286c <_vfiprintf_r+0x34>
 8002868:	692b      	ldr	r3, [r5, #16]
 800286a:	b99b      	cbnz	r3, 8002894 <_vfiprintf_r+0x5c>
 800286c:	4629      	mov	r1, r5
 800286e:	4630      	mov	r0, r6
 8002870:	f000 faca 	bl	8002e08 <__swsetup_r>
 8002874:	b170      	cbz	r0, 8002894 <_vfiprintf_r+0x5c>
 8002876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002878:	07dc      	lsls	r4, r3, #31
 800287a:	d504      	bpl.n	8002886 <_vfiprintf_r+0x4e>
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	b01d      	add	sp, #116	; 0x74
 8002882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002886:	89ab      	ldrh	r3, [r5, #12]
 8002888:	0598      	lsls	r0, r3, #22
 800288a:	d4f7      	bmi.n	800287c <_vfiprintf_r+0x44>
 800288c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800288e:	f7ff fdb4 	bl	80023fa <__retarget_lock_release_recursive>
 8002892:	e7f3      	b.n	800287c <_vfiprintf_r+0x44>
 8002894:	2300      	movs	r3, #0
 8002896:	9309      	str	r3, [sp, #36]	; 0x24
 8002898:	2320      	movs	r3, #32
 800289a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800289e:	f8cd 800c 	str.w	r8, [sp, #12]
 80028a2:	2330      	movs	r3, #48	; 0x30
 80028a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002a58 <_vfiprintf_r+0x220>
 80028a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028ac:	f04f 0901 	mov.w	r9, #1
 80028b0:	4623      	mov	r3, r4
 80028b2:	469a      	mov	sl, r3
 80028b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028b8:	b10a      	cbz	r2, 80028be <_vfiprintf_r+0x86>
 80028ba:	2a25      	cmp	r2, #37	; 0x25
 80028bc:	d1f9      	bne.n	80028b2 <_vfiprintf_r+0x7a>
 80028be:	ebba 0b04 	subs.w	fp, sl, r4
 80028c2:	d00b      	beq.n	80028dc <_vfiprintf_r+0xa4>
 80028c4:	465b      	mov	r3, fp
 80028c6:	4622      	mov	r2, r4
 80028c8:	4629      	mov	r1, r5
 80028ca:	4630      	mov	r0, r6
 80028cc:	f7ff ffa2 	bl	8002814 <__sfputs_r>
 80028d0:	3001      	adds	r0, #1
 80028d2:	f000 80a9 	beq.w	8002a28 <_vfiprintf_r+0x1f0>
 80028d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028d8:	445a      	add	r2, fp
 80028da:	9209      	str	r2, [sp, #36]	; 0x24
 80028dc:	f89a 3000 	ldrb.w	r3, [sl]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80a1 	beq.w	8002a28 <_vfiprintf_r+0x1f0>
 80028e6:	2300      	movs	r3, #0
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028f0:	f10a 0a01 	add.w	sl, sl, #1
 80028f4:	9304      	str	r3, [sp, #16]
 80028f6:	9307      	str	r3, [sp, #28]
 80028f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028fc:	931a      	str	r3, [sp, #104]	; 0x68
 80028fe:	4654      	mov	r4, sl
 8002900:	2205      	movs	r2, #5
 8002902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002906:	4854      	ldr	r0, [pc, #336]	; (8002a58 <_vfiprintf_r+0x220>)
 8002908:	f7fd fc9a 	bl	8000240 <memchr>
 800290c:	9a04      	ldr	r2, [sp, #16]
 800290e:	b9d8      	cbnz	r0, 8002948 <_vfiprintf_r+0x110>
 8002910:	06d1      	lsls	r1, r2, #27
 8002912:	bf44      	itt	mi
 8002914:	2320      	movmi	r3, #32
 8002916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800291a:	0713      	lsls	r3, r2, #28
 800291c:	bf44      	itt	mi
 800291e:	232b      	movmi	r3, #43	; 0x2b
 8002920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002924:	f89a 3000 	ldrb.w	r3, [sl]
 8002928:	2b2a      	cmp	r3, #42	; 0x2a
 800292a:	d015      	beq.n	8002958 <_vfiprintf_r+0x120>
 800292c:	9a07      	ldr	r2, [sp, #28]
 800292e:	4654      	mov	r4, sl
 8002930:	2000      	movs	r0, #0
 8002932:	f04f 0c0a 	mov.w	ip, #10
 8002936:	4621      	mov	r1, r4
 8002938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800293c:	3b30      	subs	r3, #48	; 0x30
 800293e:	2b09      	cmp	r3, #9
 8002940:	d94d      	bls.n	80029de <_vfiprintf_r+0x1a6>
 8002942:	b1b0      	cbz	r0, 8002972 <_vfiprintf_r+0x13a>
 8002944:	9207      	str	r2, [sp, #28]
 8002946:	e014      	b.n	8002972 <_vfiprintf_r+0x13a>
 8002948:	eba0 0308 	sub.w	r3, r0, r8
 800294c:	fa09 f303 	lsl.w	r3, r9, r3
 8002950:	4313      	orrs	r3, r2
 8002952:	9304      	str	r3, [sp, #16]
 8002954:	46a2      	mov	sl, r4
 8002956:	e7d2      	b.n	80028fe <_vfiprintf_r+0xc6>
 8002958:	9b03      	ldr	r3, [sp, #12]
 800295a:	1d19      	adds	r1, r3, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	9103      	str	r1, [sp, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	bfbb      	ittet	lt
 8002964:	425b      	neglt	r3, r3
 8002966:	f042 0202 	orrlt.w	r2, r2, #2
 800296a:	9307      	strge	r3, [sp, #28]
 800296c:	9307      	strlt	r3, [sp, #28]
 800296e:	bfb8      	it	lt
 8002970:	9204      	strlt	r2, [sp, #16]
 8002972:	7823      	ldrb	r3, [r4, #0]
 8002974:	2b2e      	cmp	r3, #46	; 0x2e
 8002976:	d10c      	bne.n	8002992 <_vfiprintf_r+0x15a>
 8002978:	7863      	ldrb	r3, [r4, #1]
 800297a:	2b2a      	cmp	r3, #42	; 0x2a
 800297c:	d134      	bne.n	80029e8 <_vfiprintf_r+0x1b0>
 800297e:	9b03      	ldr	r3, [sp, #12]
 8002980:	1d1a      	adds	r2, r3, #4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	9203      	str	r2, [sp, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	bfb8      	it	lt
 800298a:	f04f 33ff 	movlt.w	r3, #4294967295
 800298e:	3402      	adds	r4, #2
 8002990:	9305      	str	r3, [sp, #20]
 8002992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a68 <_vfiprintf_r+0x230>
 8002996:	7821      	ldrb	r1, [r4, #0]
 8002998:	2203      	movs	r2, #3
 800299a:	4650      	mov	r0, sl
 800299c:	f7fd fc50 	bl	8000240 <memchr>
 80029a0:	b138      	cbz	r0, 80029b2 <_vfiprintf_r+0x17a>
 80029a2:	9b04      	ldr	r3, [sp, #16]
 80029a4:	eba0 000a 	sub.w	r0, r0, sl
 80029a8:	2240      	movs	r2, #64	; 0x40
 80029aa:	4082      	lsls	r2, r0
 80029ac:	4313      	orrs	r3, r2
 80029ae:	3401      	adds	r4, #1
 80029b0:	9304      	str	r3, [sp, #16]
 80029b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b6:	4829      	ldr	r0, [pc, #164]	; (8002a5c <_vfiprintf_r+0x224>)
 80029b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029bc:	2206      	movs	r2, #6
 80029be:	f7fd fc3f 	bl	8000240 <memchr>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d03f      	beq.n	8002a46 <_vfiprintf_r+0x20e>
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <_vfiprintf_r+0x228>)
 80029c8:	bb1b      	cbnz	r3, 8002a12 <_vfiprintf_r+0x1da>
 80029ca:	9b03      	ldr	r3, [sp, #12]
 80029cc:	3307      	adds	r3, #7
 80029ce:	f023 0307 	bic.w	r3, r3, #7
 80029d2:	3308      	adds	r3, #8
 80029d4:	9303      	str	r3, [sp, #12]
 80029d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d8:	443b      	add	r3, r7
 80029da:	9309      	str	r3, [sp, #36]	; 0x24
 80029dc:	e768      	b.n	80028b0 <_vfiprintf_r+0x78>
 80029de:	fb0c 3202 	mla	r2, ip, r2, r3
 80029e2:	460c      	mov	r4, r1
 80029e4:	2001      	movs	r0, #1
 80029e6:	e7a6      	b.n	8002936 <_vfiprintf_r+0xfe>
 80029e8:	2300      	movs	r3, #0
 80029ea:	3401      	adds	r4, #1
 80029ec:	9305      	str	r3, [sp, #20]
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 0c0a 	mov.w	ip, #10
 80029f4:	4620      	mov	r0, r4
 80029f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029fa:	3a30      	subs	r2, #48	; 0x30
 80029fc:	2a09      	cmp	r2, #9
 80029fe:	d903      	bls.n	8002a08 <_vfiprintf_r+0x1d0>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0c6      	beq.n	8002992 <_vfiprintf_r+0x15a>
 8002a04:	9105      	str	r1, [sp, #20]
 8002a06:	e7c4      	b.n	8002992 <_vfiprintf_r+0x15a>
 8002a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e7f0      	b.n	80029f4 <_vfiprintf_r+0x1bc>
 8002a12:	ab03      	add	r3, sp, #12
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	462a      	mov	r2, r5
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <_vfiprintf_r+0x22c>)
 8002a1a:	a904      	add	r1, sp, #16
 8002a1c:	4630      	mov	r0, r6
 8002a1e:	f3af 8000 	nop.w
 8002a22:	4607      	mov	r7, r0
 8002a24:	1c78      	adds	r0, r7, #1
 8002a26:	d1d6      	bne.n	80029d6 <_vfiprintf_r+0x19e>
 8002a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a2a:	07d9      	lsls	r1, r3, #31
 8002a2c:	d405      	bmi.n	8002a3a <_vfiprintf_r+0x202>
 8002a2e:	89ab      	ldrh	r3, [r5, #12]
 8002a30:	059a      	lsls	r2, r3, #22
 8002a32:	d402      	bmi.n	8002a3a <_vfiprintf_r+0x202>
 8002a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a36:	f7ff fce0 	bl	80023fa <__retarget_lock_release_recursive>
 8002a3a:	89ab      	ldrh	r3, [r5, #12]
 8002a3c:	065b      	lsls	r3, r3, #25
 8002a3e:	f53f af1d 	bmi.w	800287c <_vfiprintf_r+0x44>
 8002a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a44:	e71c      	b.n	8002880 <_vfiprintf_r+0x48>
 8002a46:	ab03      	add	r3, sp, #12
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	462a      	mov	r2, r5
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <_vfiprintf_r+0x22c>)
 8002a4e:	a904      	add	r1, sp, #16
 8002a50:	4630      	mov	r0, r6
 8002a52:	f000 f879 	bl	8002b48 <_printf_i>
 8002a56:	e7e4      	b.n	8002a22 <_vfiprintf_r+0x1ea>
 8002a58:	0800311b 	.word	0x0800311b
 8002a5c:	08003125 	.word	0x08003125
 8002a60:	00000000 	.word	0x00000000
 8002a64:	08002815 	.word	0x08002815
 8002a68:	08003121 	.word	0x08003121

08002a6c <_printf_common>:
 8002a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a70:	4616      	mov	r6, r2
 8002a72:	4699      	mov	r9, r3
 8002a74:	688a      	ldr	r2, [r1, #8]
 8002a76:	690b      	ldr	r3, [r1, #16]
 8002a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bfb8      	it	lt
 8002a80:	4613      	movlt	r3, r2
 8002a82:	6033      	str	r3, [r6, #0]
 8002a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a88:	4607      	mov	r7, r0
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	b10a      	cbz	r2, 8002a92 <_printf_common+0x26>
 8002a8e:	3301      	adds	r3, #1
 8002a90:	6033      	str	r3, [r6, #0]
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	0699      	lsls	r1, r3, #26
 8002a96:	bf42      	ittt	mi
 8002a98:	6833      	ldrmi	r3, [r6, #0]
 8002a9a:	3302      	addmi	r3, #2
 8002a9c:	6033      	strmi	r3, [r6, #0]
 8002a9e:	6825      	ldr	r5, [r4, #0]
 8002aa0:	f015 0506 	ands.w	r5, r5, #6
 8002aa4:	d106      	bne.n	8002ab4 <_printf_common+0x48>
 8002aa6:	f104 0a19 	add.w	sl, r4, #25
 8002aaa:	68e3      	ldr	r3, [r4, #12]
 8002aac:	6832      	ldr	r2, [r6, #0]
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	42ab      	cmp	r3, r5
 8002ab2:	dc26      	bgt.n	8002b02 <_printf_common+0x96>
 8002ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ab8:	1e13      	subs	r3, r2, #0
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	bf18      	it	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	0692      	lsls	r2, r2, #26
 8002ac2:	d42b      	bmi.n	8002b1c <_printf_common+0xb0>
 8002ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ac8:	4649      	mov	r1, r9
 8002aca:	4638      	mov	r0, r7
 8002acc:	47c0      	blx	r8
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d01e      	beq.n	8002b10 <_printf_common+0xa4>
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	6922      	ldr	r2, [r4, #16]
 8002ad6:	f003 0306 	and.w	r3, r3, #6
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	bf02      	ittt	eq
 8002ade:	68e5      	ldreq	r5, [r4, #12]
 8002ae0:	6833      	ldreq	r3, [r6, #0]
 8002ae2:	1aed      	subeq	r5, r5, r3
 8002ae4:	68a3      	ldr	r3, [r4, #8]
 8002ae6:	bf0c      	ite	eq
 8002ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aec:	2500      	movne	r5, #0
 8002aee:	4293      	cmp	r3, r2
 8002af0:	bfc4      	itt	gt
 8002af2:	1a9b      	subgt	r3, r3, r2
 8002af4:	18ed      	addgt	r5, r5, r3
 8002af6:	2600      	movs	r6, #0
 8002af8:	341a      	adds	r4, #26
 8002afa:	42b5      	cmp	r5, r6
 8002afc:	d11a      	bne.n	8002b34 <_printf_common+0xc8>
 8002afe:	2000      	movs	r0, #0
 8002b00:	e008      	b.n	8002b14 <_printf_common+0xa8>
 8002b02:	2301      	movs	r3, #1
 8002b04:	4652      	mov	r2, sl
 8002b06:	4649      	mov	r1, r9
 8002b08:	4638      	mov	r0, r7
 8002b0a:	47c0      	blx	r8
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	d103      	bne.n	8002b18 <_printf_common+0xac>
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b18:	3501      	adds	r5, #1
 8002b1a:	e7c6      	b.n	8002aaa <_printf_common+0x3e>
 8002b1c:	18e1      	adds	r1, r4, r3
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	2030      	movs	r0, #48	; 0x30
 8002b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b26:	4422      	add	r2, r4
 8002b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b30:	3302      	adds	r3, #2
 8002b32:	e7c7      	b.n	8002ac4 <_printf_common+0x58>
 8002b34:	2301      	movs	r3, #1
 8002b36:	4622      	mov	r2, r4
 8002b38:	4649      	mov	r1, r9
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	47c0      	blx	r8
 8002b3e:	3001      	adds	r0, #1
 8002b40:	d0e6      	beq.n	8002b10 <_printf_common+0xa4>
 8002b42:	3601      	adds	r6, #1
 8002b44:	e7d9      	b.n	8002afa <_printf_common+0x8e>
	...

08002b48 <_printf_i>:
 8002b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b4c:	7e0f      	ldrb	r7, [r1, #24]
 8002b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b50:	2f78      	cmp	r7, #120	; 0x78
 8002b52:	4691      	mov	r9, r2
 8002b54:	4680      	mov	r8, r0
 8002b56:	460c      	mov	r4, r1
 8002b58:	469a      	mov	sl, r3
 8002b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b5e:	d807      	bhi.n	8002b70 <_printf_i+0x28>
 8002b60:	2f62      	cmp	r7, #98	; 0x62
 8002b62:	d80a      	bhi.n	8002b7a <_printf_i+0x32>
 8002b64:	2f00      	cmp	r7, #0
 8002b66:	f000 80d4 	beq.w	8002d12 <_printf_i+0x1ca>
 8002b6a:	2f58      	cmp	r7, #88	; 0x58
 8002b6c:	f000 80c0 	beq.w	8002cf0 <_printf_i+0x1a8>
 8002b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b78:	e03a      	b.n	8002bf0 <_printf_i+0xa8>
 8002b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b7e:	2b15      	cmp	r3, #21
 8002b80:	d8f6      	bhi.n	8002b70 <_printf_i+0x28>
 8002b82:	a101      	add	r1, pc, #4	; (adr r1, 8002b88 <_printf_i+0x40>)
 8002b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b88:	08002be1 	.word	0x08002be1
 8002b8c:	08002bf5 	.word	0x08002bf5
 8002b90:	08002b71 	.word	0x08002b71
 8002b94:	08002b71 	.word	0x08002b71
 8002b98:	08002b71 	.word	0x08002b71
 8002b9c:	08002b71 	.word	0x08002b71
 8002ba0:	08002bf5 	.word	0x08002bf5
 8002ba4:	08002b71 	.word	0x08002b71
 8002ba8:	08002b71 	.word	0x08002b71
 8002bac:	08002b71 	.word	0x08002b71
 8002bb0:	08002b71 	.word	0x08002b71
 8002bb4:	08002cf9 	.word	0x08002cf9
 8002bb8:	08002c21 	.word	0x08002c21
 8002bbc:	08002cb3 	.word	0x08002cb3
 8002bc0:	08002b71 	.word	0x08002b71
 8002bc4:	08002b71 	.word	0x08002b71
 8002bc8:	08002d1b 	.word	0x08002d1b
 8002bcc:	08002b71 	.word	0x08002b71
 8002bd0:	08002c21 	.word	0x08002c21
 8002bd4:	08002b71 	.word	0x08002b71
 8002bd8:	08002b71 	.word	0x08002b71
 8002bdc:	08002cbb 	.word	0x08002cbb
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	1d1a      	adds	r2, r3, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	602a      	str	r2, [r5, #0]
 8002be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e09f      	b.n	8002d34 <_printf_i+0x1ec>
 8002bf4:	6820      	ldr	r0, [r4, #0]
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	0607      	lsls	r7, r0, #24
 8002bfa:	f103 0104 	add.w	r1, r3, #4
 8002bfe:	6029      	str	r1, [r5, #0]
 8002c00:	d501      	bpl.n	8002c06 <_printf_i+0xbe>
 8002c02:	681e      	ldr	r6, [r3, #0]
 8002c04:	e003      	b.n	8002c0e <_printf_i+0xc6>
 8002c06:	0646      	lsls	r6, r0, #25
 8002c08:	d5fb      	bpl.n	8002c02 <_printf_i+0xba>
 8002c0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002c0e:	2e00      	cmp	r6, #0
 8002c10:	da03      	bge.n	8002c1a <_printf_i+0xd2>
 8002c12:	232d      	movs	r3, #45	; 0x2d
 8002c14:	4276      	negs	r6, r6
 8002c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1a:	485a      	ldr	r0, [pc, #360]	; (8002d84 <_printf_i+0x23c>)
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	e012      	b.n	8002c46 <_printf_i+0xfe>
 8002c20:	682b      	ldr	r3, [r5, #0]
 8002c22:	6820      	ldr	r0, [r4, #0]
 8002c24:	1d19      	adds	r1, r3, #4
 8002c26:	6029      	str	r1, [r5, #0]
 8002c28:	0605      	lsls	r5, r0, #24
 8002c2a:	d501      	bpl.n	8002c30 <_printf_i+0xe8>
 8002c2c:	681e      	ldr	r6, [r3, #0]
 8002c2e:	e002      	b.n	8002c36 <_printf_i+0xee>
 8002c30:	0641      	lsls	r1, r0, #25
 8002c32:	d5fb      	bpl.n	8002c2c <_printf_i+0xe4>
 8002c34:	881e      	ldrh	r6, [r3, #0]
 8002c36:	4853      	ldr	r0, [pc, #332]	; (8002d84 <_printf_i+0x23c>)
 8002c38:	2f6f      	cmp	r7, #111	; 0x6f
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2308      	moveq	r3, #8
 8002c3e:	230a      	movne	r3, #10
 8002c40:	2100      	movs	r1, #0
 8002c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c46:	6865      	ldr	r5, [r4, #4]
 8002c48:	60a5      	str	r5, [r4, #8]
 8002c4a:	2d00      	cmp	r5, #0
 8002c4c:	bfa2      	ittt	ge
 8002c4e:	6821      	ldrge	r1, [r4, #0]
 8002c50:	f021 0104 	bicge.w	r1, r1, #4
 8002c54:	6021      	strge	r1, [r4, #0]
 8002c56:	b90e      	cbnz	r6, 8002c5c <_printf_i+0x114>
 8002c58:	2d00      	cmp	r5, #0
 8002c5a:	d04b      	beq.n	8002cf4 <_printf_i+0x1ac>
 8002c5c:	4615      	mov	r5, r2
 8002c5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c62:	fb03 6711 	mls	r7, r3, r1, r6
 8002c66:	5dc7      	ldrb	r7, [r0, r7]
 8002c68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c6c:	4637      	mov	r7, r6
 8002c6e:	42bb      	cmp	r3, r7
 8002c70:	460e      	mov	r6, r1
 8002c72:	d9f4      	bls.n	8002c5e <_printf_i+0x116>
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d10b      	bne.n	8002c90 <_printf_i+0x148>
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	07de      	lsls	r6, r3, #31
 8002c7c:	d508      	bpl.n	8002c90 <_printf_i+0x148>
 8002c7e:	6923      	ldr	r3, [r4, #16]
 8002c80:	6861      	ldr	r1, [r4, #4]
 8002c82:	4299      	cmp	r1, r3
 8002c84:	bfde      	ittt	le
 8002c86:	2330      	movle	r3, #48	; 0x30
 8002c88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c90:	1b52      	subs	r2, r2, r5
 8002c92:	6122      	str	r2, [r4, #16]
 8002c94:	f8cd a000 	str.w	sl, [sp]
 8002c98:	464b      	mov	r3, r9
 8002c9a:	aa03      	add	r2, sp, #12
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	f7ff fee4 	bl	8002a6c <_printf_common>
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d14a      	bne.n	8002d3e <_printf_i+0x1f6>
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	b004      	add	sp, #16
 8002cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	f043 0320 	orr.w	r3, r3, #32
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	4833      	ldr	r0, [pc, #204]	; (8002d88 <_printf_i+0x240>)
 8002cbc:	2778      	movs	r7, #120	; 0x78
 8002cbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	6829      	ldr	r1, [r5, #0]
 8002cc6:	061f      	lsls	r7, r3, #24
 8002cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ccc:	d402      	bmi.n	8002cd4 <_printf_i+0x18c>
 8002cce:	065f      	lsls	r7, r3, #25
 8002cd0:	bf48      	it	mi
 8002cd2:	b2b6      	uxthmi	r6, r6
 8002cd4:	07df      	lsls	r7, r3, #31
 8002cd6:	bf48      	it	mi
 8002cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8002cdc:	6029      	str	r1, [r5, #0]
 8002cde:	bf48      	it	mi
 8002ce0:	6023      	strmi	r3, [r4, #0]
 8002ce2:	b91e      	cbnz	r6, 8002cec <_printf_i+0x1a4>
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	f023 0320 	bic.w	r3, r3, #32
 8002cea:	6023      	str	r3, [r4, #0]
 8002cec:	2310      	movs	r3, #16
 8002cee:	e7a7      	b.n	8002c40 <_printf_i+0xf8>
 8002cf0:	4824      	ldr	r0, [pc, #144]	; (8002d84 <_printf_i+0x23c>)
 8002cf2:	e7e4      	b.n	8002cbe <_printf_i+0x176>
 8002cf4:	4615      	mov	r5, r2
 8002cf6:	e7bd      	b.n	8002c74 <_printf_i+0x12c>
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	6826      	ldr	r6, [r4, #0]
 8002cfc:	6961      	ldr	r1, [r4, #20]
 8002cfe:	1d18      	adds	r0, r3, #4
 8002d00:	6028      	str	r0, [r5, #0]
 8002d02:	0635      	lsls	r5, r6, #24
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	d501      	bpl.n	8002d0c <_printf_i+0x1c4>
 8002d08:	6019      	str	r1, [r3, #0]
 8002d0a:	e002      	b.n	8002d12 <_printf_i+0x1ca>
 8002d0c:	0670      	lsls	r0, r6, #25
 8002d0e:	d5fb      	bpl.n	8002d08 <_printf_i+0x1c0>
 8002d10:	8019      	strh	r1, [r3, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	6123      	str	r3, [r4, #16]
 8002d16:	4615      	mov	r5, r2
 8002d18:	e7bc      	b.n	8002c94 <_printf_i+0x14c>
 8002d1a:	682b      	ldr	r3, [r5, #0]
 8002d1c:	1d1a      	adds	r2, r3, #4
 8002d1e:	602a      	str	r2, [r5, #0]
 8002d20:	681d      	ldr	r5, [r3, #0]
 8002d22:	6862      	ldr	r2, [r4, #4]
 8002d24:	2100      	movs	r1, #0
 8002d26:	4628      	mov	r0, r5
 8002d28:	f7fd fa8a 	bl	8000240 <memchr>
 8002d2c:	b108      	cbz	r0, 8002d32 <_printf_i+0x1ea>
 8002d2e:	1b40      	subs	r0, r0, r5
 8002d30:	6060      	str	r0, [r4, #4]
 8002d32:	6863      	ldr	r3, [r4, #4]
 8002d34:	6123      	str	r3, [r4, #16]
 8002d36:	2300      	movs	r3, #0
 8002d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d3c:	e7aa      	b.n	8002c94 <_printf_i+0x14c>
 8002d3e:	6923      	ldr	r3, [r4, #16]
 8002d40:	462a      	mov	r2, r5
 8002d42:	4649      	mov	r1, r9
 8002d44:	4640      	mov	r0, r8
 8002d46:	47d0      	blx	sl
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d0ad      	beq.n	8002ca8 <_printf_i+0x160>
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	079b      	lsls	r3, r3, #30
 8002d50:	d413      	bmi.n	8002d7a <_printf_i+0x232>
 8002d52:	68e0      	ldr	r0, [r4, #12]
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	4298      	cmp	r0, r3
 8002d58:	bfb8      	it	lt
 8002d5a:	4618      	movlt	r0, r3
 8002d5c:	e7a6      	b.n	8002cac <_printf_i+0x164>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4632      	mov	r2, r6
 8002d62:	4649      	mov	r1, r9
 8002d64:	4640      	mov	r0, r8
 8002d66:	47d0      	blx	sl
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d09d      	beq.n	8002ca8 <_printf_i+0x160>
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	68e3      	ldr	r3, [r4, #12]
 8002d70:	9903      	ldr	r1, [sp, #12]
 8002d72:	1a5b      	subs	r3, r3, r1
 8002d74:	42ab      	cmp	r3, r5
 8002d76:	dcf2      	bgt.n	8002d5e <_printf_i+0x216>
 8002d78:	e7eb      	b.n	8002d52 <_printf_i+0x20a>
 8002d7a:	2500      	movs	r5, #0
 8002d7c:	f104 0619 	add.w	r6, r4, #25
 8002d80:	e7f5      	b.n	8002d6e <_printf_i+0x226>
 8002d82:	bf00      	nop
 8002d84:	0800312c 	.word	0x0800312c
 8002d88:	0800313d 	.word	0x0800313d

08002d8c <__swbuf_r>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	460e      	mov	r6, r1
 8002d90:	4614      	mov	r4, r2
 8002d92:	4605      	mov	r5, r0
 8002d94:	b118      	cbz	r0, 8002d9e <__swbuf_r+0x12>
 8002d96:	6a03      	ldr	r3, [r0, #32]
 8002d98:	b90b      	cbnz	r3, 8002d9e <__swbuf_r+0x12>
 8002d9a:	f7ff fa3b 	bl	8002214 <__sinit>
 8002d9e:	69a3      	ldr	r3, [r4, #24]
 8002da0:	60a3      	str	r3, [r4, #8]
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	071a      	lsls	r2, r3, #28
 8002da6:	d525      	bpl.n	8002df4 <__swbuf_r+0x68>
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	b31b      	cbz	r3, 8002df4 <__swbuf_r+0x68>
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	6922      	ldr	r2, [r4, #16]
 8002db0:	1a98      	subs	r0, r3, r2
 8002db2:	6963      	ldr	r3, [r4, #20]
 8002db4:	b2f6      	uxtb	r6, r6
 8002db6:	4283      	cmp	r3, r0
 8002db8:	4637      	mov	r7, r6
 8002dba:	dc04      	bgt.n	8002dc6 <__swbuf_r+0x3a>
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f7ff fcc0 	bl	8002744 <_fflush_r>
 8002dc4:	b9e0      	cbnz	r0, 8002e00 <__swbuf_r+0x74>
 8002dc6:	68a3      	ldr	r3, [r4, #8]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60a3      	str	r3, [r4, #8]
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	6022      	str	r2, [r4, #0]
 8002dd2:	701e      	strb	r6, [r3, #0]
 8002dd4:	6962      	ldr	r2, [r4, #20]
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d004      	beq.n	8002de6 <__swbuf_r+0x5a>
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	07db      	lsls	r3, r3, #31
 8002de0:	d506      	bpl.n	8002df0 <__swbuf_r+0x64>
 8002de2:	2e0a      	cmp	r6, #10
 8002de4:	d104      	bne.n	8002df0 <__swbuf_r+0x64>
 8002de6:	4621      	mov	r1, r4
 8002de8:	4628      	mov	r0, r5
 8002dea:	f7ff fcab 	bl	8002744 <_fflush_r>
 8002dee:	b938      	cbnz	r0, 8002e00 <__swbuf_r+0x74>
 8002df0:	4638      	mov	r0, r7
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002df4:	4621      	mov	r1, r4
 8002df6:	4628      	mov	r0, r5
 8002df8:	f000 f806 	bl	8002e08 <__swsetup_r>
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d0d5      	beq.n	8002dac <__swbuf_r+0x20>
 8002e00:	f04f 37ff 	mov.w	r7, #4294967295
 8002e04:	e7f4      	b.n	8002df0 <__swbuf_r+0x64>
	...

08002e08 <__swsetup_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <__swsetup_r+0xac>)
 8002e0c:	4605      	mov	r5, r0
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	460c      	mov	r4, r1
 8002e12:	b118      	cbz	r0, 8002e1c <__swsetup_r+0x14>
 8002e14:	6a03      	ldr	r3, [r0, #32]
 8002e16:	b90b      	cbnz	r3, 8002e1c <__swsetup_r+0x14>
 8002e18:	f7ff f9fc 	bl	8002214 <__sinit>
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e22:	0718      	lsls	r0, r3, #28
 8002e24:	d422      	bmi.n	8002e6c <__swsetup_r+0x64>
 8002e26:	06d9      	lsls	r1, r3, #27
 8002e28:	d407      	bmi.n	8002e3a <__swsetup_r+0x32>
 8002e2a:	2309      	movs	r3, #9
 8002e2c:	602b      	str	r3, [r5, #0]
 8002e2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e32:	81a3      	strh	r3, [r4, #12]
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	e034      	b.n	8002ea4 <__swsetup_r+0x9c>
 8002e3a:	0758      	lsls	r0, r3, #29
 8002e3c:	d512      	bpl.n	8002e64 <__swsetup_r+0x5c>
 8002e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e40:	b141      	cbz	r1, 8002e54 <__swsetup_r+0x4c>
 8002e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e46:	4299      	cmp	r1, r3
 8002e48:	d002      	beq.n	8002e50 <__swsetup_r+0x48>
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f7ff faf4 	bl	8002438 <_free_r>
 8002e50:	2300      	movs	r3, #0
 8002e52:	6363      	str	r3, [r4, #52]	; 0x34
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6063      	str	r3, [r4, #4]
 8002e60:	6923      	ldr	r3, [r4, #16]
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	81a3      	strh	r3, [r4, #12]
 8002e6c:	6923      	ldr	r3, [r4, #16]
 8002e6e:	b94b      	cbnz	r3, 8002e84 <__swsetup_r+0x7c>
 8002e70:	89a3      	ldrh	r3, [r4, #12]
 8002e72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7a:	d003      	beq.n	8002e84 <__swsetup_r+0x7c>
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f000 f884 	bl	8002f8c <__smakebuf_r>
 8002e84:	89a0      	ldrh	r0, [r4, #12]
 8002e86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e8a:	f010 0301 	ands.w	r3, r0, #1
 8002e8e:	d00a      	beq.n	8002ea6 <__swsetup_r+0x9e>
 8002e90:	2300      	movs	r3, #0
 8002e92:	60a3      	str	r3, [r4, #8]
 8002e94:	6963      	ldr	r3, [r4, #20]
 8002e96:	425b      	negs	r3, r3
 8002e98:	61a3      	str	r3, [r4, #24]
 8002e9a:	6923      	ldr	r3, [r4, #16]
 8002e9c:	b943      	cbnz	r3, 8002eb0 <__swsetup_r+0xa8>
 8002e9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ea2:	d1c4      	bne.n	8002e2e <__swsetup_r+0x26>
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
 8002ea6:	0781      	lsls	r1, r0, #30
 8002ea8:	bf58      	it	pl
 8002eaa:	6963      	ldrpl	r3, [r4, #20]
 8002eac:	60a3      	str	r3, [r4, #8]
 8002eae:	e7f4      	b.n	8002e9a <__swsetup_r+0x92>
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7f7      	b.n	8002ea4 <__swsetup_r+0x9c>
 8002eb4:	20000064 	.word	0x20000064

08002eb8 <_raise_r>:
 8002eb8:	291f      	cmp	r1, #31
 8002eba:	b538      	push	{r3, r4, r5, lr}
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	460d      	mov	r5, r1
 8002ec0:	d904      	bls.n	8002ecc <_raise_r+0x14>
 8002ec2:	2316      	movs	r3, #22
 8002ec4:	6003      	str	r3, [r0, #0]
 8002ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eca:	bd38      	pop	{r3, r4, r5, pc}
 8002ecc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002ece:	b112      	cbz	r2, 8002ed6 <_raise_r+0x1e>
 8002ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002ed4:	b94b      	cbnz	r3, 8002eea <_raise_r+0x32>
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f000 f830 	bl	8002f3c <_getpid_r>
 8002edc:	462a      	mov	r2, r5
 8002ede:	4601      	mov	r1, r0
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ee6:	f000 b817 	b.w	8002f18 <_kill_r>
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d00a      	beq.n	8002f04 <_raise_r+0x4c>
 8002eee:	1c59      	adds	r1, r3, #1
 8002ef0:	d103      	bne.n	8002efa <_raise_r+0x42>
 8002ef2:	2316      	movs	r3, #22
 8002ef4:	6003      	str	r3, [r0, #0]
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	e7e7      	b.n	8002eca <_raise_r+0x12>
 8002efa:	2400      	movs	r4, #0
 8002efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002f00:	4628      	mov	r0, r5
 8002f02:	4798      	blx	r3
 8002f04:	2000      	movs	r0, #0
 8002f06:	e7e0      	b.n	8002eca <_raise_r+0x12>

08002f08 <raise>:
 8002f08:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <raise+0xc>)
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	f7ff bfd3 	b.w	8002eb8 <_raise_r>
 8002f12:	bf00      	nop
 8002f14:	20000064 	.word	0x20000064

08002f18 <_kill_r>:
 8002f18:	b538      	push	{r3, r4, r5, lr}
 8002f1a:	4d07      	ldr	r5, [pc, #28]	; (8002f38 <_kill_r+0x20>)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	4604      	mov	r4, r0
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	602b      	str	r3, [r5, #0]
 8002f26:	f7fd fe7d 	bl	8000c24 <_kill>
 8002f2a:	1c43      	adds	r3, r0, #1
 8002f2c:	d102      	bne.n	8002f34 <_kill_r+0x1c>
 8002f2e:	682b      	ldr	r3, [r5, #0]
 8002f30:	b103      	cbz	r3, 8002f34 <_kill_r+0x1c>
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	bd38      	pop	{r3, r4, r5, pc}
 8002f36:	bf00      	nop
 8002f38:	20000200 	.word	0x20000200

08002f3c <_getpid_r>:
 8002f3c:	f7fd be6a 	b.w	8000c14 <_getpid>

08002f40 <__swhatbuf_r>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	460c      	mov	r4, r1
 8002f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	b096      	sub	sp, #88	; 0x58
 8002f4c:	4615      	mov	r5, r2
 8002f4e:	461e      	mov	r6, r3
 8002f50:	da0d      	bge.n	8002f6e <__swhatbuf_r+0x2e>
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002f62:	2340      	movne	r3, #64	; 0x40
 8002f64:	2000      	movs	r0, #0
 8002f66:	6031      	str	r1, [r6, #0]
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	b016      	add	sp, #88	; 0x58
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
 8002f6e:	466a      	mov	r2, sp
 8002f70:	f000 f848 	bl	8003004 <_fstat_r>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	dbec      	blt.n	8002f52 <__swhatbuf_r+0x12>
 8002f78:	9901      	ldr	r1, [sp, #4]
 8002f7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002f7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002f82:	4259      	negs	r1, r3
 8002f84:	4159      	adcs	r1, r3
 8002f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8a:	e7eb      	b.n	8002f64 <__swhatbuf_r+0x24>

08002f8c <__smakebuf_r>:
 8002f8c:	898b      	ldrh	r3, [r1, #12]
 8002f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f90:	079d      	lsls	r5, r3, #30
 8002f92:	4606      	mov	r6, r0
 8002f94:	460c      	mov	r4, r1
 8002f96:	d507      	bpl.n	8002fa8 <__smakebuf_r+0x1c>
 8002f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	6123      	str	r3, [r4, #16]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	6163      	str	r3, [r4, #20]
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	ab01      	add	r3, sp, #4
 8002faa:	466a      	mov	r2, sp
 8002fac:	f7ff ffc8 	bl	8002f40 <__swhatbuf_r>
 8002fb0:	9900      	ldr	r1, [sp, #0]
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f7ff fab3 	bl	8002520 <_malloc_r>
 8002fba:	b948      	cbnz	r0, 8002fd0 <__smakebuf_r+0x44>
 8002fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc0:	059a      	lsls	r2, r3, #22
 8002fc2:	d4ef      	bmi.n	8002fa4 <__smakebuf_r+0x18>
 8002fc4:	f023 0303 	bic.w	r3, r3, #3
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	81a3      	strh	r3, [r4, #12]
 8002fce:	e7e3      	b.n	8002f98 <__smakebuf_r+0xc>
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	6020      	str	r0, [r4, #0]
 8002fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd8:	81a3      	strh	r3, [r4, #12]
 8002fda:	9b00      	ldr	r3, [sp, #0]
 8002fdc:	6163      	str	r3, [r4, #20]
 8002fde:	9b01      	ldr	r3, [sp, #4]
 8002fe0:	6120      	str	r0, [r4, #16]
 8002fe2:	b15b      	cbz	r3, 8002ffc <__smakebuf_r+0x70>
 8002fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f000 f81d 	bl	8003028 <_isatty_r>
 8002fee:	b128      	cbz	r0, 8002ffc <__smakebuf_r+0x70>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	81a3      	strh	r3, [r4, #12]
 8002ffc:	89a3      	ldrh	r3, [r4, #12]
 8002ffe:	431d      	orrs	r5, r3
 8003000:	81a5      	strh	r5, [r4, #12]
 8003002:	e7cf      	b.n	8002fa4 <__smakebuf_r+0x18>

08003004 <_fstat_r>:
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	4d07      	ldr	r5, [pc, #28]	; (8003024 <_fstat_r+0x20>)
 8003008:	2300      	movs	r3, #0
 800300a:	4604      	mov	r4, r0
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	602b      	str	r3, [r5, #0]
 8003012:	f7fd fe66 	bl	8000ce2 <_fstat>
 8003016:	1c43      	adds	r3, r0, #1
 8003018:	d102      	bne.n	8003020 <_fstat_r+0x1c>
 800301a:	682b      	ldr	r3, [r5, #0]
 800301c:	b103      	cbz	r3, 8003020 <_fstat_r+0x1c>
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	bd38      	pop	{r3, r4, r5, pc}
 8003022:	bf00      	nop
 8003024:	20000200 	.word	0x20000200

08003028 <_isatty_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4d06      	ldr	r5, [pc, #24]	; (8003044 <_isatty_r+0x1c>)
 800302c:	2300      	movs	r3, #0
 800302e:	4604      	mov	r4, r0
 8003030:	4608      	mov	r0, r1
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	f7fd fe65 	bl	8000d02 <_isatty>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d102      	bne.n	8003042 <_isatty_r+0x1a>
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	b103      	cbz	r3, 8003042 <_isatty_r+0x1a>
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	bd38      	pop	{r3, r4, r5, pc}
 8003044:	20000200 	.word	0x20000200

08003048 <_init>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr

08003054 <_fini>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	bf00      	nop
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr
