
011_SPI_IT_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080023bc  080023bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023dc  080023dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023dc  080023dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023e4  080023e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e4  080023e4  000123e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080023f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080023f8  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fce  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191d  00000000  00000000  0002804b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  00029968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000564  00000000  00000000  0002a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b823  00000000  00000000  0002a60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009195  00000000  00000000  00055e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106c0c  00000000  00000000  0005efc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bec  00000000  00000000  00165bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001677bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080023a4 	.word	0x080023a4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080023a4 	.word	0x080023a4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fa31 	bl	800099e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f80a 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f8b4 	bl	80006ac <MX_GPIO_Init>
  MX_SPI2_Init();
 8000544:	f000 f874 	bl	8000630 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setup();
 8000548:	f000 f901 	bl	800074e <setup>
  while (1)
  {
	  loop();
 800054c:	f000 f906 	bl	800075c <loop>
 8000550:	e7fc      	b.n	800054c <main+0x18>
	...

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fef2 	bl	800234c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <SystemClock_Config+0xd4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <SystemClock_Config+0xd4>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xd4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <SystemClock_Config+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a25      	ldr	r2, [pc, #148]	; (800062c <SystemClock_Config+0xd8>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005bc:	230c      	movs	r3, #12
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005c0:	23c0      	movs	r3, #192	; 0xc0
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fda3 	bl	8001120 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005e0:	f000 f8b0 	bl	8000744 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e4:	f000 fd4c 	bl	8001080 <HAL_PWREx_EnableOverDrive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ee:	f000 f8a9 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2106      	movs	r1, #6
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f833 	bl	800167c <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800061c:	f000 f892 	bl	8000744 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_SPI2_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_SPI2_Init+0x74>)
 800063c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000640:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_SPI2_Init+0x74>)
 800064a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800064e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_SPI2_Init+0x74>)
 800065e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000662:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000666:	2220      	movs	r2, #32
 8000668:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_SPI2_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_SPI2_Init+0x74>)
 800067e:	2207      	movs	r2, #7
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_SPI2_Init+0x74>)
 800068a:	2208      	movs	r2, #8
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_SPI2_Init+0x74>)
 8000690:	f001 f9a6 	bl	80019e0 <HAL_SPI_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 f853 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40003800 	.word	0x40003800

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_GPIO_Init+0x90>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a1d      	ldr	r2, [pc, #116]	; (800073c <MX_GPIO_Init+0x90>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_GPIO_Init+0x90>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_GPIO_Init+0x90>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_GPIO_Init+0x90>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_GPIO_Init+0x90>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_GPIO_Init+0x90>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <MX_GPIO_Init+0x90>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_GPIO_Init+0x90>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0x94>)
 8000712:	f000 fc81 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0x94>)
 8000730:	f000 fac6 	bl	8000cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>

0800074e <setup>:

#include "myMain.h"

extern SPI_HandleTypeDef hspi2;

void setup() {
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <loop>:

void loop() {
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
	char pData[] = "test test!!!";
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <loop+0x38>)
 8000764:	463c      	mov	r4, r7
 8000766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000768:	c407      	stmia	r4!, {r0, r1, r2}
 800076a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 800076c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <loop+0x3c>)
 8000772:	f000 fc6a 	bl	800104a <HAL_GPIO_TogglePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) pData, 12, 100);
 8000776:	4639      	mov	r1, r7
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	220c      	movs	r2, #12
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <loop+0x40>)
 800077e:	f001 f9da 	bl	8001b36 <HAL_SPI_Transmit>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <loop+0x3c>)
 8000788:	f000 fc5f 	bl	800104a <HAL_GPIO_TogglePin>
	//HAL_Delay(1);
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	080023bc 	.word	0x080023bc
 8000798:	40020000 	.word	0x40020000
 800079c:	20000028 	.word	0x20000028

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x44>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_MspInit+0x44>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x44>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x44>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <HAL_SPI_MspInit+0xc8>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d14d      	bne.n	80008a6 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <HAL_SPI_MspInit+0xcc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB9     ------> SPI2_NSS
    PA12     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15;
 8000852:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000864:	2305      	movs	r3, #5
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <HAL_SPI_MspInit+0xd0>)
 8000870:	f000 fa26 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000886:	2305      	movs	r3, #5
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <HAL_SPI_MspInit+0xd4>)
 8000892:	f000 fa15 	bl	8000cc0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2024      	movs	r0, #36	; 0x24
 800089c:	f000 f9b7 	bl	8000c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008a0:	2024      	movs	r0, #36	; 0x24
 80008a2:	f000 f9d0 	bl	8000c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40003800 	.word	0x40003800
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020000 	.word	0x40020000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f884 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <SPI2_IRQHandler+0x10>)
 800091a:	f001 fa7b 	bl	8001e14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000028 	.word	0x20000028

08000928 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000976:	f7ff ffd7 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f001 fcef 	bl	800235c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fdd9 	bl	8000534 <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000984:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	080023ec 	.word	0x080023ec
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	20000090 	.word	0x20000090

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>

0800099e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f000 f928 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a8:	200f      	movs	r0, #15
 80009aa:	f000 f805 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ae:	f7ff fef7 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f943 	bl	8000c62 <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f000 f90b 	bl	8000c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	2000008c 	.word	0x2000008c

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <HAL_GetTick+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000008c 	.word	0x2000008c

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <__NVIC_SetPriorityGrouping+0x40>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x40>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00
 8000a9c:	05fa0000 	.word	0x05fa0000

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <__NVIC_EnableIRQ+0x38>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff29 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff3e 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff8e 	bl	8000b4c <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff31 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffa2 	bl	8000bb4 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d004      	beq.n	8000c98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e00c      	b.n	8000cb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2205      	movs	r2, #5
 8000c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0201 	bic.w	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	e175      	b.n	8000fcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	f040 8164 	bne.w	8000fc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d005      	beq.n	8000d16 <HAL_GPIO_Init+0x56>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d130      	bne.n	8000d78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	f003 0201 	and.w	r2, r3, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d017      	beq.n	8000db4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d123      	bne.n	8000e08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0203 	and.w	r2, r3, #3
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80be 	beq.w	8000fc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b66      	ldr	r3, [pc, #408]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a65      	ldr	r2, [pc, #404]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e62:	4a61      	ldr	r2, [pc, #388]	; (8000fe8 <HAL_GPIO_Init+0x328>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a58      	ldr	r2, [pc, #352]	; (8000fec <HAL_GPIO_Init+0x32c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d037      	beq.n	8000efe <HAL_GPIO_Init+0x23e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a57      	ldr	r2, [pc, #348]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d031      	beq.n	8000efa <HAL_GPIO_Init+0x23a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a56      	ldr	r2, [pc, #344]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d02b      	beq.n	8000ef6 <HAL_GPIO_Init+0x236>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a55      	ldr	r2, [pc, #340]	; (8000ff8 <HAL_GPIO_Init+0x338>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d025      	beq.n	8000ef2 <HAL_GPIO_Init+0x232>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a54      	ldr	r2, [pc, #336]	; (8000ffc <HAL_GPIO_Init+0x33c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01f      	beq.n	8000eee <HAL_GPIO_Init+0x22e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a53      	ldr	r2, [pc, #332]	; (8001000 <HAL_GPIO_Init+0x340>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d019      	beq.n	8000eea <HAL_GPIO_Init+0x22a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a52      	ldr	r2, [pc, #328]	; (8001004 <HAL_GPIO_Init+0x344>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a51      	ldr	r2, [pc, #324]	; (8001008 <HAL_GPIO_Init+0x348>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_GPIO_Init+0x222>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a50      	ldr	r2, [pc, #320]	; (800100c <HAL_GPIO_Init+0x34c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d007      	beq.n	8000ede <HAL_GPIO_Init+0x21e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	; (8001010 <HAL_GPIO_Init+0x350>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_GPIO_Init+0x21a>
 8000ed6:	2309      	movs	r3, #9
 8000ed8:	e012      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000eda:	230a      	movs	r3, #10
 8000edc:	e010      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000ede:	2308      	movs	r3, #8
 8000ee0:	e00e      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	e00c      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	e00a      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000eea:	2305      	movs	r3, #5
 8000eec:	e008      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000eee:	2304      	movs	r3, #4
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x240>
 8000efe:	2300      	movs	r3, #0
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f10:	4935      	ldr	r1, [pc, #212]	; (8000fe8 <HAL_GPIO_Init+0x328>)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <HAL_GPIO_Init+0x354>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f42:	4a34      	ldr	r2, [pc, #208]	; (8001014 <HAL_GPIO_Init+0x354>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f48:	4b32      	ldr	r3, [pc, #200]	; (8001014 <HAL_GPIO_Init+0x354>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f6c:	4a29      	ldr	r2, [pc, #164]	; (8001014 <HAL_GPIO_Init+0x354>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <HAL_GPIO_Init+0x354>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <HAL_GPIO_Init+0x354>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_GPIO_Init+0x354>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <HAL_GPIO_Init+0x354>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	f67f ae86 	bls.w	8000ce0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40021400 	.word	0x40021400
 8001004:	40021800 	.word	0x40021800
 8001008:	40021c00 	.word	0x40021c00
 800100c:	40022000 	.word	0x40022000
 8001010:	40022400 	.word	0x40022400
 8001014:	40013c00 	.word	0x40013c00

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	041a      	lsls	r2, r3, #16
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43d9      	mvns	r1, r3
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	400b      	ands	r3, r1
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_PWREx_EnableOverDrive+0x98>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_PWREx_EnableOverDrive+0x98>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_PWREx_EnableOverDrive+0x98>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_PWREx_EnableOverDrive+0x9c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1d      	ldr	r2, [pc, #116]	; (800111c <HAL_PWREx_EnableOverDrive+0x9c>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ae:	f7ff fcc7 	bl	8000a40 <HAL_GetTick>
 80010b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010b4:	e009      	b.n	80010ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010b6:	f7ff fcc3 	bl	8000a40 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c4:	d901      	bls.n	80010ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e022      	b.n	8001110 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_PWREx_EnableOverDrive+0x9c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d6:	d1ee      	bne.n	80010b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_PWREx_EnableOverDrive+0x9c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_PWREx_EnableOverDrive+0x9c>)
 80010de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e4:	f7ff fcac 	bl	8000a40 <HAL_GetTick>
 80010e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010ea:	e009      	b.n	8001100 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010ec:	f7ff fca8 	bl	8000a40 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010fa:	d901      	bls.n	8001100 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e007      	b.n	8001110 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800110c:	d1ee      	bne.n	80010ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e29b      	b.n	800166e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8087 	beq.w	8001252 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001144:	4b96      	ldr	r3, [pc, #600]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b04      	cmp	r3, #4
 800114e:	d00c      	beq.n	800116a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001150:	4b93      	ldr	r3, [pc, #588]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d112      	bne.n	8001182 <HAL_RCC_OscConfig+0x62>
 800115c:	4b90      	ldr	r3, [pc, #576]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001168:	d10b      	bne.n	8001182 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116a:	4b8d      	ldr	r3, [pc, #564]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d06c      	beq.n	8001250 <HAL_RCC_OscConfig+0x130>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d168      	bne.n	8001250 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e275      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x7a>
 800118c:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a83      	ldr	r2, [pc, #524]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e02e      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x9c>
 80011a2:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7e      	ldr	r2, [pc, #504]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b7c      	ldr	r3, [pc, #496]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a7b      	ldr	r2, [pc, #492]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0xc0>
 80011c6:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a75      	ldr	r2, [pc, #468]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b73      	ldr	r3, [pc, #460]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a72      	ldr	r2, [pc, #456]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 80011e0:	4b6f      	ldr	r3, [pc, #444]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a6e      	ldr	r2, [pc, #440]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a6b      	ldr	r2, [pc, #428]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fc1e 	bl	8000a40 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fc1a 	bl	8000a40 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e229      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b61      	ldr	r3, [pc, #388]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0xe8>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc0a 	bl	8000a40 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fc06 	bl	8000a40 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e215      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x110>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d069      	beq.n	8001332 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800125e:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126a:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b08      	cmp	r3, #8
 8001274:	d11c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x190>
 8001276:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x17a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e1e9      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	493d      	ldr	r1, [pc, #244]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	e040      	b.n	8001332 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d023      	beq.n	8001300 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b8:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a38      	ldr	r2, [pc, #224]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fbbc 	bl	8000a40 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fbb8 	bl	8000a40 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1c7      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4929      	ldr	r1, [pc, #164]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
 80012fe:	e018      	b.n	8001332 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fb98 	bl	8000a40 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001314:	f7ff fb94 	bl	8000a40 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e1a3      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d038      	beq.n	80013b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d019      	beq.n	800137a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001352:	f7ff fb75 	bl	8000a40 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff fb71 	bl	8000a40 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e180      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x23a>
 8001378:	e01a      	b.n	80013b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 800137c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_RCC_OscConfig+0x280>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff fb5b 	bl	8000a40 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fb57 	bl	8000a40 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d903      	bls.n	80013a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e166      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
 80013a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80013a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ee      	bne.n	800138e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a4 	beq.w	8001506 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b8c      	ldr	r3, [pc, #560]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10d      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b89      	ldr	r3, [pc, #548]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a88      	ldr	r2, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b86      	ldr	r3, [pc, #536]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e6:	4b83      	ldr	r3, [pc, #524]	; (80015f4 <HAL_RCC_OscConfig+0x4d4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013f2:	4b80      	ldr	r3, [pc, #512]	; (80015f4 <HAL_RCC_OscConfig+0x4d4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7f      	ldr	r2, [pc, #508]	; (80015f4 <HAL_RCC_OscConfig+0x4d4>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb1f 	bl	8000a40 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fb1b 	bl	8000a40 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e12a      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001418:	4b76      	ldr	r3, [pc, #472]	; (80015f4 <HAL_RCC_OscConfig+0x4d4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x31a>
 800142c:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a6f      	ldr	r2, [pc, #444]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	e02d      	b.n	8001496 <HAL_RCC_OscConfig+0x376>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x33c>
 8001442:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001452:	4a67      	ldr	r2, [pc, #412]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6713      	str	r3, [r2, #112]	; 0x70
 800145a:	e01c      	b.n	8001496 <HAL_RCC_OscConfig+0x376>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10c      	bne.n	800147e <HAL_RCC_OscConfig+0x35e>
 8001464:	4b62      	ldr	r3, [pc, #392]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a61      	ldr	r2, [pc, #388]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a5e      	ldr	r2, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	e00b      	b.n	8001496 <HAL_RCC_OscConfig+0x376>
 800147e:	4b5c      	ldr	r3, [pc, #368]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a5b      	ldr	r2, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d015      	beq.n	80014ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149e:	f7ff facf 	bl	8000a40 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff facb 	bl	8000a40 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0d8      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ee      	beq.n	80014a6 <HAL_RCC_OscConfig+0x386>
 80014c8:	e014      	b.n	80014f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff fab9 	bl	8000a40 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fab5 	bl	8000a40 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0c2      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d105      	bne.n	8001506 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a3c      	ldr	r2, [pc, #240]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80ae 	beq.w	800166c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d06d      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d14b      	bne.n	80015bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 800152a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800152e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fa86 	bl	8000a40 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fa82 	bl	8000a40 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e091      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	3b01      	subs	r3, #1
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	071b      	lsls	r3, r3, #28
 8001582:	491b      	ldr	r1, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 800158e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fa54 	bl	8000a40 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fa50 	bl	8000a40 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e05f      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x47c>
 80015ba:	e057      	b.n	800166c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80015c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fa3a 	bl	8000a40 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fa36 	bl	8000a40 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e045      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_RCC_OscConfig+0x4d0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4b0>
 80015ee:	e03d      	b.n	800166c <HAL_RCC_OscConfig+0x54c>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_RCC_OscConfig+0x558>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d030      	beq.n	8001668 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d129      	bne.n	8001668 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d122      	bne.n	8001668 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001628:	4013      	ands	r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800162e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001630:	4293      	cmp	r3, r2
 8001632:	d119      	bne.n	8001668 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	3b01      	subs	r3, #1
 8001642:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d10f      	bne.n	8001668 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0d0      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d910      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 020f 	bic.w	r2, r3, #15
 80016aa:	4965      	ldr	r1, [pc, #404]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b8      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 80016e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f4:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a52      	ldr	r2, [pc, #328]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 80016fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	494d      	ldr	r1, [pc, #308]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d040      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d115      	bne.n	800175e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e073      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06b      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4936      	ldr	r1, [pc, #216]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001770:	f7ff f966 	bl	8000a40 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f962 	bl	8000a40 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e053      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d210      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 020f 	bic.w	r2, r3, #15
 80017b6:	4922      	ldr	r1, [pc, #136]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e032      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4916      	ldr	r1, [pc, #88]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180e:	f000 f821 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <HAL_RCC_ClockConfig+0x1cc>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1d0>)
 8001828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1d4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f8c2 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00
 8001844:	40023800 	.word	0x40023800
 8001848:	080023cc 	.word	0x080023cc
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001858:	b090      	sub	sp, #64	; 0x40
 800185a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
 8001860:	2300      	movs	r3, #0
 8001862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001864:	2300      	movs	r3, #0
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800186c:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d00d      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x40>
 8001878:	2b08      	cmp	r3, #8
 800187a:	f200 80a1 	bhi.w	80019c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x34>
 8001882:	2b04      	cmp	r3, #4
 8001884:	d003      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x3a>
 8001886:	e09b      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800188c:	e09b      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800188e:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001892:	e098      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001894:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800189e:	4b4d      	ldr	r3, [pc, #308]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d028      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018aa:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	2200      	movs	r2, #0
 80018b2:	623b      	str	r3, [r7, #32]
 80018b4:	627a      	str	r2, [r7, #36]	; 0x24
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018bc:	2100      	movs	r1, #0
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCC_GetSysClockFreq+0x188>)
 80018c0:	fb03 f201 	mul.w	r2, r3, r1
 80018c4:	2300      	movs	r3, #0
 80018c6:	fb00 f303 	mul.w	r3, r0, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	4a43      	ldr	r2, [pc, #268]	; (80019dc <HAL_RCC_GetSysClockFreq+0x188>)
 80018ce:	fba0 1202 	umull	r1, r2, r0, r2
 80018d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018d4:	460a      	mov	r2, r1
 80018d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80018d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018da:	4413      	add	r3, r2
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	2200      	movs	r2, #0
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	61fa      	str	r2, [r7, #28]
 80018e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ee:	f7fe fca3 	bl	8000238 <__aeabi_uldivmod>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4613      	mov	r3, r2
 80018f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018fa:	e053      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fc:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	2200      	movs	r2, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	617a      	str	r2, [r7, #20]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800190e:	f04f 0b00 	mov.w	fp, #0
 8001912:	4652      	mov	r2, sl
 8001914:	465b      	mov	r3, fp
 8001916:	f04f 0000 	mov.w	r0, #0
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	0159      	lsls	r1, r3, #5
 8001920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001924:	0150      	lsls	r0, r2, #5
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	ebb2 080a 	subs.w	r8, r2, sl
 800192e:	eb63 090b 	sbc.w	r9, r3, fp
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800193e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001942:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001946:	ebb2 0408 	subs.w	r4, r2, r8
 800194a:	eb63 0509 	sbc.w	r5, r3, r9
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	00eb      	lsls	r3, r5, #3
 8001958:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800195c:	00e2      	lsls	r2, r4, #3
 800195e:	4614      	mov	r4, r2
 8001960:	461d      	mov	r5, r3
 8001962:	eb14 030a 	adds.w	r3, r4, sl
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	eb45 030b 	adc.w	r3, r5, fp
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800197a:	4629      	mov	r1, r5
 800197c:	028b      	lsls	r3, r1, #10
 800197e:	4621      	mov	r1, r4
 8001980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001984:	4621      	mov	r1, r4
 8001986:	028a      	lsls	r2, r1, #10
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198e:	2200      	movs	r2, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	60fa      	str	r2, [r7, #12]
 8001994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001998:	f7fe fc4e 	bl	8000238 <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80019b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3740      	adds	r7, #64	; 0x40
 80019cc:	46bd      	mov	sp, r7
 80019ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	017d7840 	.word	0x017d7840

080019e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e09d      	b.n	8001b2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d108      	bne.n	8001a0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a02:	d009      	beq.n	8001a18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
 8001a0a:	e005      	b.n	8001a18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7fe fed8 	bl	80007e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a58:	d902      	bls.n	8001a60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e002      	b.n	8001a66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001a6e:	d007      	beq.n	8001a80 <HAL_SPI_Init+0xa0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a78:	d002      	beq.n	8001a80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	ea42 0103 	orr.w	r1, r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	f003 0204 	and.w	r2, r3, #4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001afc:	ea42 0103 	orr.w	r1, r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b088      	sub	sp, #32
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_SPI_Transmit+0x22>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e158      	b.n	8001e0a <HAL_SPI_Transmit+0x2d4>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b60:	f7fe ff6e 	bl	8000a40 <HAL_GetTick>
 8001b64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d002      	beq.n	8001b7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b76:	2302      	movs	r3, #2
 8001b78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b7a:	e13d      	b.n	8001df8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_SPI_Transmit+0x52>
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b8c:	e134      	b.n	8001df8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2203      	movs	r2, #3
 8001b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	88fa      	ldrh	r2, [r7, #6]
 8001ba6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	88fa      	ldrh	r2, [r7, #6]
 8001bac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd8:	d10f      	bne.n	8001bfa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c04:	2b40      	cmp	r3, #64	; 0x40
 8001c06:	d007      	beq.n	8001c18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c20:	d94b      	bls.n	8001cba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_SPI_Transmit+0xfa>
 8001c2a:	8afb      	ldrh	r3, [r7, #22]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d13e      	bne.n	8001cae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c34:	881a      	ldrh	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	1c9a      	adds	r2, r3, #2
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c54:	e02b      	b.n	8001cae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d112      	bne.n	8001c8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	1c9a      	adds	r2, r3, #2
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c88:	e011      	b.n	8001cae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c8a:	f7fe fed9 	bl	8000a40 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d803      	bhi.n	8001ca2 <HAL_SPI_Transmit+0x16c>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d102      	bne.n	8001ca8 <HAL_SPI_Transmit+0x172>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cac:	e0a4      	b.n	8001df8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ce      	bne.n	8001c56 <HAL_SPI_Transmit+0x120>
 8001cb8:	e07c      	b.n	8001db4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_SPI_Transmit+0x192>
 8001cc2:	8afb      	ldrh	r3, [r7, #22]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d170      	bne.n	8001daa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d912      	bls.n	8001cf8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	881a      	ldrh	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	1c9a      	adds	r2, r3, #2
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b02      	subs	r3, #2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cf6:	e058      	b.n	8001daa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	330c      	adds	r3, #12
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d1e:	e044      	b.n	8001daa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d12b      	bne.n	8001d86 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d912      	bls.n	8001d5e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	881a      	ldrh	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	1c9a      	adds	r2, r3, #2
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b02      	subs	r3, #2
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d5c:	e025      	b.n	8001daa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	330c      	adds	r3, #12
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d84:	e011      	b.n	8001daa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d86:	f7fe fe5b 	bl	8000a40 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d803      	bhi.n	8001d9e <HAL_SPI_Transmit+0x268>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d102      	bne.n	8001da4 <HAL_SPI_Transmit+0x26e>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001da8:	e026      	b.n	8001df8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1b5      	bne.n	8001d20 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 fa5d 	bl	8002278 <SPI_EndRxTxTransaction>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10a      	bne.n	8001de8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	77fb      	strb	r3, [r7, #31]
 8001df4:	e000      	b.n	8001df8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001df6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10e      	bne.n	8001e54 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
    return;
 8001e52:	e0ce      	b.n	8001ff2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_SPI_IRQHandler+0x5e>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
    return;
 8001e70:	e0bf      	b.n	8001ff2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <HAL_SPI_IRQHandler+0x7e>
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80b0 	beq.w	8001ff2 <HAL_SPI_IRQHandler+0x1de>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80aa 	beq.w	8001ff2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d023      	beq.n	8001ef0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d011      	beq.n	8001ed8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
        return;
 8001eee:	e080      	b.n	8001ff2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d014      	beq.n	8001f24 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	f043 0208 	orr.w	r2, r3, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d04f      	beq.n	8001ff0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f5e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <HAL_SPI_IRQHandler+0x168>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d034      	beq.n	8001fe6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0203 	bic.w	r2, r2, #3
 8001f8a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d011      	beq.n	8001fb8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_SPI_IRQHandler+0x1e4>)
 8001f9a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fe6a 	bl	8000c7a <HAL_DMA_Abort_IT>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d016      	beq.n	8001fee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <HAL_SPI_IRQHandler+0x1e4>)
 8001fc6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fe54 	bl	8000c7a <HAL_DMA_Abort_IT>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001fe4:	e003      	b.n	8001fee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f808 	bl	8001ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001fec:	e000      	b.n	8001ff0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8001fee:	bf00      	nop
    return;
 8001ff0:	bf00      	nop
  }
}
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	08002011 	.word	0x08002011

08001ffc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7ff ffe5 	bl	8001ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800204c:	f7fe fcf8 	bl	8000a40 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800205c:	f7fe fcf0 	bl	8000a40 <HAL_GetTick>
 8002060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	015b      	lsls	r3, r3, #5
 8002068:	0d1b      	lsrs	r3, r3, #20
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002072:	e054      	b.n	800211e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207a:	d050      	beq.n	800211e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800207c:	f7fe fce0 	bl	8000a40 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	429a      	cmp	r2, r3
 800208a:	d902      	bls.n	8002092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d13d      	bne.n	800210e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020aa:	d111      	bne.n	80020d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b4:	d004      	beq.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020be:	d107      	bne.n	80020d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d8:	d10f      	bne.n	80020fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e017      	b.n	800213e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3b01      	subs	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4013      	ands	r3, r2
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	429a      	cmp	r2, r3
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	429a      	cmp	r2, r3
 800213a:	d19b      	bne.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000

0800214c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800215e:	f7fe fc6f 	bl	8000a40 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	4413      	add	r3, r2
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800216e:	f7fe fc67 	bl	8000a40 <HAL_GetTick>
 8002172:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	330c      	adds	r3, #12
 800217a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800217c:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00da      	lsls	r2, r3, #3
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	0d1b      	lsrs	r3, r3, #20
 800218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002194:	e060      	b.n	8002258 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800219c:	d107      	bne.n	80021ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d050      	beq.n	8002258 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021b6:	f7fe fc43 	bl	8000a40 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d902      	bls.n	80021cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d13d      	bne.n	8002248 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e4:	d111      	bne.n	800220a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ee:	d004      	beq.n	80021fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f8:	d107      	bne.n	800220a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002208:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002212:	d10f      	bne.n	8002234 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002232:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e010      	b.n	800226a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	3b01      	subs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d196      	bne.n	8002196 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000

08002278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff ff5b 	bl	800214c <SPI_WaitFifoStateUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e046      	b.n	800233a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <SPI_EndRxTxTransaction+0xcc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <SPI_EndRxTxTransaction+0xd0>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ca:	d112      	bne.n	80022f2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7ff feb0 	bl	800203c <SPI_WaitFlagStateUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	f043 0220 	orr.w	r2, r3, #32
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e023      	b.n	800233a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d0f2      	beq.n	80022f2 <SPI_EndRxTxTransaction+0x7a>
 800230c:	e000      	b.n	8002310 <SPI_EndRxTxTransaction+0x98>
        break;
 800230e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff ff15 	bl	800214c <SPI_WaitFifoStateUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232c:	f043 0220 	orr.w	r2, r3, #32
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e000      	b.n	800233a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000000 	.word	0x20000000
 8002348:	165e9f81 	.word	0x165e9f81

0800234c <memset>:
 800234c:	4402      	add	r2, r0
 800234e:	4603      	mov	r3, r0
 8002350:	4293      	cmp	r3, r2
 8002352:	d100      	bne.n	8002356 <memset+0xa>
 8002354:	4770      	bx	lr
 8002356:	f803 1b01 	strb.w	r1, [r3], #1
 800235a:	e7f9      	b.n	8002350 <memset+0x4>

0800235c <__libc_init_array>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	4d0d      	ldr	r5, [pc, #52]	; (8002394 <__libc_init_array+0x38>)
 8002360:	4c0d      	ldr	r4, [pc, #52]	; (8002398 <__libc_init_array+0x3c>)
 8002362:	1b64      	subs	r4, r4, r5
 8002364:	10a4      	asrs	r4, r4, #2
 8002366:	2600      	movs	r6, #0
 8002368:	42a6      	cmp	r6, r4
 800236a:	d109      	bne.n	8002380 <__libc_init_array+0x24>
 800236c:	4d0b      	ldr	r5, [pc, #44]	; (800239c <__libc_init_array+0x40>)
 800236e:	4c0c      	ldr	r4, [pc, #48]	; (80023a0 <__libc_init_array+0x44>)
 8002370:	f000 f818 	bl	80023a4 <_init>
 8002374:	1b64      	subs	r4, r4, r5
 8002376:	10a4      	asrs	r4, r4, #2
 8002378:	2600      	movs	r6, #0
 800237a:	42a6      	cmp	r6, r4
 800237c:	d105      	bne.n	800238a <__libc_init_array+0x2e>
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	f855 3b04 	ldr.w	r3, [r5], #4
 8002384:	4798      	blx	r3
 8002386:	3601      	adds	r6, #1
 8002388:	e7ee      	b.n	8002368 <__libc_init_array+0xc>
 800238a:	f855 3b04 	ldr.w	r3, [r5], #4
 800238e:	4798      	blx	r3
 8002390:	3601      	adds	r6, #1
 8002392:	e7f2      	b.n	800237a <__libc_init_array+0x1e>
 8002394:	080023e4 	.word	0x080023e4
 8002398:	080023e4 	.word	0x080023e4
 800239c:	080023e4 	.word	0x080023e4
 80023a0:	080023e8 	.word	0x080023e8

080023a4 <_init>:
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	bf00      	nop
 80023a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023aa:	bc08      	pop	{r3}
 80023ac:	469e      	mov	lr, r3
 80023ae:	4770      	bx	lr

080023b0 <_fini>:
 80023b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b2:	bf00      	nop
 80023b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b6:	bc08      	pop	{r3}
 80023b8:	469e      	mov	lr, r3
 80023ba:	4770      	bx	lr
